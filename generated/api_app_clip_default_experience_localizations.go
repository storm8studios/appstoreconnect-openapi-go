/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AppClipDefaultExperienceLocalizationsApiService AppClipDefaultExperienceLocalizationsApi service
type AppClipDefaultExperienceLocalizationsApiService service

type AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppClipDefaultExperienceLocalizationsApiService
	id string
	fieldsAppClipHeaderImages *[]string
	fieldsAppClipDefaultExperienceLocalizations *[]string
	include *[]string
}

// the fields to include for returned resources of type appClipHeaderImages
func (r AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedRequest) FieldsAppClipHeaderImages(fieldsAppClipHeaderImages []string) AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedRequest {
	r.fieldsAppClipHeaderImages = &fieldsAppClipHeaderImages
	return r
}

// the fields to include for returned resources of type appClipDefaultExperienceLocalizations
func (r AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedRequest) FieldsAppClipDefaultExperienceLocalizations(fieldsAppClipDefaultExperienceLocalizations []string) AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedRequest {
	r.fieldsAppClipDefaultExperienceLocalizations = &fieldsAppClipDefaultExperienceLocalizations
	return r
}

// comma-separated list of relationships to include
func (r AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedRequest) Include(include []string) AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedRequest {
	r.include = &include
	return r
}

func (r AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedRequest) Execute() (*AppClipHeaderImageResponse, *http.Response, error) {
	return r.ApiService.AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedExecute(r)
}

/*
AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelated Method for AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedRequest
*/
func (a *AppClipDefaultExperienceLocalizationsApiService) AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelated(ctx context.Context, id string) AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedRequest {
	return AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppClipHeaderImageResponse
func (a *AppClipDefaultExperienceLocalizationsApiService) AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedExecute(r AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelatedRequest) (*AppClipHeaderImageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppClipHeaderImageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppClipDefaultExperienceLocalizationsApiService.AppClipDefaultExperienceLocalizationsAppClipHeaderImageGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appClipDefaultExperienceLocalizations/{id}/appClipHeaderImage"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppClipHeaderImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipHeaderImages]", r.fieldsAppClipHeaderImages, "csv")
	}
	if r.fieldsAppClipDefaultExperienceLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipDefaultExperienceLocalizations]", r.fieldsAppClipDefaultExperienceLocalizations, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *AppClipDefaultExperienceLocalizationsApiService
	appClipDefaultExperienceLocalizationCreateRequest *AppClipDefaultExperienceLocalizationCreateRequest
}

// AppClipDefaultExperienceLocalization representation
func (r AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsCreateInstanceRequest) AppClipDefaultExperienceLocalizationCreateRequest(appClipDefaultExperienceLocalizationCreateRequest AppClipDefaultExperienceLocalizationCreateRequest) AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsCreateInstanceRequest {
	r.appClipDefaultExperienceLocalizationCreateRequest = &appClipDefaultExperienceLocalizationCreateRequest
	return r
}

func (r AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsCreateInstanceRequest) Execute() (*AppClipDefaultExperienceLocalizationResponse, *http.Response, error) {
	return r.ApiService.AppClipDefaultExperienceLocalizationsCreateInstanceExecute(r)
}

/*
AppClipDefaultExperienceLocalizationsCreateInstance Method for AppClipDefaultExperienceLocalizationsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsCreateInstanceRequest
*/
func (a *AppClipDefaultExperienceLocalizationsApiService) AppClipDefaultExperienceLocalizationsCreateInstance(ctx context.Context) AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsCreateInstanceRequest {
	return AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppClipDefaultExperienceLocalizationResponse
func (a *AppClipDefaultExperienceLocalizationsApiService) AppClipDefaultExperienceLocalizationsCreateInstanceExecute(r AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsCreateInstanceRequest) (*AppClipDefaultExperienceLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppClipDefaultExperienceLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppClipDefaultExperienceLocalizationsApiService.AppClipDefaultExperienceLocalizationsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appClipDefaultExperienceLocalizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appClipDefaultExperienceLocalizationCreateRequest == nil {
		return localVarReturnValue, nil, reportError("appClipDefaultExperienceLocalizationCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appClipDefaultExperienceLocalizationCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *AppClipDefaultExperienceLocalizationsApiService
	id string
}

func (r AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppClipDefaultExperienceLocalizationsDeleteInstanceExecute(r)
}

/*
AppClipDefaultExperienceLocalizationsDeleteInstance Method for AppClipDefaultExperienceLocalizationsDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsDeleteInstanceRequest
*/
func (a *AppClipDefaultExperienceLocalizationsApiService) AppClipDefaultExperienceLocalizationsDeleteInstance(ctx context.Context, id string) AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsDeleteInstanceRequest {
	return AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AppClipDefaultExperienceLocalizationsApiService) AppClipDefaultExperienceLocalizationsDeleteInstanceExecute(r AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppClipDefaultExperienceLocalizationsApiService.AppClipDefaultExperienceLocalizationsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appClipDefaultExperienceLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsGetInstanceRequest struct {
	ctx context.Context
	ApiService *AppClipDefaultExperienceLocalizationsApiService
	id string
	fieldsAppClipDefaultExperienceLocalizations *[]string
	include *[]string
	fieldsAppClipHeaderImages *[]string
}

// the fields to include for returned resources of type appClipDefaultExperienceLocalizations
func (r AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsGetInstanceRequest) FieldsAppClipDefaultExperienceLocalizations(fieldsAppClipDefaultExperienceLocalizations []string) AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsGetInstanceRequest {
	r.fieldsAppClipDefaultExperienceLocalizations = &fieldsAppClipDefaultExperienceLocalizations
	return r
}

// comma-separated list of relationships to include
func (r AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsGetInstanceRequest) Include(include []string) AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type appClipHeaderImages
func (r AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsGetInstanceRequest) FieldsAppClipHeaderImages(fieldsAppClipHeaderImages []string) AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsGetInstanceRequest {
	r.fieldsAppClipHeaderImages = &fieldsAppClipHeaderImages
	return r
}

func (r AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsGetInstanceRequest) Execute() (*AppClipDefaultExperienceLocalizationResponse, *http.Response, error) {
	return r.ApiService.AppClipDefaultExperienceLocalizationsGetInstanceExecute(r)
}

/*
AppClipDefaultExperienceLocalizationsGetInstance Method for AppClipDefaultExperienceLocalizationsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsGetInstanceRequest
*/
func (a *AppClipDefaultExperienceLocalizationsApiService) AppClipDefaultExperienceLocalizationsGetInstance(ctx context.Context, id string) AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsGetInstanceRequest {
	return AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppClipDefaultExperienceLocalizationResponse
func (a *AppClipDefaultExperienceLocalizationsApiService) AppClipDefaultExperienceLocalizationsGetInstanceExecute(r AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsGetInstanceRequest) (*AppClipDefaultExperienceLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppClipDefaultExperienceLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppClipDefaultExperienceLocalizationsApiService.AppClipDefaultExperienceLocalizationsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appClipDefaultExperienceLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppClipDefaultExperienceLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipDefaultExperienceLocalizations]", r.fieldsAppClipDefaultExperienceLocalizations, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsAppClipHeaderImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipHeaderImages]", r.fieldsAppClipHeaderImages, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *AppClipDefaultExperienceLocalizationsApiService
	id string
	appClipDefaultExperienceLocalizationUpdateRequest *AppClipDefaultExperienceLocalizationUpdateRequest
}

// AppClipDefaultExperienceLocalization representation
func (r AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsUpdateInstanceRequest) AppClipDefaultExperienceLocalizationUpdateRequest(appClipDefaultExperienceLocalizationUpdateRequest AppClipDefaultExperienceLocalizationUpdateRequest) AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsUpdateInstanceRequest {
	r.appClipDefaultExperienceLocalizationUpdateRequest = &appClipDefaultExperienceLocalizationUpdateRequest
	return r
}

func (r AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsUpdateInstanceRequest) Execute() (*AppClipDefaultExperienceLocalizationResponse, *http.Response, error) {
	return r.ApiService.AppClipDefaultExperienceLocalizationsUpdateInstanceExecute(r)
}

/*
AppClipDefaultExperienceLocalizationsUpdateInstance Method for AppClipDefaultExperienceLocalizationsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsUpdateInstanceRequest
*/
func (a *AppClipDefaultExperienceLocalizationsApiService) AppClipDefaultExperienceLocalizationsUpdateInstance(ctx context.Context, id string) AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsUpdateInstanceRequest {
	return AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppClipDefaultExperienceLocalizationResponse
func (a *AppClipDefaultExperienceLocalizationsApiService) AppClipDefaultExperienceLocalizationsUpdateInstanceExecute(r AppClipDefaultExperienceLocalizationsApiAppClipDefaultExperienceLocalizationsUpdateInstanceRequest) (*AppClipDefaultExperienceLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppClipDefaultExperienceLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppClipDefaultExperienceLocalizationsApiService.AppClipDefaultExperienceLocalizationsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appClipDefaultExperienceLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appClipDefaultExperienceLocalizationUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("appClipDefaultExperienceLocalizationUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appClipDefaultExperienceLocalizationUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
