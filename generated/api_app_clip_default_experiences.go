/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AppClipDefaultExperiencesApiService AppClipDefaultExperiencesApi service
type AppClipDefaultExperiencesApiService service

type AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppClipDefaultExperiencesApiService
	id string
	fieldsAppClipAppStoreReviewDetails *[]string
	fieldsAppClipDefaultExperiences *[]string
	include *[]string
}

// the fields to include for returned resources of type appClipAppStoreReviewDetails
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedRequest) FieldsAppClipAppStoreReviewDetails(fieldsAppClipAppStoreReviewDetails []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedRequest {
	r.fieldsAppClipAppStoreReviewDetails = &fieldsAppClipAppStoreReviewDetails
	return r
}

// the fields to include for returned resources of type appClipDefaultExperiences
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedRequest) FieldsAppClipDefaultExperiences(fieldsAppClipDefaultExperiences []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedRequest {
	r.fieldsAppClipDefaultExperiences = &fieldsAppClipDefaultExperiences
	return r
}

// comma-separated list of relationships to include
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedRequest) Include(include []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedRequest {
	r.include = &include
	return r
}

func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedRequest) Execute() (*AppClipAppStoreReviewDetailResponse, *http.Response, error) {
	return r.ApiService.AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedExecute(r)
}

/*
AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated Method for AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedRequest
*/
func (a *AppClipDefaultExperiencesApiService) AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated(ctx context.Context, id string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedRequest {
	return AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppClipAppStoreReviewDetailResponse
func (a *AppClipDefaultExperiencesApiService) AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedExecute(r AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelatedRequest) (*AppClipAppStoreReviewDetailResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppClipAppStoreReviewDetailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppClipDefaultExperiencesApiService.AppClipDefaultExperiencesAppClipAppStoreReviewDetailGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appClipDefaultExperiences/{id}/appClipAppStoreReviewDetail"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppClipAppStoreReviewDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipAppStoreReviewDetails]", r.fieldsAppClipAppStoreReviewDetails, "csv")
	}
	if r.fieldsAppClipDefaultExperiences != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipDefaultExperiences]", r.fieldsAppClipDefaultExperiences, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *AppClipDefaultExperiencesApiService
	id string
	filterLocale *[]string
	fieldsAppClipDefaultExperiences *[]string
	fieldsAppClipDefaultExperienceLocalizations *[]string
	fieldsAppClipHeaderImages *[]string
	limit *int32
	include *[]string
}

// filter by attribute &#39;locale&#39;
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest) FilterLocale(filterLocale []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest {
	r.filterLocale = &filterLocale
	return r
}

// the fields to include for returned resources of type appClipDefaultExperiences
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest) FieldsAppClipDefaultExperiences(fieldsAppClipDefaultExperiences []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest {
	r.fieldsAppClipDefaultExperiences = &fieldsAppClipDefaultExperiences
	return r
}

// the fields to include for returned resources of type appClipDefaultExperienceLocalizations
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest) FieldsAppClipDefaultExperienceLocalizations(fieldsAppClipDefaultExperienceLocalizations []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest {
	r.fieldsAppClipDefaultExperienceLocalizations = &fieldsAppClipDefaultExperienceLocalizations
	return r
}

// the fields to include for returned resources of type appClipHeaderImages
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest) FieldsAppClipHeaderImages(fieldsAppClipHeaderImages []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest {
	r.fieldsAppClipHeaderImages = &fieldsAppClipHeaderImages
	return r
}

// maximum resources per page
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest) Limit(limit int32) AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest) Include(include []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest) Execute() (*AppClipDefaultExperienceLocalizationsResponse, *http.Response, error) {
	return r.ApiService.AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedExecute(r)
}

/*
AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated Method for AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest
*/
func (a *AppClipDefaultExperiencesApiService) AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated(ctx context.Context, id string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest {
	return AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppClipDefaultExperienceLocalizationsResponse
func (a *AppClipDefaultExperiencesApiService) AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedExecute(r AppClipDefaultExperiencesApiAppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelatedRequest) (*AppClipDefaultExperienceLocalizationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppClipDefaultExperienceLocalizationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppClipDefaultExperiencesApiService.AppClipDefaultExperiencesAppClipDefaultExperienceLocalizationsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appClipDefaultExperiences/{id}/appClipDefaultExperienceLocalizations"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterLocale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[locale]", r.filterLocale, "csv")
	}
	if r.fieldsAppClipDefaultExperiences != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipDefaultExperiences]", r.fieldsAppClipDefaultExperiences, "csv")
	}
	if r.fieldsAppClipDefaultExperienceLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipDefaultExperienceLocalizations]", r.fieldsAppClipDefaultExperienceLocalizations, "csv")
	}
	if r.fieldsAppClipHeaderImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipHeaderImages]", r.fieldsAppClipHeaderImages, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppClipDefaultExperiencesApiAppClipDefaultExperiencesCreateInstanceRequest struct {
	ctx context.Context
	ApiService *AppClipDefaultExperiencesApiService
	appClipDefaultExperienceCreateRequest *AppClipDefaultExperienceCreateRequest
}

// AppClipDefaultExperience representation
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesCreateInstanceRequest) AppClipDefaultExperienceCreateRequest(appClipDefaultExperienceCreateRequest AppClipDefaultExperienceCreateRequest) AppClipDefaultExperiencesApiAppClipDefaultExperiencesCreateInstanceRequest {
	r.appClipDefaultExperienceCreateRequest = &appClipDefaultExperienceCreateRequest
	return r
}

func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesCreateInstanceRequest) Execute() (*AppClipDefaultExperienceResponse, *http.Response, error) {
	return r.ApiService.AppClipDefaultExperiencesCreateInstanceExecute(r)
}

/*
AppClipDefaultExperiencesCreateInstance Method for AppClipDefaultExperiencesCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AppClipDefaultExperiencesApiAppClipDefaultExperiencesCreateInstanceRequest
*/
func (a *AppClipDefaultExperiencesApiService) AppClipDefaultExperiencesCreateInstance(ctx context.Context) AppClipDefaultExperiencesApiAppClipDefaultExperiencesCreateInstanceRequest {
	return AppClipDefaultExperiencesApiAppClipDefaultExperiencesCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppClipDefaultExperienceResponse
func (a *AppClipDefaultExperiencesApiService) AppClipDefaultExperiencesCreateInstanceExecute(r AppClipDefaultExperiencesApiAppClipDefaultExperiencesCreateInstanceRequest) (*AppClipDefaultExperienceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppClipDefaultExperienceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppClipDefaultExperiencesApiService.AppClipDefaultExperiencesCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appClipDefaultExperiences"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appClipDefaultExperienceCreateRequest == nil {
		return localVarReturnValue, nil, reportError("appClipDefaultExperienceCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appClipDefaultExperienceCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppClipDefaultExperiencesApiAppClipDefaultExperiencesDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *AppClipDefaultExperiencesApiService
	id string
}

func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppClipDefaultExperiencesDeleteInstanceExecute(r)
}

/*
AppClipDefaultExperiencesDeleteInstance Method for AppClipDefaultExperiencesDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppClipDefaultExperiencesApiAppClipDefaultExperiencesDeleteInstanceRequest
*/
func (a *AppClipDefaultExperiencesApiService) AppClipDefaultExperiencesDeleteInstance(ctx context.Context, id string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesDeleteInstanceRequest {
	return AppClipDefaultExperiencesApiAppClipDefaultExperiencesDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AppClipDefaultExperiencesApiService) AppClipDefaultExperiencesDeleteInstanceExecute(r AppClipDefaultExperiencesApiAppClipDefaultExperiencesDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppClipDefaultExperiencesApiService.AppClipDefaultExperiencesDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appClipDefaultExperiences/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AppClipDefaultExperiencesApiAppClipDefaultExperiencesGetInstanceRequest struct {
	ctx context.Context
	ApiService *AppClipDefaultExperiencesApiService
	id string
	fieldsAppClipDefaultExperiences *[]string
	include *[]string
	fieldsAppClipAppStoreReviewDetails *[]string
	fieldsAppStoreVersions *[]string
	fieldsAppClipDefaultExperienceLocalizations *[]string
	limitAppClipDefaultExperienceLocalizations *int32
}

// the fields to include for returned resources of type appClipDefaultExperiences
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesGetInstanceRequest) FieldsAppClipDefaultExperiences(fieldsAppClipDefaultExperiences []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesGetInstanceRequest {
	r.fieldsAppClipDefaultExperiences = &fieldsAppClipDefaultExperiences
	return r
}

// comma-separated list of relationships to include
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesGetInstanceRequest) Include(include []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type appClipAppStoreReviewDetails
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesGetInstanceRequest) FieldsAppClipAppStoreReviewDetails(fieldsAppClipAppStoreReviewDetails []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesGetInstanceRequest {
	r.fieldsAppClipAppStoreReviewDetails = &fieldsAppClipAppStoreReviewDetails
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesGetInstanceRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesGetInstanceRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type appClipDefaultExperienceLocalizations
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesGetInstanceRequest) FieldsAppClipDefaultExperienceLocalizations(fieldsAppClipDefaultExperienceLocalizations []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesGetInstanceRequest {
	r.fieldsAppClipDefaultExperienceLocalizations = &fieldsAppClipDefaultExperienceLocalizations
	return r
}

// maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesGetInstanceRequest) LimitAppClipDefaultExperienceLocalizations(limitAppClipDefaultExperienceLocalizations int32) AppClipDefaultExperiencesApiAppClipDefaultExperiencesGetInstanceRequest {
	r.limitAppClipDefaultExperienceLocalizations = &limitAppClipDefaultExperienceLocalizations
	return r
}

func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesGetInstanceRequest) Execute() (*AppClipDefaultExperienceResponse, *http.Response, error) {
	return r.ApiService.AppClipDefaultExperiencesGetInstanceExecute(r)
}

/*
AppClipDefaultExperiencesGetInstance Method for AppClipDefaultExperiencesGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppClipDefaultExperiencesApiAppClipDefaultExperiencesGetInstanceRequest
*/
func (a *AppClipDefaultExperiencesApiService) AppClipDefaultExperiencesGetInstance(ctx context.Context, id string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesGetInstanceRequest {
	return AppClipDefaultExperiencesApiAppClipDefaultExperiencesGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppClipDefaultExperienceResponse
func (a *AppClipDefaultExperiencesApiService) AppClipDefaultExperiencesGetInstanceExecute(r AppClipDefaultExperiencesApiAppClipDefaultExperiencesGetInstanceRequest) (*AppClipDefaultExperienceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppClipDefaultExperienceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppClipDefaultExperiencesApiService.AppClipDefaultExperiencesGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appClipDefaultExperiences/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppClipDefaultExperiences != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipDefaultExperiences]", r.fieldsAppClipDefaultExperiences, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsAppClipAppStoreReviewDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipAppStoreReviewDetails]", r.fieldsAppClipAppStoreReviewDetails, "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "csv")
	}
	if r.fieldsAppClipDefaultExperienceLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipDefaultExperienceLocalizations]", r.fieldsAppClipDefaultExperienceLocalizations, "csv")
	}
	if r.limitAppClipDefaultExperienceLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appClipDefaultExperienceLocalizations]", r.limitAppClipDefaultExperienceLocalizations, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppClipDefaultExperiencesApiService
	id string
	fieldsAppStoreVersionExperiments *[]string
	fieldsAgeRatingDeclarations *[]string
	fieldsAppStoreVersionSubmissions *[]string
	fieldsAppStoreReviewDetails *[]string
	fieldsAppStoreVersions *[]string
	fieldsApps *[]string
	fieldsRoutingAppCoverages *[]string
	fieldsAppClipDefaultExperiences *[]string
	fieldsAppStoreVersionPhasedReleases *[]string
	fieldsBuilds *[]string
	fieldsAppStoreVersionLocalizations *[]string
	limitAppStoreVersionLocalizations *int32
	limitAppStoreVersionExperiments *int32
	include *[]string
}

// the fields to include for returned resources of type appStoreVersionExperiments
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreVersionExperiments(fieldsAppStoreVersionExperiments []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreVersionExperiments = &fieldsAppStoreVersionExperiments
	return r
}

// the fields to include for returned resources of type ageRatingDeclarations
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest) FieldsAgeRatingDeclarations(fieldsAgeRatingDeclarations []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAgeRatingDeclarations = &fieldsAgeRatingDeclarations
	return r
}

// the fields to include for returned resources of type appStoreVersionSubmissions
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreVersionSubmissions(fieldsAppStoreVersionSubmissions []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreVersionSubmissions = &fieldsAppStoreVersionSubmissions
	return r
}

// the fields to include for returned resources of type appStoreReviewDetails
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreReviewDetails(fieldsAppStoreReviewDetails []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreReviewDetails = &fieldsAppStoreReviewDetails
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type apps
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest) FieldsApps(fieldsApps []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// the fields to include for returned resources of type routingAppCoverages
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest) FieldsRoutingAppCoverages(fieldsRoutingAppCoverages []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest {
	r.fieldsRoutingAppCoverages = &fieldsRoutingAppCoverages
	return r
}

// the fields to include for returned resources of type appClipDefaultExperiences
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest) FieldsAppClipDefaultExperiences(fieldsAppClipDefaultExperiences []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppClipDefaultExperiences = &fieldsAppClipDefaultExperiences
	return r
}

// the fields to include for returned resources of type appStoreVersionPhasedReleases
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreVersionPhasedReleases(fieldsAppStoreVersionPhasedReleases []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreVersionPhasedReleases = &fieldsAppStoreVersionPhasedReleases
	return r
}

// the fields to include for returned resources of type builds
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest) FieldsBuilds(fieldsBuilds []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// the fields to include for returned resources of type appStoreVersionLocalizations
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreVersionLocalizations(fieldsAppStoreVersionLocalizations []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreVersionLocalizations = &fieldsAppStoreVersionLocalizations
	return r
}

// maximum number of related appStoreVersionLocalizations returned (when they are included)
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest) LimitAppStoreVersionLocalizations(limitAppStoreVersionLocalizations int32) AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest {
	r.limitAppStoreVersionLocalizations = &limitAppStoreVersionLocalizations
	return r
}

// maximum number of related appStoreVersionExperiments returned (when they are included)
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest) LimitAppStoreVersionExperiments(limitAppStoreVersionExperiments int32) AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest {
	r.limitAppStoreVersionExperiments = &limitAppStoreVersionExperiments
	return r
}

// comma-separated list of relationships to include
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest) Include(include []string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest {
	r.include = &include
	return r
}

func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest) Execute() (*AppStoreVersionResponse, *http.Response, error) {
	return r.ApiService.AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedExecute(r)
}

/*
AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated Method for AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest
*/
func (a *AppClipDefaultExperiencesApiService) AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated(ctx context.Context, id string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest {
	return AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionResponse
func (a *AppClipDefaultExperiencesApiService) AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedExecute(r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelatedRequest) (*AppStoreVersionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppClipDefaultExperiencesApiService.AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appClipDefaultExperiences/{id}/releaseWithAppStoreVersion"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppStoreVersionExperiments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperiments]", r.fieldsAppStoreVersionExperiments, "csv")
	}
	if r.fieldsAgeRatingDeclarations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ageRatingDeclarations]", r.fieldsAgeRatingDeclarations, "csv")
	}
	if r.fieldsAppStoreVersionSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionSubmissions]", r.fieldsAppStoreVersionSubmissions, "csv")
	}
	if r.fieldsAppStoreReviewDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreReviewDetails]", r.fieldsAppStoreReviewDetails, "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	if r.fieldsRoutingAppCoverages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[routingAppCoverages]", r.fieldsRoutingAppCoverages, "csv")
	}
	if r.fieldsAppClipDefaultExperiences != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipDefaultExperiences]", r.fieldsAppClipDefaultExperiences, "csv")
	}
	if r.fieldsAppStoreVersionPhasedReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionPhasedReleases]", r.fieldsAppStoreVersionPhasedReleases, "csv")
	}
	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	if r.fieldsAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionLocalizations]", r.fieldsAppStoreVersionLocalizations, "csv")
	}
	if r.limitAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreVersionLocalizations]", r.limitAppStoreVersionLocalizations, "")
	}
	if r.limitAppStoreVersionExperiments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreVersionExperiments]", r.limitAppStoreVersionExperiments, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipRequest struct {
	ctx context.Context
	ApiService *AppClipDefaultExperiencesApiService
	id string
}

func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipRequest) Execute() (*AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse, *http.Response, error) {
	return r.ApiService.AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipExecute(r)
}

/*
AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship Method for AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipRequest
*/
func (a *AppClipDefaultExperiencesApiService) AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship(ctx context.Context, id string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipRequest {
	return AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse
func (a *AppClipDefaultExperiencesApiService) AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipExecute(r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationshipRequest) (*AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppClipDefaultExperiencesApiService.AppClipDefaultExperiencesReleaseWithAppStoreVersionGetToOneRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipRequest struct {
	ctx context.Context
	ApiService *AppClipDefaultExperiencesApiService
	id string
	appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest *AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest
}

// Related linkage
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipRequest) AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest(appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest AppClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest) AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipRequest {
	r.appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest = &appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest
	return r
}

func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipExecute(r)
}

/*
AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship Method for AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipRequest
*/
func (a *AppClipDefaultExperiencesApiService) AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship(ctx context.Context, id string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipRequest {
	return AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AppClipDefaultExperiencesApiService) AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipExecute(r AppClipDefaultExperiencesApiAppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppClipDefaultExperiencesApiService.AppClipDefaultExperiencesReleaseWithAppStoreVersionUpdateToOneRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appClipDefaultExperiences/{id}/relationships/releaseWithAppStoreVersion"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest == nil {
		return nil, reportError("appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appClipDefaultExperienceReleaseWithAppStoreVersionLinkageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AppClipDefaultExperiencesApiAppClipDefaultExperiencesUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *AppClipDefaultExperiencesApiService
	id string
	appClipDefaultExperienceUpdateRequest *AppClipDefaultExperienceUpdateRequest
}

// AppClipDefaultExperience representation
func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesUpdateInstanceRequest) AppClipDefaultExperienceUpdateRequest(appClipDefaultExperienceUpdateRequest AppClipDefaultExperienceUpdateRequest) AppClipDefaultExperiencesApiAppClipDefaultExperiencesUpdateInstanceRequest {
	r.appClipDefaultExperienceUpdateRequest = &appClipDefaultExperienceUpdateRequest
	return r
}

func (r AppClipDefaultExperiencesApiAppClipDefaultExperiencesUpdateInstanceRequest) Execute() (*AppClipDefaultExperienceResponse, *http.Response, error) {
	return r.ApiService.AppClipDefaultExperiencesUpdateInstanceExecute(r)
}

/*
AppClipDefaultExperiencesUpdateInstance Method for AppClipDefaultExperiencesUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppClipDefaultExperiencesApiAppClipDefaultExperiencesUpdateInstanceRequest
*/
func (a *AppClipDefaultExperiencesApiService) AppClipDefaultExperiencesUpdateInstance(ctx context.Context, id string) AppClipDefaultExperiencesApiAppClipDefaultExperiencesUpdateInstanceRequest {
	return AppClipDefaultExperiencesApiAppClipDefaultExperiencesUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppClipDefaultExperienceResponse
func (a *AppClipDefaultExperiencesApiService) AppClipDefaultExperiencesUpdateInstanceExecute(r AppClipDefaultExperiencesApiAppClipDefaultExperiencesUpdateInstanceRequest) (*AppClipDefaultExperienceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppClipDefaultExperienceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppClipDefaultExperiencesApiService.AppClipDefaultExperiencesUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appClipDefaultExperiences/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appClipDefaultExperienceUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("appClipDefaultExperienceUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appClipDefaultExperienceUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
