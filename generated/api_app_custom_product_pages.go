/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AppCustomProductPagesApiService AppCustomProductPagesApi service
type AppCustomProductPagesApiService service

type AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *AppCustomProductPagesApiService
	id string
	filterState *[]string
	fieldsAppCustomProductPageLocalizations *[]string
	fieldsAppCustomProductPageVersions *[]string
	fieldsAppCustomProductPages *[]string
	limit *int32
	limitAppCustomProductPageLocalizations *int32
	include *[]string
}

// filter by attribute &#39;state&#39;
func (r AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest) FilterState(filterState []string) AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest {
	r.filterState = &filterState
	return r
}

// the fields to include for returned resources of type appCustomProductPageLocalizations
func (r AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest) FieldsAppCustomProductPageLocalizations(fieldsAppCustomProductPageLocalizations []string) AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest {
	r.fieldsAppCustomProductPageLocalizations = &fieldsAppCustomProductPageLocalizations
	return r
}

// the fields to include for returned resources of type appCustomProductPageVersions
func (r AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest) FieldsAppCustomProductPageVersions(fieldsAppCustomProductPageVersions []string) AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest {
	r.fieldsAppCustomProductPageVersions = &fieldsAppCustomProductPageVersions
	return r
}

// the fields to include for returned resources of type appCustomProductPages
func (r AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest) FieldsAppCustomProductPages(fieldsAppCustomProductPages []string) AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest {
	r.fieldsAppCustomProductPages = &fieldsAppCustomProductPages
	return r
}

// maximum resources per page
func (r AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest) Limit(limit int32) AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// maximum number of related appCustomProductPageLocalizations returned (when they are included)
func (r AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest) LimitAppCustomProductPageLocalizations(limitAppCustomProductPageLocalizations int32) AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest {
	r.limitAppCustomProductPageLocalizations = &limitAppCustomProductPageLocalizations
	return r
}

// comma-separated list of relationships to include
func (r AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest) Include(include []string) AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest) Execute() (*AppCustomProductPageVersionsResponse, *http.Response, error) {
	return r.ApiService.AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedExecute(r)
}

/*
AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelated Method for AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest
*/
func (a *AppCustomProductPagesApiService) AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelated(ctx context.Context, id string) AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest {
	return AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppCustomProductPageVersionsResponse
func (a *AppCustomProductPagesApiService) AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedExecute(r AppCustomProductPagesApiAppCustomProductPagesAppCustomProductPageVersionsGetToManyRelatedRequest) (*AppCustomProductPageVersionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppCustomProductPageVersionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCustomProductPagesApiService.AppCustomProductPagesAppCustomProductPageVersionsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appCustomProductPages/{id}/appCustomProductPageVersions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[state]", r.filterState, "csv")
	}
	if r.fieldsAppCustomProductPageLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appCustomProductPageLocalizations]", r.fieldsAppCustomProductPageLocalizations, "csv")
	}
	if r.fieldsAppCustomProductPageVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appCustomProductPageVersions]", r.fieldsAppCustomProductPageVersions, "csv")
	}
	if r.fieldsAppCustomProductPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appCustomProductPages]", r.fieldsAppCustomProductPages, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.limitAppCustomProductPageLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appCustomProductPageLocalizations]", r.limitAppCustomProductPageLocalizations, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppCustomProductPagesApiAppCustomProductPagesCreateInstanceRequest struct {
	ctx context.Context
	ApiService *AppCustomProductPagesApiService
	appCustomProductPageCreateRequest *AppCustomProductPageCreateRequest
}

// AppCustomProductPage representation
func (r AppCustomProductPagesApiAppCustomProductPagesCreateInstanceRequest) AppCustomProductPageCreateRequest(appCustomProductPageCreateRequest AppCustomProductPageCreateRequest) AppCustomProductPagesApiAppCustomProductPagesCreateInstanceRequest {
	r.appCustomProductPageCreateRequest = &appCustomProductPageCreateRequest
	return r
}

func (r AppCustomProductPagesApiAppCustomProductPagesCreateInstanceRequest) Execute() (*AppCustomProductPageResponse, *http.Response, error) {
	return r.ApiService.AppCustomProductPagesCreateInstanceExecute(r)
}

/*
AppCustomProductPagesCreateInstance Method for AppCustomProductPagesCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AppCustomProductPagesApiAppCustomProductPagesCreateInstanceRequest
*/
func (a *AppCustomProductPagesApiService) AppCustomProductPagesCreateInstance(ctx context.Context) AppCustomProductPagesApiAppCustomProductPagesCreateInstanceRequest {
	return AppCustomProductPagesApiAppCustomProductPagesCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppCustomProductPageResponse
func (a *AppCustomProductPagesApiService) AppCustomProductPagesCreateInstanceExecute(r AppCustomProductPagesApiAppCustomProductPagesCreateInstanceRequest) (*AppCustomProductPageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppCustomProductPageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCustomProductPagesApiService.AppCustomProductPagesCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appCustomProductPages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appCustomProductPageCreateRequest == nil {
		return localVarReturnValue, nil, reportError("appCustomProductPageCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appCustomProductPageCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppCustomProductPagesApiAppCustomProductPagesDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *AppCustomProductPagesApiService
	id string
}

func (r AppCustomProductPagesApiAppCustomProductPagesDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppCustomProductPagesDeleteInstanceExecute(r)
}

/*
AppCustomProductPagesDeleteInstance Method for AppCustomProductPagesDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppCustomProductPagesApiAppCustomProductPagesDeleteInstanceRequest
*/
func (a *AppCustomProductPagesApiService) AppCustomProductPagesDeleteInstance(ctx context.Context, id string) AppCustomProductPagesApiAppCustomProductPagesDeleteInstanceRequest {
	return AppCustomProductPagesApiAppCustomProductPagesDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AppCustomProductPagesApiService) AppCustomProductPagesDeleteInstanceExecute(r AppCustomProductPagesApiAppCustomProductPagesDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCustomProductPagesApiService.AppCustomProductPagesDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appCustomProductPages/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AppCustomProductPagesApiAppCustomProductPagesGetInstanceRequest struct {
	ctx context.Context
	ApiService *AppCustomProductPagesApiService
	id string
	fieldsAppCustomProductPages *[]string
	include *[]string
	fieldsAppCustomProductPageVersions *[]string
	limitAppCustomProductPageVersions *int32
}

// the fields to include for returned resources of type appCustomProductPages
func (r AppCustomProductPagesApiAppCustomProductPagesGetInstanceRequest) FieldsAppCustomProductPages(fieldsAppCustomProductPages []string) AppCustomProductPagesApiAppCustomProductPagesGetInstanceRequest {
	r.fieldsAppCustomProductPages = &fieldsAppCustomProductPages
	return r
}

// comma-separated list of relationships to include
func (r AppCustomProductPagesApiAppCustomProductPagesGetInstanceRequest) Include(include []string) AppCustomProductPagesApiAppCustomProductPagesGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type appCustomProductPageVersions
func (r AppCustomProductPagesApiAppCustomProductPagesGetInstanceRequest) FieldsAppCustomProductPageVersions(fieldsAppCustomProductPageVersions []string) AppCustomProductPagesApiAppCustomProductPagesGetInstanceRequest {
	r.fieldsAppCustomProductPageVersions = &fieldsAppCustomProductPageVersions
	return r
}

// maximum number of related appCustomProductPageVersions returned (when they are included)
func (r AppCustomProductPagesApiAppCustomProductPagesGetInstanceRequest) LimitAppCustomProductPageVersions(limitAppCustomProductPageVersions int32) AppCustomProductPagesApiAppCustomProductPagesGetInstanceRequest {
	r.limitAppCustomProductPageVersions = &limitAppCustomProductPageVersions
	return r
}

func (r AppCustomProductPagesApiAppCustomProductPagesGetInstanceRequest) Execute() (*AppCustomProductPageResponse, *http.Response, error) {
	return r.ApiService.AppCustomProductPagesGetInstanceExecute(r)
}

/*
AppCustomProductPagesGetInstance Method for AppCustomProductPagesGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppCustomProductPagesApiAppCustomProductPagesGetInstanceRequest
*/
func (a *AppCustomProductPagesApiService) AppCustomProductPagesGetInstance(ctx context.Context, id string) AppCustomProductPagesApiAppCustomProductPagesGetInstanceRequest {
	return AppCustomProductPagesApiAppCustomProductPagesGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppCustomProductPageResponse
func (a *AppCustomProductPagesApiService) AppCustomProductPagesGetInstanceExecute(r AppCustomProductPagesApiAppCustomProductPagesGetInstanceRequest) (*AppCustomProductPageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppCustomProductPageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCustomProductPagesApiService.AppCustomProductPagesGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appCustomProductPages/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppCustomProductPages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appCustomProductPages]", r.fieldsAppCustomProductPages, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsAppCustomProductPageVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appCustomProductPageVersions]", r.fieldsAppCustomProductPageVersions, "csv")
	}
	if r.limitAppCustomProductPageVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appCustomProductPageVersions]", r.limitAppCustomProductPageVersions, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppCustomProductPagesApiAppCustomProductPagesUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *AppCustomProductPagesApiService
	id string
	appCustomProductPageUpdateRequest *AppCustomProductPageUpdateRequest
}

// AppCustomProductPage representation
func (r AppCustomProductPagesApiAppCustomProductPagesUpdateInstanceRequest) AppCustomProductPageUpdateRequest(appCustomProductPageUpdateRequest AppCustomProductPageUpdateRequest) AppCustomProductPagesApiAppCustomProductPagesUpdateInstanceRequest {
	r.appCustomProductPageUpdateRequest = &appCustomProductPageUpdateRequest
	return r
}

func (r AppCustomProductPagesApiAppCustomProductPagesUpdateInstanceRequest) Execute() (*AppCustomProductPageResponse, *http.Response, error) {
	return r.ApiService.AppCustomProductPagesUpdateInstanceExecute(r)
}

/*
AppCustomProductPagesUpdateInstance Method for AppCustomProductPagesUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppCustomProductPagesApiAppCustomProductPagesUpdateInstanceRequest
*/
func (a *AppCustomProductPagesApiService) AppCustomProductPagesUpdateInstance(ctx context.Context, id string) AppCustomProductPagesApiAppCustomProductPagesUpdateInstanceRequest {
	return AppCustomProductPagesApiAppCustomProductPagesUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppCustomProductPageResponse
func (a *AppCustomProductPagesApiService) AppCustomProductPagesUpdateInstanceExecute(r AppCustomProductPagesApiAppCustomProductPagesUpdateInstanceRequest) (*AppCustomProductPageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppCustomProductPageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppCustomProductPagesApiService.AppCustomProductPagesUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appCustomProductPages/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appCustomProductPageUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("appCustomProductPageUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appCustomProductPageUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
