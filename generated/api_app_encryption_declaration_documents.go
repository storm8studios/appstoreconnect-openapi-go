/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AppEncryptionDeclarationDocumentsApiService AppEncryptionDeclarationDocumentsApi service
type AppEncryptionDeclarationDocumentsApiService service

type AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *AppEncryptionDeclarationDocumentsApiService
	appEncryptionDeclarationDocumentCreateRequest *AppEncryptionDeclarationDocumentCreateRequest
}

// AppEncryptionDeclarationDocument representation
func (r AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsCreateInstanceRequest) AppEncryptionDeclarationDocumentCreateRequest(appEncryptionDeclarationDocumentCreateRequest AppEncryptionDeclarationDocumentCreateRequest) AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsCreateInstanceRequest {
	r.appEncryptionDeclarationDocumentCreateRequest = &appEncryptionDeclarationDocumentCreateRequest
	return r
}

func (r AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsCreateInstanceRequest) Execute() (*AppEncryptionDeclarationDocumentResponse, *http.Response, error) {
	return r.ApiService.AppEncryptionDeclarationDocumentsCreateInstanceExecute(r)
}

/*
AppEncryptionDeclarationDocumentsCreateInstance Method for AppEncryptionDeclarationDocumentsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsCreateInstanceRequest
*/
func (a *AppEncryptionDeclarationDocumentsApiService) AppEncryptionDeclarationDocumentsCreateInstance(ctx context.Context) AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsCreateInstanceRequest {
	return AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppEncryptionDeclarationDocumentResponse
func (a *AppEncryptionDeclarationDocumentsApiService) AppEncryptionDeclarationDocumentsCreateInstanceExecute(r AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsCreateInstanceRequest) (*AppEncryptionDeclarationDocumentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppEncryptionDeclarationDocumentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppEncryptionDeclarationDocumentsApiService.AppEncryptionDeclarationDocumentsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appEncryptionDeclarationDocuments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appEncryptionDeclarationDocumentCreateRequest == nil {
		return localVarReturnValue, nil, reportError("appEncryptionDeclarationDocumentCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appEncryptionDeclarationDocumentCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsGetInstanceRequest struct {
	ctx context.Context
	ApiService *AppEncryptionDeclarationDocumentsApiService
	id string
	fieldsAppEncryptionDeclarationDocuments *[]string
}

// the fields to include for returned resources of type appEncryptionDeclarationDocuments
func (r AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsGetInstanceRequest) FieldsAppEncryptionDeclarationDocuments(fieldsAppEncryptionDeclarationDocuments []string) AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsGetInstanceRequest {
	r.fieldsAppEncryptionDeclarationDocuments = &fieldsAppEncryptionDeclarationDocuments
	return r
}

func (r AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsGetInstanceRequest) Execute() (*AppEncryptionDeclarationDocumentResponse, *http.Response, error) {
	return r.ApiService.AppEncryptionDeclarationDocumentsGetInstanceExecute(r)
}

/*
AppEncryptionDeclarationDocumentsGetInstance Method for AppEncryptionDeclarationDocumentsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsGetInstanceRequest
*/
func (a *AppEncryptionDeclarationDocumentsApiService) AppEncryptionDeclarationDocumentsGetInstance(ctx context.Context, id string) AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsGetInstanceRequest {
	return AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppEncryptionDeclarationDocumentResponse
func (a *AppEncryptionDeclarationDocumentsApiService) AppEncryptionDeclarationDocumentsGetInstanceExecute(r AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsGetInstanceRequest) (*AppEncryptionDeclarationDocumentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppEncryptionDeclarationDocumentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppEncryptionDeclarationDocumentsApiService.AppEncryptionDeclarationDocumentsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appEncryptionDeclarationDocuments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppEncryptionDeclarationDocuments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEncryptionDeclarationDocuments]", r.fieldsAppEncryptionDeclarationDocuments, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *AppEncryptionDeclarationDocumentsApiService
	id string
	appEncryptionDeclarationDocumentUpdateRequest *AppEncryptionDeclarationDocumentUpdateRequest
}

// AppEncryptionDeclarationDocument representation
func (r AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsUpdateInstanceRequest) AppEncryptionDeclarationDocumentUpdateRequest(appEncryptionDeclarationDocumentUpdateRequest AppEncryptionDeclarationDocumentUpdateRequest) AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsUpdateInstanceRequest {
	r.appEncryptionDeclarationDocumentUpdateRequest = &appEncryptionDeclarationDocumentUpdateRequest
	return r
}

func (r AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsUpdateInstanceRequest) Execute() (*AppEncryptionDeclarationDocumentResponse, *http.Response, error) {
	return r.ApiService.AppEncryptionDeclarationDocumentsUpdateInstanceExecute(r)
}

/*
AppEncryptionDeclarationDocumentsUpdateInstance Method for AppEncryptionDeclarationDocumentsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsUpdateInstanceRequest
*/
func (a *AppEncryptionDeclarationDocumentsApiService) AppEncryptionDeclarationDocumentsUpdateInstance(ctx context.Context, id string) AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsUpdateInstanceRequest {
	return AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppEncryptionDeclarationDocumentResponse
func (a *AppEncryptionDeclarationDocumentsApiService) AppEncryptionDeclarationDocumentsUpdateInstanceExecute(r AppEncryptionDeclarationDocumentsApiAppEncryptionDeclarationDocumentsUpdateInstanceRequest) (*AppEncryptionDeclarationDocumentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppEncryptionDeclarationDocumentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppEncryptionDeclarationDocumentsApiService.AppEncryptionDeclarationDocumentsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appEncryptionDeclarationDocuments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appEncryptionDeclarationDocumentUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("appEncryptionDeclarationDocumentUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appEncryptionDeclarationDocumentUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
