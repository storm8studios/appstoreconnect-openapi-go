/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AppEncryptionDeclarationsApiService AppEncryptionDeclarationsApi service
type AppEncryptionDeclarationsApiService service

type AppEncryptionDeclarationsApiAppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppEncryptionDeclarationsApiService
	id string
	fieldsAppEncryptionDeclarationDocuments *[]string
}

// the fields to include for returned resources of type appEncryptionDeclarationDocuments
func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedRequest) FieldsAppEncryptionDeclarationDocuments(fieldsAppEncryptionDeclarationDocuments []string) AppEncryptionDeclarationsApiAppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedRequest {
	r.fieldsAppEncryptionDeclarationDocuments = &fieldsAppEncryptionDeclarationDocuments
	return r
}

func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedRequest) Execute() (*AppEncryptionDeclarationDocumentResponse, *http.Response, error) {
	return r.ApiService.AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedExecute(r)
}

/*
AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelated Method for AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppEncryptionDeclarationsApiAppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedRequest
*/
func (a *AppEncryptionDeclarationsApiService) AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelated(ctx context.Context, id string) AppEncryptionDeclarationsApiAppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedRequest {
	return AppEncryptionDeclarationsApiAppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppEncryptionDeclarationDocumentResponse
func (a *AppEncryptionDeclarationsApiService) AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedExecute(r AppEncryptionDeclarationsApiAppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelatedRequest) (*AppEncryptionDeclarationDocumentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppEncryptionDeclarationDocumentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppEncryptionDeclarationsApiService.AppEncryptionDeclarationsAppEncryptionDeclarationDocumentGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appEncryptionDeclarations/{id}/appEncryptionDeclarationDocument"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppEncryptionDeclarationDocuments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEncryptionDeclarationDocuments]", r.fieldsAppEncryptionDeclarationDocuments, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppEncryptionDeclarationsApiAppEncryptionDeclarationsAppGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppEncryptionDeclarationsApiService
	id string
	fieldsApps *[]string
}

// the fields to include for returned resources of type apps
func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsAppGetToOneRelatedRequest) FieldsApps(fieldsApps []string) AppEncryptionDeclarationsApiAppEncryptionDeclarationsAppGetToOneRelatedRequest {
	r.fieldsApps = &fieldsApps
	return r
}

func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsAppGetToOneRelatedRequest) Execute() (*AppResponse, *http.Response, error) {
	return r.ApiService.AppEncryptionDeclarationsAppGetToOneRelatedExecute(r)
}

/*
AppEncryptionDeclarationsAppGetToOneRelated Method for AppEncryptionDeclarationsAppGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppEncryptionDeclarationsApiAppEncryptionDeclarationsAppGetToOneRelatedRequest
*/
func (a *AppEncryptionDeclarationsApiService) AppEncryptionDeclarationsAppGetToOneRelated(ctx context.Context, id string) AppEncryptionDeclarationsApiAppEncryptionDeclarationsAppGetToOneRelatedRequest {
	return AppEncryptionDeclarationsApiAppEncryptionDeclarationsAppGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppResponse
func (a *AppEncryptionDeclarationsApiService) AppEncryptionDeclarationsAppGetToOneRelatedExecute(r AppEncryptionDeclarationsApiAppEncryptionDeclarationsAppGetToOneRelatedRequest) (*AppResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppEncryptionDeclarationsApiService.AppEncryptionDeclarationsAppGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appEncryptionDeclarations/{id}/app"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppEncryptionDeclarationsApiAppEncryptionDeclarationsBuildsCreateToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *AppEncryptionDeclarationsApiService
	id string
	appEncryptionDeclarationBuildsLinkagesRequest *AppEncryptionDeclarationBuildsLinkagesRequest
}

// List of related linkages
func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsBuildsCreateToManyRelationshipRequest) AppEncryptionDeclarationBuildsLinkagesRequest(appEncryptionDeclarationBuildsLinkagesRequest AppEncryptionDeclarationBuildsLinkagesRequest) AppEncryptionDeclarationsApiAppEncryptionDeclarationsBuildsCreateToManyRelationshipRequest {
	r.appEncryptionDeclarationBuildsLinkagesRequest = &appEncryptionDeclarationBuildsLinkagesRequest
	return r
}

func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsBuildsCreateToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppEncryptionDeclarationsBuildsCreateToManyRelationshipExecute(r)
}

/*
AppEncryptionDeclarationsBuildsCreateToManyRelationship Method for AppEncryptionDeclarationsBuildsCreateToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppEncryptionDeclarationsApiAppEncryptionDeclarationsBuildsCreateToManyRelationshipRequest
*/
func (a *AppEncryptionDeclarationsApiService) AppEncryptionDeclarationsBuildsCreateToManyRelationship(ctx context.Context, id string) AppEncryptionDeclarationsApiAppEncryptionDeclarationsBuildsCreateToManyRelationshipRequest {
	return AppEncryptionDeclarationsApiAppEncryptionDeclarationsBuildsCreateToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AppEncryptionDeclarationsApiService) AppEncryptionDeclarationsBuildsCreateToManyRelationshipExecute(r AppEncryptionDeclarationsApiAppEncryptionDeclarationsBuildsCreateToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppEncryptionDeclarationsApiService.AppEncryptionDeclarationsBuildsCreateToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appEncryptionDeclarations/{id}/relationships/builds"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appEncryptionDeclarationBuildsLinkagesRequest == nil {
		return nil, reportError("appEncryptionDeclarationBuildsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appEncryptionDeclarationBuildsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest struct {
	ctx context.Context
	ApiService *AppEncryptionDeclarationsApiService
	filterPlatform *[]string
	filterApp *[]string
	filterBuilds *[]string
	fieldsAppEncryptionDeclarations *[]string
	limit *int32
	include *[]string
	fieldsAppEncryptionDeclarationDocuments *[]string
	fieldsApps *[]string
	limitBuilds *int32
}

// filter by attribute &#39;platform&#39;
func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest) FilterPlatform(filterPlatform []string) AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest {
	r.filterPlatform = &filterPlatform
	return r
}

// filter by id(s) of related &#39;app&#39;
func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest) FilterApp(filterApp []string) AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest {
	r.filterApp = &filterApp
	return r
}

// filter by id(s) of related &#39;builds&#39;
func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest) FilterBuilds(filterBuilds []string) AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest {
	r.filterBuilds = &filterBuilds
	return r
}

// the fields to include for returned resources of type appEncryptionDeclarations
func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest) FieldsAppEncryptionDeclarations(fieldsAppEncryptionDeclarations []string) AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest {
	r.fieldsAppEncryptionDeclarations = &fieldsAppEncryptionDeclarations
	return r
}

// maximum resources per page
func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest) Limit(limit int32) AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest) Include(include []string) AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type appEncryptionDeclarationDocuments
func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest) FieldsAppEncryptionDeclarationDocuments(fieldsAppEncryptionDeclarationDocuments []string) AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest {
	r.fieldsAppEncryptionDeclarationDocuments = &fieldsAppEncryptionDeclarationDocuments
	return r
}

// the fields to include for returned resources of type apps
func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest) FieldsApps(fieldsApps []string) AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// maximum number of related builds returned (when they are included)
func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest) LimitBuilds(limitBuilds int32) AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest {
	r.limitBuilds = &limitBuilds
	return r
}

func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest) Execute() (*AppEncryptionDeclarationsResponse, *http.Response, error) {
	return r.ApiService.AppEncryptionDeclarationsGetCollectionExecute(r)
}

/*
AppEncryptionDeclarationsGetCollection Method for AppEncryptionDeclarationsGetCollection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest
*/
func (a *AppEncryptionDeclarationsApiService) AppEncryptionDeclarationsGetCollection(ctx context.Context) AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest {
	return AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppEncryptionDeclarationsResponse
func (a *AppEncryptionDeclarationsApiService) AppEncryptionDeclarationsGetCollectionExecute(r AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetCollectionRequest) (*AppEncryptionDeclarationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppEncryptionDeclarationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppEncryptionDeclarationsApiService.AppEncryptionDeclarationsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appEncryptionDeclarations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterPlatform != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[platform]", r.filterPlatform, "csv")
	}
	if r.filterApp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[app]", r.filterApp, "csv")
	}
	if r.filterBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[builds]", r.filterBuilds, "csv")
	}
	if r.fieldsAppEncryptionDeclarations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEncryptionDeclarations]", r.fieldsAppEncryptionDeclarations, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsAppEncryptionDeclarationDocuments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEncryptionDeclarationDocuments]", r.fieldsAppEncryptionDeclarationDocuments, "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	if r.limitBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[builds]", r.limitBuilds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetInstanceRequest struct {
	ctx context.Context
	ApiService *AppEncryptionDeclarationsApiService
	id string
	fieldsAppEncryptionDeclarations *[]string
	include *[]string
	fieldsAppEncryptionDeclarationDocuments *[]string
	fieldsApps *[]string
	limitBuilds *int32
}

// the fields to include for returned resources of type appEncryptionDeclarations
func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetInstanceRequest) FieldsAppEncryptionDeclarations(fieldsAppEncryptionDeclarations []string) AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetInstanceRequest {
	r.fieldsAppEncryptionDeclarations = &fieldsAppEncryptionDeclarations
	return r
}

// comma-separated list of relationships to include
func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetInstanceRequest) Include(include []string) AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type appEncryptionDeclarationDocuments
func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetInstanceRequest) FieldsAppEncryptionDeclarationDocuments(fieldsAppEncryptionDeclarationDocuments []string) AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetInstanceRequest {
	r.fieldsAppEncryptionDeclarationDocuments = &fieldsAppEncryptionDeclarationDocuments
	return r
}

// the fields to include for returned resources of type apps
func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetInstanceRequest) FieldsApps(fieldsApps []string) AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetInstanceRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// maximum number of related builds returned (when they are included)
func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetInstanceRequest) LimitBuilds(limitBuilds int32) AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetInstanceRequest {
	r.limitBuilds = &limitBuilds
	return r
}

func (r AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetInstanceRequest) Execute() (*AppEncryptionDeclarationResponse, *http.Response, error) {
	return r.ApiService.AppEncryptionDeclarationsGetInstanceExecute(r)
}

/*
AppEncryptionDeclarationsGetInstance Method for AppEncryptionDeclarationsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetInstanceRequest
*/
func (a *AppEncryptionDeclarationsApiService) AppEncryptionDeclarationsGetInstance(ctx context.Context, id string) AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetInstanceRequest {
	return AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppEncryptionDeclarationResponse
func (a *AppEncryptionDeclarationsApiService) AppEncryptionDeclarationsGetInstanceExecute(r AppEncryptionDeclarationsApiAppEncryptionDeclarationsGetInstanceRequest) (*AppEncryptionDeclarationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppEncryptionDeclarationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppEncryptionDeclarationsApiService.AppEncryptionDeclarationsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appEncryptionDeclarations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppEncryptionDeclarations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEncryptionDeclarations]", r.fieldsAppEncryptionDeclarations, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsAppEncryptionDeclarationDocuments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEncryptionDeclarationDocuments]", r.fieldsAppEncryptionDeclarationDocuments, "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	if r.limitBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[builds]", r.limitBuilds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
