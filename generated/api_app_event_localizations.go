/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AppEventLocalizationsApiService AppEventLocalizationsApi service
type AppEventLocalizationsApiService service

type AppEventLocalizationsApiAppEventLocalizationsAppEventScreenshotsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *AppEventLocalizationsApiService
	id string
	fieldsAppEventScreenshots *[]string
	fieldsAppEventLocalizations *[]string
	limit *int32
	include *[]string
}

// the fields to include for returned resources of type appEventScreenshots
func (r AppEventLocalizationsApiAppEventLocalizationsAppEventScreenshotsGetToManyRelatedRequest) FieldsAppEventScreenshots(fieldsAppEventScreenshots []string) AppEventLocalizationsApiAppEventLocalizationsAppEventScreenshotsGetToManyRelatedRequest {
	r.fieldsAppEventScreenshots = &fieldsAppEventScreenshots
	return r
}

// the fields to include for returned resources of type appEventLocalizations
func (r AppEventLocalizationsApiAppEventLocalizationsAppEventScreenshotsGetToManyRelatedRequest) FieldsAppEventLocalizations(fieldsAppEventLocalizations []string) AppEventLocalizationsApiAppEventLocalizationsAppEventScreenshotsGetToManyRelatedRequest {
	r.fieldsAppEventLocalizations = &fieldsAppEventLocalizations
	return r
}

// maximum resources per page
func (r AppEventLocalizationsApiAppEventLocalizationsAppEventScreenshotsGetToManyRelatedRequest) Limit(limit int32) AppEventLocalizationsApiAppEventLocalizationsAppEventScreenshotsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r AppEventLocalizationsApiAppEventLocalizationsAppEventScreenshotsGetToManyRelatedRequest) Include(include []string) AppEventLocalizationsApiAppEventLocalizationsAppEventScreenshotsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r AppEventLocalizationsApiAppEventLocalizationsAppEventScreenshotsGetToManyRelatedRequest) Execute() (*AppEventScreenshotsResponse, *http.Response, error) {
	return r.ApiService.AppEventLocalizationsAppEventScreenshotsGetToManyRelatedExecute(r)
}

/*
AppEventLocalizationsAppEventScreenshotsGetToManyRelated Method for AppEventLocalizationsAppEventScreenshotsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppEventLocalizationsApiAppEventLocalizationsAppEventScreenshotsGetToManyRelatedRequest
*/
func (a *AppEventLocalizationsApiService) AppEventLocalizationsAppEventScreenshotsGetToManyRelated(ctx context.Context, id string) AppEventLocalizationsApiAppEventLocalizationsAppEventScreenshotsGetToManyRelatedRequest {
	return AppEventLocalizationsApiAppEventLocalizationsAppEventScreenshotsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppEventScreenshotsResponse
func (a *AppEventLocalizationsApiService) AppEventLocalizationsAppEventScreenshotsGetToManyRelatedExecute(r AppEventLocalizationsApiAppEventLocalizationsAppEventScreenshotsGetToManyRelatedRequest) (*AppEventScreenshotsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppEventScreenshotsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppEventLocalizationsApiService.AppEventLocalizationsAppEventScreenshotsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appEventLocalizations/{id}/appEventScreenshots"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppEventScreenshots != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEventScreenshots]", r.fieldsAppEventScreenshots, "csv")
	}
	if r.fieldsAppEventLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEventLocalizations]", r.fieldsAppEventLocalizations, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppEventLocalizationsApiAppEventLocalizationsAppEventVideoClipsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *AppEventLocalizationsApiService
	id string
	fieldsAppEventVideoClips *[]string
	fieldsAppEventLocalizations *[]string
	limit *int32
	include *[]string
}

// the fields to include for returned resources of type appEventVideoClips
func (r AppEventLocalizationsApiAppEventLocalizationsAppEventVideoClipsGetToManyRelatedRequest) FieldsAppEventVideoClips(fieldsAppEventVideoClips []string) AppEventLocalizationsApiAppEventLocalizationsAppEventVideoClipsGetToManyRelatedRequest {
	r.fieldsAppEventVideoClips = &fieldsAppEventVideoClips
	return r
}

// the fields to include for returned resources of type appEventLocalizations
func (r AppEventLocalizationsApiAppEventLocalizationsAppEventVideoClipsGetToManyRelatedRequest) FieldsAppEventLocalizations(fieldsAppEventLocalizations []string) AppEventLocalizationsApiAppEventLocalizationsAppEventVideoClipsGetToManyRelatedRequest {
	r.fieldsAppEventLocalizations = &fieldsAppEventLocalizations
	return r
}

// maximum resources per page
func (r AppEventLocalizationsApiAppEventLocalizationsAppEventVideoClipsGetToManyRelatedRequest) Limit(limit int32) AppEventLocalizationsApiAppEventLocalizationsAppEventVideoClipsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r AppEventLocalizationsApiAppEventLocalizationsAppEventVideoClipsGetToManyRelatedRequest) Include(include []string) AppEventLocalizationsApiAppEventLocalizationsAppEventVideoClipsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r AppEventLocalizationsApiAppEventLocalizationsAppEventVideoClipsGetToManyRelatedRequest) Execute() (*AppEventVideoClipsResponse, *http.Response, error) {
	return r.ApiService.AppEventLocalizationsAppEventVideoClipsGetToManyRelatedExecute(r)
}

/*
AppEventLocalizationsAppEventVideoClipsGetToManyRelated Method for AppEventLocalizationsAppEventVideoClipsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppEventLocalizationsApiAppEventLocalizationsAppEventVideoClipsGetToManyRelatedRequest
*/
func (a *AppEventLocalizationsApiService) AppEventLocalizationsAppEventVideoClipsGetToManyRelated(ctx context.Context, id string) AppEventLocalizationsApiAppEventLocalizationsAppEventVideoClipsGetToManyRelatedRequest {
	return AppEventLocalizationsApiAppEventLocalizationsAppEventVideoClipsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppEventVideoClipsResponse
func (a *AppEventLocalizationsApiService) AppEventLocalizationsAppEventVideoClipsGetToManyRelatedExecute(r AppEventLocalizationsApiAppEventLocalizationsAppEventVideoClipsGetToManyRelatedRequest) (*AppEventVideoClipsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppEventVideoClipsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppEventLocalizationsApiService.AppEventLocalizationsAppEventVideoClipsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appEventLocalizations/{id}/appEventVideoClips"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppEventVideoClips != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEventVideoClips]", r.fieldsAppEventVideoClips, "csv")
	}
	if r.fieldsAppEventLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEventLocalizations]", r.fieldsAppEventLocalizations, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppEventLocalizationsApiAppEventLocalizationsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *AppEventLocalizationsApiService
	appEventLocalizationCreateRequest *AppEventLocalizationCreateRequest
}

// AppEventLocalization representation
func (r AppEventLocalizationsApiAppEventLocalizationsCreateInstanceRequest) AppEventLocalizationCreateRequest(appEventLocalizationCreateRequest AppEventLocalizationCreateRequest) AppEventLocalizationsApiAppEventLocalizationsCreateInstanceRequest {
	r.appEventLocalizationCreateRequest = &appEventLocalizationCreateRequest
	return r
}

func (r AppEventLocalizationsApiAppEventLocalizationsCreateInstanceRequest) Execute() (*AppEventLocalizationResponse, *http.Response, error) {
	return r.ApiService.AppEventLocalizationsCreateInstanceExecute(r)
}

/*
AppEventLocalizationsCreateInstance Method for AppEventLocalizationsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AppEventLocalizationsApiAppEventLocalizationsCreateInstanceRequest
*/
func (a *AppEventLocalizationsApiService) AppEventLocalizationsCreateInstance(ctx context.Context) AppEventLocalizationsApiAppEventLocalizationsCreateInstanceRequest {
	return AppEventLocalizationsApiAppEventLocalizationsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppEventLocalizationResponse
func (a *AppEventLocalizationsApiService) AppEventLocalizationsCreateInstanceExecute(r AppEventLocalizationsApiAppEventLocalizationsCreateInstanceRequest) (*AppEventLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppEventLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppEventLocalizationsApiService.AppEventLocalizationsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appEventLocalizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appEventLocalizationCreateRequest == nil {
		return localVarReturnValue, nil, reportError("appEventLocalizationCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appEventLocalizationCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppEventLocalizationsApiAppEventLocalizationsDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *AppEventLocalizationsApiService
	id string
}

func (r AppEventLocalizationsApiAppEventLocalizationsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppEventLocalizationsDeleteInstanceExecute(r)
}

/*
AppEventLocalizationsDeleteInstance Method for AppEventLocalizationsDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppEventLocalizationsApiAppEventLocalizationsDeleteInstanceRequest
*/
func (a *AppEventLocalizationsApiService) AppEventLocalizationsDeleteInstance(ctx context.Context, id string) AppEventLocalizationsApiAppEventLocalizationsDeleteInstanceRequest {
	return AppEventLocalizationsApiAppEventLocalizationsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AppEventLocalizationsApiService) AppEventLocalizationsDeleteInstanceExecute(r AppEventLocalizationsApiAppEventLocalizationsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppEventLocalizationsApiService.AppEventLocalizationsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appEventLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AppEventLocalizationsApiAppEventLocalizationsGetInstanceRequest struct {
	ctx context.Context
	ApiService *AppEventLocalizationsApiService
	id string
	fieldsAppEventLocalizations *[]string
	include *[]string
	fieldsAppEventScreenshots *[]string
	fieldsAppEventVideoClips *[]string
	limitAppEventScreenshots *int32
	limitAppEventVideoClips *int32
}

// the fields to include for returned resources of type appEventLocalizations
func (r AppEventLocalizationsApiAppEventLocalizationsGetInstanceRequest) FieldsAppEventLocalizations(fieldsAppEventLocalizations []string) AppEventLocalizationsApiAppEventLocalizationsGetInstanceRequest {
	r.fieldsAppEventLocalizations = &fieldsAppEventLocalizations
	return r
}

// comma-separated list of relationships to include
func (r AppEventLocalizationsApiAppEventLocalizationsGetInstanceRequest) Include(include []string) AppEventLocalizationsApiAppEventLocalizationsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type appEventScreenshots
func (r AppEventLocalizationsApiAppEventLocalizationsGetInstanceRequest) FieldsAppEventScreenshots(fieldsAppEventScreenshots []string) AppEventLocalizationsApiAppEventLocalizationsGetInstanceRequest {
	r.fieldsAppEventScreenshots = &fieldsAppEventScreenshots
	return r
}

// the fields to include for returned resources of type appEventVideoClips
func (r AppEventLocalizationsApiAppEventLocalizationsGetInstanceRequest) FieldsAppEventVideoClips(fieldsAppEventVideoClips []string) AppEventLocalizationsApiAppEventLocalizationsGetInstanceRequest {
	r.fieldsAppEventVideoClips = &fieldsAppEventVideoClips
	return r
}

// maximum number of related appEventScreenshots returned (when they are included)
func (r AppEventLocalizationsApiAppEventLocalizationsGetInstanceRequest) LimitAppEventScreenshots(limitAppEventScreenshots int32) AppEventLocalizationsApiAppEventLocalizationsGetInstanceRequest {
	r.limitAppEventScreenshots = &limitAppEventScreenshots
	return r
}

// maximum number of related appEventVideoClips returned (when they are included)
func (r AppEventLocalizationsApiAppEventLocalizationsGetInstanceRequest) LimitAppEventVideoClips(limitAppEventVideoClips int32) AppEventLocalizationsApiAppEventLocalizationsGetInstanceRequest {
	r.limitAppEventVideoClips = &limitAppEventVideoClips
	return r
}

func (r AppEventLocalizationsApiAppEventLocalizationsGetInstanceRequest) Execute() (*AppEventLocalizationResponse, *http.Response, error) {
	return r.ApiService.AppEventLocalizationsGetInstanceExecute(r)
}

/*
AppEventLocalizationsGetInstance Method for AppEventLocalizationsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppEventLocalizationsApiAppEventLocalizationsGetInstanceRequest
*/
func (a *AppEventLocalizationsApiService) AppEventLocalizationsGetInstance(ctx context.Context, id string) AppEventLocalizationsApiAppEventLocalizationsGetInstanceRequest {
	return AppEventLocalizationsApiAppEventLocalizationsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppEventLocalizationResponse
func (a *AppEventLocalizationsApiService) AppEventLocalizationsGetInstanceExecute(r AppEventLocalizationsApiAppEventLocalizationsGetInstanceRequest) (*AppEventLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppEventLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppEventLocalizationsApiService.AppEventLocalizationsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appEventLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppEventLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEventLocalizations]", r.fieldsAppEventLocalizations, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsAppEventScreenshots != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEventScreenshots]", r.fieldsAppEventScreenshots, "csv")
	}
	if r.fieldsAppEventVideoClips != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEventVideoClips]", r.fieldsAppEventVideoClips, "csv")
	}
	if r.limitAppEventScreenshots != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appEventScreenshots]", r.limitAppEventScreenshots, "")
	}
	if r.limitAppEventVideoClips != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appEventVideoClips]", r.limitAppEventVideoClips, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppEventLocalizationsApiAppEventLocalizationsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *AppEventLocalizationsApiService
	id string
	appEventLocalizationUpdateRequest *AppEventLocalizationUpdateRequest
}

// AppEventLocalization representation
func (r AppEventLocalizationsApiAppEventLocalizationsUpdateInstanceRequest) AppEventLocalizationUpdateRequest(appEventLocalizationUpdateRequest AppEventLocalizationUpdateRequest) AppEventLocalizationsApiAppEventLocalizationsUpdateInstanceRequest {
	r.appEventLocalizationUpdateRequest = &appEventLocalizationUpdateRequest
	return r
}

func (r AppEventLocalizationsApiAppEventLocalizationsUpdateInstanceRequest) Execute() (*AppEventLocalizationResponse, *http.Response, error) {
	return r.ApiService.AppEventLocalizationsUpdateInstanceExecute(r)
}

/*
AppEventLocalizationsUpdateInstance Method for AppEventLocalizationsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppEventLocalizationsApiAppEventLocalizationsUpdateInstanceRequest
*/
func (a *AppEventLocalizationsApiService) AppEventLocalizationsUpdateInstance(ctx context.Context, id string) AppEventLocalizationsApiAppEventLocalizationsUpdateInstanceRequest {
	return AppEventLocalizationsApiAppEventLocalizationsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppEventLocalizationResponse
func (a *AppEventLocalizationsApiService) AppEventLocalizationsUpdateInstanceExecute(r AppEventLocalizationsApiAppEventLocalizationsUpdateInstanceRequest) (*AppEventLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppEventLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppEventLocalizationsApiService.AppEventLocalizationsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appEventLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appEventLocalizationUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("appEventLocalizationUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appEventLocalizationUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
