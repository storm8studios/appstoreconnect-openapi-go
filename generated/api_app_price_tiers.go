/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AppPriceTiersApiService AppPriceTiersApi service
type AppPriceTiersApiService service

type AppPriceTiersApiAppPriceTiersGetCollectionRequest struct {
	ctx context.Context
	ApiService *AppPriceTiersApiService
	filterId *[]string
	fieldsAppPriceTiers *[]string
	limit *int32
	include *[]string
	fieldsAppPricePoints *[]string
	limitPricePoints *int32
}

// filter by id(s)
func (r AppPriceTiersApiAppPriceTiersGetCollectionRequest) FilterId(filterId []string) AppPriceTiersApiAppPriceTiersGetCollectionRequest {
	r.filterId = &filterId
	return r
}

// the fields to include for returned resources of type appPriceTiers
func (r AppPriceTiersApiAppPriceTiersGetCollectionRequest) FieldsAppPriceTiers(fieldsAppPriceTiers []string) AppPriceTiersApiAppPriceTiersGetCollectionRequest {
	r.fieldsAppPriceTiers = &fieldsAppPriceTiers
	return r
}

// maximum resources per page
func (r AppPriceTiersApiAppPriceTiersGetCollectionRequest) Limit(limit int32) AppPriceTiersApiAppPriceTiersGetCollectionRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r AppPriceTiersApiAppPriceTiersGetCollectionRequest) Include(include []string) AppPriceTiersApiAppPriceTiersGetCollectionRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type appPricePoints
// Deprecated
func (r AppPriceTiersApiAppPriceTiersGetCollectionRequest) FieldsAppPricePoints(fieldsAppPricePoints []string) AppPriceTiersApiAppPriceTiersGetCollectionRequest {
	r.fieldsAppPricePoints = &fieldsAppPricePoints
	return r
}

// maximum number of related pricePoints returned (when they are included)
// Deprecated
func (r AppPriceTiersApiAppPriceTiersGetCollectionRequest) LimitPricePoints(limitPricePoints int32) AppPriceTiersApiAppPriceTiersGetCollectionRequest {
	r.limitPricePoints = &limitPricePoints
	return r
}

func (r AppPriceTiersApiAppPriceTiersGetCollectionRequest) Execute() (*AppPriceTiersResponse, *http.Response, error) {
	return r.ApiService.AppPriceTiersGetCollectionExecute(r)
}

/*
AppPriceTiersGetCollection Method for AppPriceTiersGetCollection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AppPriceTiersApiAppPriceTiersGetCollectionRequest

Deprecated
*/
func (a *AppPriceTiersApiService) AppPriceTiersGetCollection(ctx context.Context) AppPriceTiersApiAppPriceTiersGetCollectionRequest {
	return AppPriceTiersApiAppPriceTiersGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppPriceTiersResponse
// Deprecated
func (a *AppPriceTiersApiService) AppPriceTiersGetCollectionExecute(r AppPriceTiersApiAppPriceTiersGetCollectionRequest) (*AppPriceTiersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppPriceTiersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppPriceTiersApiService.AppPriceTiersGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appPriceTiers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[id]", r.filterId, "csv")
	}
	if r.fieldsAppPriceTiers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appPriceTiers]", r.fieldsAppPriceTiers, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsAppPricePoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appPricePoints]", r.fieldsAppPricePoints, "csv")
	}
	if r.limitPricePoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[pricePoints]", r.limitPricePoints, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppPriceTiersApiAppPriceTiersGetInstanceRequest struct {
	ctx context.Context
	ApiService *AppPriceTiersApiService
	id string
	fieldsAppPriceTiers *[]string
	include *[]string
	fieldsAppPricePoints *[]string
	limitPricePoints *int32
}

// the fields to include for returned resources of type appPriceTiers
func (r AppPriceTiersApiAppPriceTiersGetInstanceRequest) FieldsAppPriceTiers(fieldsAppPriceTiers []string) AppPriceTiersApiAppPriceTiersGetInstanceRequest {
	r.fieldsAppPriceTiers = &fieldsAppPriceTiers
	return r
}

// comma-separated list of relationships to include
func (r AppPriceTiersApiAppPriceTiersGetInstanceRequest) Include(include []string) AppPriceTiersApiAppPriceTiersGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type appPricePoints
// Deprecated
func (r AppPriceTiersApiAppPriceTiersGetInstanceRequest) FieldsAppPricePoints(fieldsAppPricePoints []string) AppPriceTiersApiAppPriceTiersGetInstanceRequest {
	r.fieldsAppPricePoints = &fieldsAppPricePoints
	return r
}

// maximum number of related pricePoints returned (when they are included)
// Deprecated
func (r AppPriceTiersApiAppPriceTiersGetInstanceRequest) LimitPricePoints(limitPricePoints int32) AppPriceTiersApiAppPriceTiersGetInstanceRequest {
	r.limitPricePoints = &limitPricePoints
	return r
}

func (r AppPriceTiersApiAppPriceTiersGetInstanceRequest) Execute() (*AppPriceTierResponse, *http.Response, error) {
	return r.ApiService.AppPriceTiersGetInstanceExecute(r)
}

/*
AppPriceTiersGetInstance Method for AppPriceTiersGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppPriceTiersApiAppPriceTiersGetInstanceRequest

Deprecated
*/
func (a *AppPriceTiersApiService) AppPriceTiersGetInstance(ctx context.Context, id string) AppPriceTiersApiAppPriceTiersGetInstanceRequest {
	return AppPriceTiersApiAppPriceTiersGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppPriceTierResponse
// Deprecated
func (a *AppPriceTiersApiService) AppPriceTiersGetInstanceExecute(r AppPriceTiersApiAppPriceTiersGetInstanceRequest) (*AppPriceTierResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppPriceTierResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppPriceTiersApiService.AppPriceTiersGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appPriceTiers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppPriceTiers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appPriceTiers]", r.fieldsAppPriceTiers, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsAppPricePoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appPricePoints]", r.fieldsAppPricePoints, "csv")
	}
	if r.limitPricePoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[pricePoints]", r.limitPricePoints, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppPriceTiersApiAppPriceTiersPricePointsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *AppPriceTiersApiService
	id string
	filterTerritory *[]string
	fieldsAppPriceTiers *[]string
	fieldsAppPricePoints *[]string
	fieldsTerritories *[]string
	limit *int32
	include *[]string
}

// filter by id(s) of related &#39;territory&#39;
func (r AppPriceTiersApiAppPriceTiersPricePointsGetToManyRelatedRequest) FilterTerritory(filterTerritory []string) AppPriceTiersApiAppPriceTiersPricePointsGetToManyRelatedRequest {
	r.filterTerritory = &filterTerritory
	return r
}

// the fields to include for returned resources of type appPriceTiers
func (r AppPriceTiersApiAppPriceTiersPricePointsGetToManyRelatedRequest) FieldsAppPriceTiers(fieldsAppPriceTiers []string) AppPriceTiersApiAppPriceTiersPricePointsGetToManyRelatedRequest {
	r.fieldsAppPriceTiers = &fieldsAppPriceTiers
	return r
}

// the fields to include for returned resources of type appPricePoints
func (r AppPriceTiersApiAppPriceTiersPricePointsGetToManyRelatedRequest) FieldsAppPricePoints(fieldsAppPricePoints []string) AppPriceTiersApiAppPriceTiersPricePointsGetToManyRelatedRequest {
	r.fieldsAppPricePoints = &fieldsAppPricePoints
	return r
}

// the fields to include for returned resources of type territories
func (r AppPriceTiersApiAppPriceTiersPricePointsGetToManyRelatedRequest) FieldsTerritories(fieldsTerritories []string) AppPriceTiersApiAppPriceTiersPricePointsGetToManyRelatedRequest {
	r.fieldsTerritories = &fieldsTerritories
	return r
}

// maximum resources per page
func (r AppPriceTiersApiAppPriceTiersPricePointsGetToManyRelatedRequest) Limit(limit int32) AppPriceTiersApiAppPriceTiersPricePointsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r AppPriceTiersApiAppPriceTiersPricePointsGetToManyRelatedRequest) Include(include []string) AppPriceTiersApiAppPriceTiersPricePointsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r AppPriceTiersApiAppPriceTiersPricePointsGetToManyRelatedRequest) Execute() (*AppPricePointsResponse, *http.Response, error) {
	return r.ApiService.AppPriceTiersPricePointsGetToManyRelatedExecute(r)
}

/*
AppPriceTiersPricePointsGetToManyRelated Method for AppPriceTiersPricePointsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppPriceTiersApiAppPriceTiersPricePointsGetToManyRelatedRequest

Deprecated
*/
func (a *AppPriceTiersApiService) AppPriceTiersPricePointsGetToManyRelated(ctx context.Context, id string) AppPriceTiersApiAppPriceTiersPricePointsGetToManyRelatedRequest {
	return AppPriceTiersApiAppPriceTiersPricePointsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppPricePointsResponse
// Deprecated
func (a *AppPriceTiersApiService) AppPriceTiersPricePointsGetToManyRelatedExecute(r AppPriceTiersApiAppPriceTiersPricePointsGetToManyRelatedRequest) (*AppPricePointsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppPricePointsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppPriceTiersApiService.AppPriceTiersPricePointsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appPriceTiers/{id}/pricePoints"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterTerritory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[territory]", r.filterTerritory, "csv")
	}
	if r.fieldsAppPriceTiers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appPriceTiers]", r.fieldsAppPriceTiers, "csv")
	}
	if r.fieldsAppPricePoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appPricePoints]", r.fieldsAppPricePoints, "csv")
	}
	if r.fieldsTerritories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[territories]", r.fieldsTerritories, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
