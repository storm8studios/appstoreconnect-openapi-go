/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AppStoreReviewDetailsApiService AppStoreReviewDetailsApi service
type AppStoreReviewDetailsApiService service

type AppStoreReviewDetailsApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreReviewDetailsApiService
	id string
	fieldsAppStoreReviewDetails *[]string
	fieldsAppStoreReviewAttachments *[]string
	limit *int32
	include *[]string
}

// the fields to include for returned resources of type appStoreReviewDetails
func (r AppStoreReviewDetailsApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest) FieldsAppStoreReviewDetails(fieldsAppStoreReviewDetails []string) AppStoreReviewDetailsApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest {
	r.fieldsAppStoreReviewDetails = &fieldsAppStoreReviewDetails
	return r
}

// the fields to include for returned resources of type appStoreReviewAttachments
func (r AppStoreReviewDetailsApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest) FieldsAppStoreReviewAttachments(fieldsAppStoreReviewAttachments []string) AppStoreReviewDetailsApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest {
	r.fieldsAppStoreReviewAttachments = &fieldsAppStoreReviewAttachments
	return r
}

// maximum resources per page
func (r AppStoreReviewDetailsApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest) Limit(limit int32) AppStoreReviewDetailsApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r AppStoreReviewDetailsApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest) Include(include []string) AppStoreReviewDetailsApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r AppStoreReviewDetailsApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest) Execute() (*AppStoreReviewAttachmentsResponse, *http.Response, error) {
	return r.ApiService.AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedExecute(r)
}

/*
AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated Method for AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreReviewDetailsApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest
*/
func (a *AppStoreReviewDetailsApiService) AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated(ctx context.Context, id string) AppStoreReviewDetailsApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest {
	return AppStoreReviewDetailsApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreReviewAttachmentsResponse
func (a *AppStoreReviewDetailsApiService) AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedExecute(r AppStoreReviewDetailsApiAppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelatedRequest) (*AppStoreReviewAttachmentsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreReviewAttachmentsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreReviewDetailsApiService.AppStoreReviewDetailsAppStoreReviewAttachmentsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreReviewDetails/{id}/appStoreReviewAttachments"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppStoreReviewDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreReviewDetails]", r.fieldsAppStoreReviewDetails, "csv")
	}
	if r.fieldsAppStoreReviewAttachments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreReviewAttachments]", r.fieldsAppStoreReviewAttachments, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreReviewDetailsApiAppStoreReviewDetailsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *AppStoreReviewDetailsApiService
	appStoreReviewDetailCreateRequest *AppStoreReviewDetailCreateRequest
}

// AppStoreReviewDetail representation
func (r AppStoreReviewDetailsApiAppStoreReviewDetailsCreateInstanceRequest) AppStoreReviewDetailCreateRequest(appStoreReviewDetailCreateRequest AppStoreReviewDetailCreateRequest) AppStoreReviewDetailsApiAppStoreReviewDetailsCreateInstanceRequest {
	r.appStoreReviewDetailCreateRequest = &appStoreReviewDetailCreateRequest
	return r
}

func (r AppStoreReviewDetailsApiAppStoreReviewDetailsCreateInstanceRequest) Execute() (*AppStoreReviewDetailResponse, *http.Response, error) {
	return r.ApiService.AppStoreReviewDetailsCreateInstanceExecute(r)
}

/*
AppStoreReviewDetailsCreateInstance Method for AppStoreReviewDetailsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AppStoreReviewDetailsApiAppStoreReviewDetailsCreateInstanceRequest
*/
func (a *AppStoreReviewDetailsApiService) AppStoreReviewDetailsCreateInstance(ctx context.Context) AppStoreReviewDetailsApiAppStoreReviewDetailsCreateInstanceRequest {
	return AppStoreReviewDetailsApiAppStoreReviewDetailsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppStoreReviewDetailResponse
func (a *AppStoreReviewDetailsApiService) AppStoreReviewDetailsCreateInstanceExecute(r AppStoreReviewDetailsApiAppStoreReviewDetailsCreateInstanceRequest) (*AppStoreReviewDetailResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreReviewDetailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreReviewDetailsApiService.AppStoreReviewDetailsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreReviewDetails"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appStoreReviewDetailCreateRequest == nil {
		return localVarReturnValue, nil, reportError("appStoreReviewDetailCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appStoreReviewDetailCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreReviewDetailsApiAppStoreReviewDetailsGetInstanceRequest struct {
	ctx context.Context
	ApiService *AppStoreReviewDetailsApiService
	id string
	fieldsAppStoreReviewDetails *[]string
	include *[]string
	fieldsAppStoreReviewAttachments *[]string
	limitAppStoreReviewAttachments *int32
}

// the fields to include for returned resources of type appStoreReviewDetails
func (r AppStoreReviewDetailsApiAppStoreReviewDetailsGetInstanceRequest) FieldsAppStoreReviewDetails(fieldsAppStoreReviewDetails []string) AppStoreReviewDetailsApiAppStoreReviewDetailsGetInstanceRequest {
	r.fieldsAppStoreReviewDetails = &fieldsAppStoreReviewDetails
	return r
}

// comma-separated list of relationships to include
func (r AppStoreReviewDetailsApiAppStoreReviewDetailsGetInstanceRequest) Include(include []string) AppStoreReviewDetailsApiAppStoreReviewDetailsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type appStoreReviewAttachments
func (r AppStoreReviewDetailsApiAppStoreReviewDetailsGetInstanceRequest) FieldsAppStoreReviewAttachments(fieldsAppStoreReviewAttachments []string) AppStoreReviewDetailsApiAppStoreReviewDetailsGetInstanceRequest {
	r.fieldsAppStoreReviewAttachments = &fieldsAppStoreReviewAttachments
	return r
}

// maximum number of related appStoreReviewAttachments returned (when they are included)
func (r AppStoreReviewDetailsApiAppStoreReviewDetailsGetInstanceRequest) LimitAppStoreReviewAttachments(limitAppStoreReviewAttachments int32) AppStoreReviewDetailsApiAppStoreReviewDetailsGetInstanceRequest {
	r.limitAppStoreReviewAttachments = &limitAppStoreReviewAttachments
	return r
}

func (r AppStoreReviewDetailsApiAppStoreReviewDetailsGetInstanceRequest) Execute() (*AppStoreReviewDetailResponse, *http.Response, error) {
	return r.ApiService.AppStoreReviewDetailsGetInstanceExecute(r)
}

/*
AppStoreReviewDetailsGetInstance Method for AppStoreReviewDetailsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreReviewDetailsApiAppStoreReviewDetailsGetInstanceRequest
*/
func (a *AppStoreReviewDetailsApiService) AppStoreReviewDetailsGetInstance(ctx context.Context, id string) AppStoreReviewDetailsApiAppStoreReviewDetailsGetInstanceRequest {
	return AppStoreReviewDetailsApiAppStoreReviewDetailsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreReviewDetailResponse
func (a *AppStoreReviewDetailsApiService) AppStoreReviewDetailsGetInstanceExecute(r AppStoreReviewDetailsApiAppStoreReviewDetailsGetInstanceRequest) (*AppStoreReviewDetailResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreReviewDetailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreReviewDetailsApiService.AppStoreReviewDetailsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreReviewDetails/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppStoreReviewDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreReviewDetails]", r.fieldsAppStoreReviewDetails, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsAppStoreReviewAttachments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreReviewAttachments]", r.fieldsAppStoreReviewAttachments, "csv")
	}
	if r.limitAppStoreReviewAttachments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreReviewAttachments]", r.limitAppStoreReviewAttachments, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreReviewDetailsApiAppStoreReviewDetailsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *AppStoreReviewDetailsApiService
	id string
	appStoreReviewDetailUpdateRequest *AppStoreReviewDetailUpdateRequest
}

// AppStoreReviewDetail representation
func (r AppStoreReviewDetailsApiAppStoreReviewDetailsUpdateInstanceRequest) AppStoreReviewDetailUpdateRequest(appStoreReviewDetailUpdateRequest AppStoreReviewDetailUpdateRequest) AppStoreReviewDetailsApiAppStoreReviewDetailsUpdateInstanceRequest {
	r.appStoreReviewDetailUpdateRequest = &appStoreReviewDetailUpdateRequest
	return r
}

func (r AppStoreReviewDetailsApiAppStoreReviewDetailsUpdateInstanceRequest) Execute() (*AppStoreReviewDetailResponse, *http.Response, error) {
	return r.ApiService.AppStoreReviewDetailsUpdateInstanceExecute(r)
}

/*
AppStoreReviewDetailsUpdateInstance Method for AppStoreReviewDetailsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreReviewDetailsApiAppStoreReviewDetailsUpdateInstanceRequest
*/
func (a *AppStoreReviewDetailsApiService) AppStoreReviewDetailsUpdateInstance(ctx context.Context, id string) AppStoreReviewDetailsApiAppStoreReviewDetailsUpdateInstanceRequest {
	return AppStoreReviewDetailsApiAppStoreReviewDetailsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreReviewDetailResponse
func (a *AppStoreReviewDetailsApiService) AppStoreReviewDetailsUpdateInstanceExecute(r AppStoreReviewDetailsApiAppStoreReviewDetailsUpdateInstanceRequest) (*AppStoreReviewDetailResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreReviewDetailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreReviewDetailsApiService.AppStoreReviewDetailsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreReviewDetails/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appStoreReviewDetailUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("appStoreReviewDetailUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appStoreReviewDetailUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
