/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AppStoreVersionLocalizationsApiService AppStoreVersionLocalizationsApi service
type AppStoreVersionLocalizationsApiService service

type AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionLocalizationsApiService
	id string
	filterPreviewType *[]string
	filterAppCustomProductPageLocalization *[]string
	filterAppStoreVersionExperimentTreatmentLocalization *[]string
	fieldsAppCustomProductPageLocalizations *[]string
	fieldsAppStoreVersionExperimentTreatmentLocalizations *[]string
	fieldsAppPreviews *[]string
	fieldsAppPreviewSets *[]string
	fieldsAppStoreVersionLocalizations *[]string
	limit *int32
	limitAppPreviews *int32
	include *[]string
}

// filter by attribute &#39;previewType&#39;
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) FilterPreviewType(filterPreviewType []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.filterPreviewType = &filterPreviewType
	return r
}

// filter by id(s) of related &#39;appCustomProductPageLocalization&#39;
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) FilterAppCustomProductPageLocalization(filterAppCustomProductPageLocalization []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.filterAppCustomProductPageLocalization = &filterAppCustomProductPageLocalization
	return r
}

// filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39;
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) FilterAppStoreVersionExperimentTreatmentLocalization(filterAppStoreVersionExperimentTreatmentLocalization []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.filterAppStoreVersionExperimentTreatmentLocalization = &filterAppStoreVersionExperimentTreatmentLocalization
	return r
}

// the fields to include for returned resources of type appCustomProductPageLocalizations
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) FieldsAppCustomProductPageLocalizations(fieldsAppCustomProductPageLocalizations []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.fieldsAppCustomProductPageLocalizations = &fieldsAppCustomProductPageLocalizations
	return r
}

// the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) FieldsAppStoreVersionExperimentTreatmentLocalizations(fieldsAppStoreVersionExperimentTreatmentLocalizations []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionExperimentTreatmentLocalizations = &fieldsAppStoreVersionExperimentTreatmentLocalizations
	return r
}

// the fields to include for returned resources of type appPreviews
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) FieldsAppPreviews(fieldsAppPreviews []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.fieldsAppPreviews = &fieldsAppPreviews
	return r
}

// the fields to include for returned resources of type appPreviewSets
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) FieldsAppPreviewSets(fieldsAppPreviewSets []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.fieldsAppPreviewSets = &fieldsAppPreviewSets
	return r
}

// the fields to include for returned resources of type appStoreVersionLocalizations
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) FieldsAppStoreVersionLocalizations(fieldsAppStoreVersionLocalizations []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionLocalizations = &fieldsAppStoreVersionLocalizations
	return r
}

// maximum resources per page
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) Limit(limit int32) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// maximum number of related appPreviews returned (when they are included)
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) LimitAppPreviews(limitAppPreviews int32) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.limitAppPreviews = &limitAppPreviews
	return r
}

// comma-separated list of relationships to include
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) Include(include []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) Execute() (*AppPreviewSetsResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedExecute(r)
}

/*
AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated Method for AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest
*/
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated(ctx context.Context, id string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	return AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppPreviewSetsResponse
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedExecute(r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppPreviewSetsGetToManyRelatedRequest) (*AppPreviewSetsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppPreviewSetsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionLocalizationsApiService.AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersionLocalizations/{id}/appPreviewSets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterPreviewType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[previewType]", r.filterPreviewType, "csv")
	}
	if r.filterAppCustomProductPageLocalization != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[appCustomProductPageLocalization]", r.filterAppCustomProductPageLocalization, "csv")
	}
	if r.filterAppStoreVersionExperimentTreatmentLocalization != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[appStoreVersionExperimentTreatmentLocalization]", r.filterAppStoreVersionExperimentTreatmentLocalization, "csv")
	}
	if r.fieldsAppCustomProductPageLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appCustomProductPageLocalizations]", r.fieldsAppCustomProductPageLocalizations, "csv")
	}
	if r.fieldsAppStoreVersionExperimentTreatmentLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperimentTreatmentLocalizations]", r.fieldsAppStoreVersionExperimentTreatmentLocalizations, "csv")
	}
	if r.fieldsAppPreviews != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appPreviews]", r.fieldsAppPreviews, "csv")
	}
	if r.fieldsAppPreviewSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appPreviewSets]", r.fieldsAppPreviewSets, "csv")
	}
	if r.fieldsAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionLocalizations]", r.fieldsAppStoreVersionLocalizations, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.limitAppPreviews != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appPreviews]", r.limitAppPreviews, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionLocalizationsApiService
	id string
	filterScreenshotDisplayType *[]string
	filterAppCustomProductPageLocalization *[]string
	filterAppStoreVersionExperimentTreatmentLocalization *[]string
	fieldsAppScreenshotSets *[]string
	fieldsAppCustomProductPageLocalizations *[]string
	fieldsAppStoreVersionExperimentTreatmentLocalizations *[]string
	fieldsAppScreenshots *[]string
	fieldsAppStoreVersionLocalizations *[]string
	limit *int32
	limitAppScreenshots *int32
	include *[]string
}

// filter by attribute &#39;screenshotDisplayType&#39;
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FilterScreenshotDisplayType(filterScreenshotDisplayType []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.filterScreenshotDisplayType = &filterScreenshotDisplayType
	return r
}

// filter by id(s) of related &#39;appCustomProductPageLocalization&#39;
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FilterAppCustomProductPageLocalization(filterAppCustomProductPageLocalization []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.filterAppCustomProductPageLocalization = &filterAppCustomProductPageLocalization
	return r
}

// filter by id(s) of related &#39;appStoreVersionExperimentTreatmentLocalization&#39;
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FilterAppStoreVersionExperimentTreatmentLocalization(filterAppStoreVersionExperimentTreatmentLocalization []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.filterAppStoreVersionExperimentTreatmentLocalization = &filterAppStoreVersionExperimentTreatmentLocalization
	return r
}

// the fields to include for returned resources of type appScreenshotSets
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FieldsAppScreenshotSets(fieldsAppScreenshotSets []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.fieldsAppScreenshotSets = &fieldsAppScreenshotSets
	return r
}

// the fields to include for returned resources of type appCustomProductPageLocalizations
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FieldsAppCustomProductPageLocalizations(fieldsAppCustomProductPageLocalizations []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.fieldsAppCustomProductPageLocalizations = &fieldsAppCustomProductPageLocalizations
	return r
}

// the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FieldsAppStoreVersionExperimentTreatmentLocalizations(fieldsAppStoreVersionExperimentTreatmentLocalizations []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionExperimentTreatmentLocalizations = &fieldsAppStoreVersionExperimentTreatmentLocalizations
	return r
}

// the fields to include for returned resources of type appScreenshots
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FieldsAppScreenshots(fieldsAppScreenshots []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.fieldsAppScreenshots = &fieldsAppScreenshots
	return r
}

// the fields to include for returned resources of type appStoreVersionLocalizations
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FieldsAppStoreVersionLocalizations(fieldsAppStoreVersionLocalizations []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionLocalizations = &fieldsAppStoreVersionLocalizations
	return r
}

// maximum resources per page
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) Limit(limit int32) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// maximum number of related appScreenshots returned (when they are included)
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) LimitAppScreenshots(limitAppScreenshots int32) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.limitAppScreenshots = &limitAppScreenshots
	return r
}

// comma-separated list of relationships to include
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) Include(include []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) Execute() (*AppScreenshotSetsResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedExecute(r)
}

/*
AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated Method for AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest
*/
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated(ctx context.Context, id string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	return AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppScreenshotSetsResponse
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedExecute(r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelatedRequest) (*AppScreenshotSetsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppScreenshotSetsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionLocalizationsApiService.AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersionLocalizations/{id}/appScreenshotSets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterScreenshotDisplayType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[screenshotDisplayType]", r.filterScreenshotDisplayType, "csv")
	}
	if r.filterAppCustomProductPageLocalization != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[appCustomProductPageLocalization]", r.filterAppCustomProductPageLocalization, "csv")
	}
	if r.filterAppStoreVersionExperimentTreatmentLocalization != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[appStoreVersionExperimentTreatmentLocalization]", r.filterAppStoreVersionExperimentTreatmentLocalization, "csv")
	}
	if r.fieldsAppScreenshotSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appScreenshotSets]", r.fieldsAppScreenshotSets, "csv")
	}
	if r.fieldsAppCustomProductPageLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appCustomProductPageLocalizations]", r.fieldsAppCustomProductPageLocalizations, "csv")
	}
	if r.fieldsAppStoreVersionExperimentTreatmentLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperimentTreatmentLocalizations]", r.fieldsAppStoreVersionExperimentTreatmentLocalizations, "csv")
	}
	if r.fieldsAppScreenshots != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appScreenshots]", r.fieldsAppScreenshots, "csv")
	}
	if r.fieldsAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionLocalizations]", r.fieldsAppStoreVersionLocalizations, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.limitAppScreenshots != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appScreenshots]", r.limitAppScreenshots, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionLocalizationsApiService
	appStoreVersionLocalizationCreateRequest *AppStoreVersionLocalizationCreateRequest
}

// AppStoreVersionLocalization representation
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsCreateInstanceRequest) AppStoreVersionLocalizationCreateRequest(appStoreVersionLocalizationCreateRequest AppStoreVersionLocalizationCreateRequest) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsCreateInstanceRequest {
	r.appStoreVersionLocalizationCreateRequest = &appStoreVersionLocalizationCreateRequest
	return r
}

func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsCreateInstanceRequest) Execute() (*AppStoreVersionLocalizationResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionLocalizationsCreateInstanceExecute(r)
}

/*
AppStoreVersionLocalizationsCreateInstance Method for AppStoreVersionLocalizationsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsCreateInstanceRequest
*/
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsCreateInstance(ctx context.Context) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsCreateInstanceRequest {
	return AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppStoreVersionLocalizationResponse
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsCreateInstanceExecute(r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsCreateInstanceRequest) (*AppStoreVersionLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionLocalizationsApiService.AppStoreVersionLocalizationsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersionLocalizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appStoreVersionLocalizationCreateRequest == nil {
		return localVarReturnValue, nil, reportError("appStoreVersionLocalizationCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appStoreVersionLocalizationCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionLocalizationsApiService
	id string
}

func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppStoreVersionLocalizationsDeleteInstanceExecute(r)
}

/*
AppStoreVersionLocalizationsDeleteInstance Method for AppStoreVersionLocalizationsDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsDeleteInstanceRequest
*/
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsDeleteInstance(ctx context.Context, id string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsDeleteInstanceRequest {
	return AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsDeleteInstanceExecute(r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionLocalizationsApiService.AppStoreVersionLocalizationsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersionLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsGetInstanceRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionLocalizationsApiService
	id string
	fieldsAppStoreVersionLocalizations *[]string
	include *[]string
	fieldsAppScreenshotSets *[]string
	fieldsAppPreviewSets *[]string
	limitAppPreviewSets *int32
	limitAppScreenshotSets *int32
}

// the fields to include for returned resources of type appStoreVersionLocalizations
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsGetInstanceRequest) FieldsAppStoreVersionLocalizations(fieldsAppStoreVersionLocalizations []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsGetInstanceRequest {
	r.fieldsAppStoreVersionLocalizations = &fieldsAppStoreVersionLocalizations
	return r
}

// comma-separated list of relationships to include
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsGetInstanceRequest) Include(include []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type appScreenshotSets
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsGetInstanceRequest) FieldsAppScreenshotSets(fieldsAppScreenshotSets []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsGetInstanceRequest {
	r.fieldsAppScreenshotSets = &fieldsAppScreenshotSets
	return r
}

// the fields to include for returned resources of type appPreviewSets
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsGetInstanceRequest) FieldsAppPreviewSets(fieldsAppPreviewSets []string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsGetInstanceRequest {
	r.fieldsAppPreviewSets = &fieldsAppPreviewSets
	return r
}

// maximum number of related appPreviewSets returned (when they are included)
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsGetInstanceRequest) LimitAppPreviewSets(limitAppPreviewSets int32) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsGetInstanceRequest {
	r.limitAppPreviewSets = &limitAppPreviewSets
	return r
}

// maximum number of related appScreenshotSets returned (when they are included)
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsGetInstanceRequest) LimitAppScreenshotSets(limitAppScreenshotSets int32) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsGetInstanceRequest {
	r.limitAppScreenshotSets = &limitAppScreenshotSets
	return r
}

func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsGetInstanceRequest) Execute() (*AppStoreVersionLocalizationResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionLocalizationsGetInstanceExecute(r)
}

/*
AppStoreVersionLocalizationsGetInstance Method for AppStoreVersionLocalizationsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsGetInstanceRequest
*/
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsGetInstance(ctx context.Context, id string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsGetInstanceRequest {
	return AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionLocalizationResponse
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsGetInstanceExecute(r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsGetInstanceRequest) (*AppStoreVersionLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionLocalizationsApiService.AppStoreVersionLocalizationsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersionLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionLocalizations]", r.fieldsAppStoreVersionLocalizations, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsAppScreenshotSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appScreenshotSets]", r.fieldsAppScreenshotSets, "csv")
	}
	if r.fieldsAppPreviewSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appPreviewSets]", r.fieldsAppPreviewSets, "csv")
	}
	if r.limitAppPreviewSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appPreviewSets]", r.limitAppPreviewSets, "")
	}
	if r.limitAppScreenshotSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appScreenshotSets]", r.limitAppScreenshotSets, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionLocalizationsApiService
	id string
	appStoreVersionLocalizationUpdateRequest *AppStoreVersionLocalizationUpdateRequest
}

// AppStoreVersionLocalization representation
func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsUpdateInstanceRequest) AppStoreVersionLocalizationUpdateRequest(appStoreVersionLocalizationUpdateRequest AppStoreVersionLocalizationUpdateRequest) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsUpdateInstanceRequest {
	r.appStoreVersionLocalizationUpdateRequest = &appStoreVersionLocalizationUpdateRequest
	return r
}

func (r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsUpdateInstanceRequest) Execute() (*AppStoreVersionLocalizationResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionLocalizationsUpdateInstanceExecute(r)
}

/*
AppStoreVersionLocalizationsUpdateInstance Method for AppStoreVersionLocalizationsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsUpdateInstanceRequest
*/
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsUpdateInstance(ctx context.Context, id string) AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsUpdateInstanceRequest {
	return AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionLocalizationResponse
func (a *AppStoreVersionLocalizationsApiService) AppStoreVersionLocalizationsUpdateInstanceExecute(r AppStoreVersionLocalizationsApiAppStoreVersionLocalizationsUpdateInstanceRequest) (*AppStoreVersionLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionLocalizationsApiService.AppStoreVersionLocalizationsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersionLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appStoreVersionLocalizationUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("appStoreVersionLocalizationUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appStoreVersionLocalizationUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
