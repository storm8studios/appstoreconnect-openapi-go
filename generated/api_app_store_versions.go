/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AppStoreVersionsApiService AppStoreVersionsApi service
type AppStoreVersionsApiService service

type AppStoreVersionsApiAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsApiService
	id string
	fieldsAgeRatingDeclarations *[]string
}

// the fields to include for returned resources of type ageRatingDeclarations
func (r AppStoreVersionsApiAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest) FieldsAgeRatingDeclarations(fieldsAgeRatingDeclarations []string) AppStoreVersionsApiAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest {
	r.fieldsAgeRatingDeclarations = &fieldsAgeRatingDeclarations
	return r
}

func (r AppStoreVersionsApiAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest) Execute() (*AgeRatingDeclarationResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsAgeRatingDeclarationGetToOneRelatedExecute(r)
}

/*
AppStoreVersionsAgeRatingDeclarationGetToOneRelated Method for AppStoreVersionsAgeRatingDeclarationGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionsApiAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest

Deprecated
*/
func (a *AppStoreVersionsApiService) AppStoreVersionsAgeRatingDeclarationGetToOneRelated(ctx context.Context, id string) AppStoreVersionsApiAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest {
	return AppStoreVersionsApiAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AgeRatingDeclarationResponse
// Deprecated
func (a *AppStoreVersionsApiService) AppStoreVersionsAgeRatingDeclarationGetToOneRelatedExecute(r AppStoreVersionsApiAppStoreVersionsAgeRatingDeclarationGetToOneRelatedRequest) (*AgeRatingDeclarationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AgeRatingDeclarationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsApiService.AppStoreVersionsAgeRatingDeclarationGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/ageRatingDeclaration"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAgeRatingDeclarations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ageRatingDeclarations]", r.fieldsAgeRatingDeclarations, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsApiService
	id string
	fieldsAppClips *[]string
	fieldsAppClipAppStoreReviewDetails *[]string
	fieldsAppStoreVersions *[]string
	fieldsAppClipDefaultExperiences *[]string
	fieldsAppClipDefaultExperienceLocalizations *[]string
	limitAppClipDefaultExperienceLocalizations *int32
	include *[]string
}

// the fields to include for returned resources of type appClips
func (r AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest) FieldsAppClips(fieldsAppClips []string) AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest {
	r.fieldsAppClips = &fieldsAppClips
	return r
}

// the fields to include for returned resources of type appClipAppStoreReviewDetails
func (r AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest) FieldsAppClipAppStoreReviewDetails(fieldsAppClipAppStoreReviewDetails []string) AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest {
	r.fieldsAppClipAppStoreReviewDetails = &fieldsAppClipAppStoreReviewDetails
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type appClipDefaultExperiences
func (r AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest) FieldsAppClipDefaultExperiences(fieldsAppClipDefaultExperiences []string) AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest {
	r.fieldsAppClipDefaultExperiences = &fieldsAppClipDefaultExperiences
	return r
}

// the fields to include for returned resources of type appClipDefaultExperienceLocalizations
func (r AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest) FieldsAppClipDefaultExperienceLocalizations(fieldsAppClipDefaultExperienceLocalizations []string) AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest {
	r.fieldsAppClipDefaultExperienceLocalizations = &fieldsAppClipDefaultExperienceLocalizations
	return r
}

// maximum number of related appClipDefaultExperienceLocalizations returned (when they are included)
func (r AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest) LimitAppClipDefaultExperienceLocalizations(limitAppClipDefaultExperienceLocalizations int32) AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest {
	r.limitAppClipDefaultExperienceLocalizations = &limitAppClipDefaultExperienceLocalizations
	return r
}

// comma-separated list of relationships to include
func (r AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest) Include(include []string) AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest {
	r.include = &include
	return r
}

func (r AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest) Execute() (*AppClipDefaultExperienceResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedExecute(r)
}

/*
AppStoreVersionsAppClipDefaultExperienceGetToOneRelated Method for AppStoreVersionsAppClipDefaultExperienceGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest
*/
func (a *AppStoreVersionsApiService) AppStoreVersionsAppClipDefaultExperienceGetToOneRelated(ctx context.Context, id string) AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest {
	return AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppClipDefaultExperienceResponse
func (a *AppStoreVersionsApiService) AppStoreVersionsAppClipDefaultExperienceGetToOneRelatedExecute(r AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelatedRequest) (*AppClipDefaultExperienceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppClipDefaultExperienceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsApiService.AppStoreVersionsAppClipDefaultExperienceGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/appClipDefaultExperience"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppClips != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClips]", r.fieldsAppClips, "csv")
	}
	if r.fieldsAppClipAppStoreReviewDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipAppStoreReviewDetails]", r.fieldsAppClipAppStoreReviewDetails, "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "csv")
	}
	if r.fieldsAppClipDefaultExperiences != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipDefaultExperiences]", r.fieldsAppClipDefaultExperiences, "csv")
	}
	if r.fieldsAppClipDefaultExperienceLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipDefaultExperienceLocalizations]", r.fieldsAppClipDefaultExperienceLocalizations, "csv")
	}
	if r.limitAppClipDefaultExperienceLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appClipDefaultExperienceLocalizations]", r.limitAppClipDefaultExperienceLocalizations, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsApiService
	id string
}

func (r AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRequest) Execute() (*AppStoreVersionAppClipDefaultExperienceLinkageResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipExecute(r)
}

/*
AppStoreVersionsAppClipDefaultExperienceGetToOneRelationship Method for AppStoreVersionsAppClipDefaultExperienceGetToOneRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRequest
*/
func (a *AppStoreVersionsApiService) AppStoreVersionsAppClipDefaultExperienceGetToOneRelationship(ctx context.Context, id string) AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRequest {
	return AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionAppClipDefaultExperienceLinkageResponse
func (a *AppStoreVersionsApiService) AppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipExecute(r AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceGetToOneRelationshipRequest) (*AppStoreVersionAppClipDefaultExperienceLinkageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionAppClipDefaultExperienceLinkageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsApiService.AppStoreVersionsAppClipDefaultExperienceGetToOneRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsApiService
	id string
	appStoreVersionAppClipDefaultExperienceLinkageRequest *AppStoreVersionAppClipDefaultExperienceLinkageRequest
}

// Related linkage
func (r AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest) AppStoreVersionAppClipDefaultExperienceLinkageRequest(appStoreVersionAppClipDefaultExperienceLinkageRequest AppStoreVersionAppClipDefaultExperienceLinkageRequest) AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest {
	r.appStoreVersionAppClipDefaultExperienceLinkageRequest = &appStoreVersionAppClipDefaultExperienceLinkageRequest
	return r
}

func (r AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipExecute(r)
}

/*
AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship Method for AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest
*/
func (a *AppStoreVersionsApiService) AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship(ctx context.Context, id string) AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest {
	return AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AppStoreVersionsApiService) AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipExecute(r AppStoreVersionsApiAppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsApiService.AppStoreVersionsAppClipDefaultExperienceUpdateToOneRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/relationships/appClipDefaultExperience"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appStoreVersionAppClipDefaultExperienceLinkageRequest == nil {
		return nil, reportError("appStoreVersionAppClipDefaultExperienceLinkageRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appStoreVersionAppClipDefaultExperienceLinkageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AppStoreVersionsApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsApiService
	id string
	fieldsAppStoreReviewDetails *[]string
	fieldsAppStoreVersions *[]string
	fieldsAppStoreReviewAttachments *[]string
	limitAppStoreReviewAttachments *int32
	include *[]string
}

// the fields to include for returned resources of type appStoreReviewDetails
func (r AppStoreVersionsApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest) FieldsAppStoreReviewDetails(fieldsAppStoreReviewDetails []string) AppStoreVersionsApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest {
	r.fieldsAppStoreReviewDetails = &fieldsAppStoreReviewDetails
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r AppStoreVersionsApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) AppStoreVersionsApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type appStoreReviewAttachments
func (r AppStoreVersionsApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest) FieldsAppStoreReviewAttachments(fieldsAppStoreReviewAttachments []string) AppStoreVersionsApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest {
	r.fieldsAppStoreReviewAttachments = &fieldsAppStoreReviewAttachments
	return r
}

// maximum number of related appStoreReviewAttachments returned (when they are included)
func (r AppStoreVersionsApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest) LimitAppStoreReviewAttachments(limitAppStoreReviewAttachments int32) AppStoreVersionsApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest {
	r.limitAppStoreReviewAttachments = &limitAppStoreReviewAttachments
	return r
}

// comma-separated list of relationships to include
func (r AppStoreVersionsApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest) Include(include []string) AppStoreVersionsApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest {
	r.include = &include
	return r
}

func (r AppStoreVersionsApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest) Execute() (*AppStoreReviewDetailResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsAppStoreReviewDetailGetToOneRelatedExecute(r)
}

/*
AppStoreVersionsAppStoreReviewDetailGetToOneRelated Method for AppStoreVersionsAppStoreReviewDetailGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionsApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest
*/
func (a *AppStoreVersionsApiService) AppStoreVersionsAppStoreReviewDetailGetToOneRelated(ctx context.Context, id string) AppStoreVersionsApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest {
	return AppStoreVersionsApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreReviewDetailResponse
func (a *AppStoreVersionsApiService) AppStoreVersionsAppStoreReviewDetailGetToOneRelatedExecute(r AppStoreVersionsApiAppStoreVersionsAppStoreReviewDetailGetToOneRelatedRequest) (*AppStoreReviewDetailResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreReviewDetailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsApiService.AppStoreVersionsAppStoreReviewDetailGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/appStoreReviewDetail"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppStoreReviewDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreReviewDetails]", r.fieldsAppStoreReviewDetails, "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "csv")
	}
	if r.fieldsAppStoreReviewAttachments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreReviewAttachments]", r.fieldsAppStoreReviewAttachments, "csv")
	}
	if r.limitAppStoreReviewAttachments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreReviewAttachments]", r.limitAppStoreReviewAttachments, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsApiService
	id string
	filterState *[]string
	fieldsAppStoreVersionExperiments *[]string
	fieldsAppStoreVersionExperimentTreatments *[]string
	fieldsAppStoreVersions *[]string
	limit *int32
	limitAppStoreVersionExperimentTreatments *int32
	include *[]string
}

// filter by attribute &#39;state&#39;
func (r AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest) FilterState(filterState []string) AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest {
	r.filterState = &filterState
	return r
}

// the fields to include for returned resources of type appStoreVersionExperiments
func (r AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest) FieldsAppStoreVersionExperiments(fieldsAppStoreVersionExperiments []string) AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionExperiments = &fieldsAppStoreVersionExperiments
	return r
}

// the fields to include for returned resources of type appStoreVersionExperimentTreatments
func (r AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest) FieldsAppStoreVersionExperimentTreatments(fieldsAppStoreVersionExperimentTreatments []string) AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionExperimentTreatments = &fieldsAppStoreVersionExperimentTreatments
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// maximum resources per page
func (r AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest) Limit(limit int32) AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// maximum number of related appStoreVersionExperimentTreatments returned (when they are included)
func (r AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest) LimitAppStoreVersionExperimentTreatments(limitAppStoreVersionExperimentTreatments int32) AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest {
	r.limitAppStoreVersionExperimentTreatments = &limitAppStoreVersionExperimentTreatments
	return r
}

// comma-separated list of relationships to include
func (r AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest) Include(include []string) AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest) Execute() (*AppStoreVersionExperimentsResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedExecute(r)
}

/*
AppStoreVersionsAppStoreVersionExperimentsGetToManyRelated Method for AppStoreVersionsAppStoreVersionExperimentsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest
*/
func (a *AppStoreVersionsApiService) AppStoreVersionsAppStoreVersionExperimentsGetToManyRelated(ctx context.Context, id string) AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest {
	return AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionExperimentsResponse
func (a *AppStoreVersionsApiService) AppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedExecute(r AppStoreVersionsApiAppStoreVersionsAppStoreVersionExperimentsGetToManyRelatedRequest) (*AppStoreVersionExperimentsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionExperimentsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsApiService.AppStoreVersionsAppStoreVersionExperimentsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/appStoreVersionExperiments"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[state]", r.filterState, "csv")
	}
	if r.fieldsAppStoreVersionExperiments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperiments]", r.fieldsAppStoreVersionExperiments, "csv")
	}
	if r.fieldsAppStoreVersionExperimentTreatments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperimentTreatments]", r.fieldsAppStoreVersionExperimentTreatments, "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.limitAppStoreVersionExperimentTreatments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreVersionExperimentTreatments]", r.limitAppStoreVersionExperimentTreatments, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreVersionsApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsApiService
	id string
	fieldsAppStoreVersionLocalizations *[]string
	limit *int32
}

// the fields to include for returned resources of type appStoreVersionLocalizations
func (r AppStoreVersionsApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest) FieldsAppStoreVersionLocalizations(fieldsAppStoreVersionLocalizations []string) AppStoreVersionsApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionLocalizations = &fieldsAppStoreVersionLocalizations
	return r
}

// maximum resources per page
func (r AppStoreVersionsApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest) Limit(limit int32) AppStoreVersionsApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r AppStoreVersionsApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest) Execute() (*AppStoreVersionLocalizationsResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedExecute(r)
}

/*
AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated Method for AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionsApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest
*/
func (a *AppStoreVersionsApiService) AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated(ctx context.Context, id string) AppStoreVersionsApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest {
	return AppStoreVersionsApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionLocalizationsResponse
func (a *AppStoreVersionsApiService) AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedExecute(r AppStoreVersionsApiAppStoreVersionsAppStoreVersionLocalizationsGetToManyRelatedRequest) (*AppStoreVersionLocalizationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionLocalizationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsApiService.AppStoreVersionsAppStoreVersionLocalizationsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/appStoreVersionLocalizations"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionLocalizations]", r.fieldsAppStoreVersionLocalizations, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreVersionsApiAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsApiService
	id string
	fieldsAppStoreVersionPhasedReleases *[]string
}

// the fields to include for returned resources of type appStoreVersionPhasedReleases
func (r AppStoreVersionsApiAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest) FieldsAppStoreVersionPhasedReleases(fieldsAppStoreVersionPhasedReleases []string) AppStoreVersionsApiAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest {
	r.fieldsAppStoreVersionPhasedReleases = &fieldsAppStoreVersionPhasedReleases
	return r
}

func (r AppStoreVersionsApiAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest) Execute() (*AppStoreVersionPhasedReleaseResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedExecute(r)
}

/*
AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated Method for AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionsApiAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest
*/
func (a *AppStoreVersionsApiService) AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated(ctx context.Context, id string) AppStoreVersionsApiAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest {
	return AppStoreVersionsApiAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionPhasedReleaseResponse
func (a *AppStoreVersionsApiService) AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedExecute(r AppStoreVersionsApiAppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelatedRequest) (*AppStoreVersionPhasedReleaseResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionPhasedReleaseResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsApiService.AppStoreVersionsAppStoreVersionPhasedReleaseGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/appStoreVersionPhasedRelease"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppStoreVersionPhasedReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionPhasedReleases]", r.fieldsAppStoreVersionPhasedReleases, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreVersionsApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsApiService
	id string
	fieldsAppStoreVersionSubmissions *[]string
	fieldsAppStoreVersions *[]string
	include *[]string
}

// the fields to include for returned resources of type appStoreVersionSubmissions
func (r AppStoreVersionsApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest) FieldsAppStoreVersionSubmissions(fieldsAppStoreVersionSubmissions []string) AppStoreVersionsApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest {
	r.fieldsAppStoreVersionSubmissions = &fieldsAppStoreVersionSubmissions
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r AppStoreVersionsApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) AppStoreVersionsApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// comma-separated list of relationships to include
func (r AppStoreVersionsApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest) Include(include []string) AppStoreVersionsApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest {
	r.include = &include
	return r
}

func (r AppStoreVersionsApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest) Execute() (*AppStoreVersionSubmissionResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedExecute(r)
}

/*
AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated Method for AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionsApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest

Deprecated
*/
func (a *AppStoreVersionsApiService) AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated(ctx context.Context, id string) AppStoreVersionsApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest {
	return AppStoreVersionsApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionSubmissionResponse
// Deprecated
func (a *AppStoreVersionsApiService) AppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedExecute(r AppStoreVersionsApiAppStoreVersionsAppStoreVersionSubmissionGetToOneRelatedRequest) (*AppStoreVersionSubmissionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionSubmissionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsApiService.AppStoreVersionsAppStoreVersionSubmissionGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/appStoreVersionSubmission"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppStoreVersionSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionSubmissions]", r.fieldsAppStoreVersionSubmissions, "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreVersionsApiAppStoreVersionsBuildGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsApiService
	id string
	fieldsBuilds *[]string
}

// the fields to include for returned resources of type builds
func (r AppStoreVersionsApiAppStoreVersionsBuildGetToOneRelatedRequest) FieldsBuilds(fieldsBuilds []string) AppStoreVersionsApiAppStoreVersionsBuildGetToOneRelatedRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

func (r AppStoreVersionsApiAppStoreVersionsBuildGetToOneRelatedRequest) Execute() (*BuildResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsBuildGetToOneRelatedExecute(r)
}

/*
AppStoreVersionsBuildGetToOneRelated Method for AppStoreVersionsBuildGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionsApiAppStoreVersionsBuildGetToOneRelatedRequest
*/
func (a *AppStoreVersionsApiService) AppStoreVersionsBuildGetToOneRelated(ctx context.Context, id string) AppStoreVersionsApiAppStoreVersionsBuildGetToOneRelatedRequest {
	return AppStoreVersionsApiAppStoreVersionsBuildGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BuildResponse
func (a *AppStoreVersionsApiService) AppStoreVersionsBuildGetToOneRelatedExecute(r AppStoreVersionsApiAppStoreVersionsBuildGetToOneRelatedRequest) (*BuildResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BuildResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsApiService.AppStoreVersionsBuildGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/build"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreVersionsApiAppStoreVersionsBuildGetToOneRelationshipRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsApiService
	id string
}

func (r AppStoreVersionsApiAppStoreVersionsBuildGetToOneRelationshipRequest) Execute() (*AppStoreVersionBuildLinkageResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsBuildGetToOneRelationshipExecute(r)
}

/*
AppStoreVersionsBuildGetToOneRelationship Method for AppStoreVersionsBuildGetToOneRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionsApiAppStoreVersionsBuildGetToOneRelationshipRequest
*/
func (a *AppStoreVersionsApiService) AppStoreVersionsBuildGetToOneRelationship(ctx context.Context, id string) AppStoreVersionsApiAppStoreVersionsBuildGetToOneRelationshipRequest {
	return AppStoreVersionsApiAppStoreVersionsBuildGetToOneRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionBuildLinkageResponse
func (a *AppStoreVersionsApiService) AppStoreVersionsBuildGetToOneRelationshipExecute(r AppStoreVersionsApiAppStoreVersionsBuildGetToOneRelationshipRequest) (*AppStoreVersionBuildLinkageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionBuildLinkageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsApiService.AppStoreVersionsBuildGetToOneRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/relationships/build"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreVersionsApiAppStoreVersionsBuildUpdateToOneRelationshipRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsApiService
	id string
	appStoreVersionBuildLinkageRequest *AppStoreVersionBuildLinkageRequest
}

// Related linkage
func (r AppStoreVersionsApiAppStoreVersionsBuildUpdateToOneRelationshipRequest) AppStoreVersionBuildLinkageRequest(appStoreVersionBuildLinkageRequest AppStoreVersionBuildLinkageRequest) AppStoreVersionsApiAppStoreVersionsBuildUpdateToOneRelationshipRequest {
	r.appStoreVersionBuildLinkageRequest = &appStoreVersionBuildLinkageRequest
	return r
}

func (r AppStoreVersionsApiAppStoreVersionsBuildUpdateToOneRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppStoreVersionsBuildUpdateToOneRelationshipExecute(r)
}

/*
AppStoreVersionsBuildUpdateToOneRelationship Method for AppStoreVersionsBuildUpdateToOneRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionsApiAppStoreVersionsBuildUpdateToOneRelationshipRequest
*/
func (a *AppStoreVersionsApiService) AppStoreVersionsBuildUpdateToOneRelationship(ctx context.Context, id string) AppStoreVersionsApiAppStoreVersionsBuildUpdateToOneRelationshipRequest {
	return AppStoreVersionsApiAppStoreVersionsBuildUpdateToOneRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AppStoreVersionsApiService) AppStoreVersionsBuildUpdateToOneRelationshipExecute(r AppStoreVersionsApiAppStoreVersionsBuildUpdateToOneRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsApiService.AppStoreVersionsBuildUpdateToOneRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/relationships/build"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appStoreVersionBuildLinkageRequest == nil {
		return nil, reportError("appStoreVersionBuildLinkageRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appStoreVersionBuildLinkageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AppStoreVersionsApiAppStoreVersionsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsApiService
	appStoreVersionCreateRequest *AppStoreVersionCreateRequest
}

// AppStoreVersion representation
func (r AppStoreVersionsApiAppStoreVersionsCreateInstanceRequest) AppStoreVersionCreateRequest(appStoreVersionCreateRequest AppStoreVersionCreateRequest) AppStoreVersionsApiAppStoreVersionsCreateInstanceRequest {
	r.appStoreVersionCreateRequest = &appStoreVersionCreateRequest
	return r
}

func (r AppStoreVersionsApiAppStoreVersionsCreateInstanceRequest) Execute() (*AppStoreVersionResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsCreateInstanceExecute(r)
}

/*
AppStoreVersionsCreateInstance Method for AppStoreVersionsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return AppStoreVersionsApiAppStoreVersionsCreateInstanceRequest
*/
func (a *AppStoreVersionsApiService) AppStoreVersionsCreateInstance(ctx context.Context) AppStoreVersionsApiAppStoreVersionsCreateInstanceRequest {
	return AppStoreVersionsApiAppStoreVersionsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppStoreVersionResponse
func (a *AppStoreVersionsApiService) AppStoreVersionsCreateInstanceExecute(r AppStoreVersionsApiAppStoreVersionsCreateInstanceRequest) (*AppStoreVersionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsApiService.AppStoreVersionsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appStoreVersionCreateRequest == nil {
		return localVarReturnValue, nil, reportError("appStoreVersionCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appStoreVersionCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsApiService
	id string
	filterRating *[]string
	filterTerritory *[]string
	existsPublishedResponse *bool
	sort *[]string
	fieldsCustomerReviews *[]string
	fieldsCustomerReviewResponses *[]string
	limit *int32
	include *[]string
}

// filter by attribute &#39;rating&#39;
func (r AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) FilterRating(filterRating []string) AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
	r.filterRating = &filterRating
	return r
}

// filter by attribute &#39;territory&#39;
func (r AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) FilterTerritory(filterTerritory []string) AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
	r.filterTerritory = &filterTerritory
	return r
}

// filter by publishedResponse
func (r AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) ExistsPublishedResponse(existsPublishedResponse bool) AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
	r.existsPublishedResponse = &existsPublishedResponse
	return r
}

// comma-separated list of sort expressions; resources will be sorted as specified
func (r AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) Sort(sort []string) AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
	r.sort = &sort
	return r
}

// the fields to include for returned resources of type customerReviews
func (r AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) FieldsCustomerReviews(fieldsCustomerReviews []string) AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
	r.fieldsCustomerReviews = &fieldsCustomerReviews
	return r
}

// the fields to include for returned resources of type customerReviewResponses
func (r AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) FieldsCustomerReviewResponses(fieldsCustomerReviewResponses []string) AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
	r.fieldsCustomerReviewResponses = &fieldsCustomerReviewResponses
	return r
}

// maximum resources per page
func (r AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) Limit(limit int32) AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) Include(include []string) AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) Execute() (*CustomerReviewsResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsCustomerReviewsGetToManyRelatedExecute(r)
}

/*
AppStoreVersionsCustomerReviewsGetToManyRelated Method for AppStoreVersionsCustomerReviewsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest
*/
func (a *AppStoreVersionsApiService) AppStoreVersionsCustomerReviewsGetToManyRelated(ctx context.Context, id string) AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest {
	return AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomerReviewsResponse
func (a *AppStoreVersionsApiService) AppStoreVersionsCustomerReviewsGetToManyRelatedExecute(r AppStoreVersionsApiAppStoreVersionsCustomerReviewsGetToManyRelatedRequest) (*CustomerReviewsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomerReviewsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsApiService.AppStoreVersionsCustomerReviewsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/customerReviews"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[rating]", r.filterRating, "csv")
	}
	if r.filterTerritory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[territory]", r.filterTerritory, "csv")
	}
	if r.existsPublishedResponse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exists[publishedResponse]", r.existsPublishedResponse, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "csv")
	}
	if r.fieldsCustomerReviews != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[customerReviews]", r.fieldsCustomerReviews, "csv")
	}
	if r.fieldsCustomerReviewResponses != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[customerReviewResponses]", r.fieldsCustomerReviewResponses, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreVersionsApiAppStoreVersionsDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsApiService
	id string
}

func (r AppStoreVersionsApiAppStoreVersionsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppStoreVersionsDeleteInstanceExecute(r)
}

/*
AppStoreVersionsDeleteInstance Method for AppStoreVersionsDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionsApiAppStoreVersionsDeleteInstanceRequest
*/
func (a *AppStoreVersionsApiService) AppStoreVersionsDeleteInstance(ctx context.Context, id string) AppStoreVersionsApiAppStoreVersionsDeleteInstanceRequest {
	return AppStoreVersionsApiAppStoreVersionsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AppStoreVersionsApiService) AppStoreVersionsDeleteInstanceExecute(r AppStoreVersionsApiAppStoreVersionsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsApiService.AppStoreVersionsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AppStoreVersionsApiAppStoreVersionsGetInstanceRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsApiService
	id string
	fieldsAppStoreVersions *[]string
	include *[]string
	fieldsAppStoreVersionExperiments *[]string
	fieldsAppStoreVersionSubmissions *[]string
	fieldsAgeRatingDeclarations *[]string
	fieldsCustomerReviews *[]string
	fieldsAppStoreReviewDetails *[]string
	fieldsAppClipDefaultExperiences *[]string
	fieldsRoutingAppCoverages *[]string
	fieldsAppStoreVersionPhasedReleases *[]string
	fieldsBuilds *[]string
	fieldsAppStoreVersionLocalizations *[]string
	limitAppStoreVersionExperiments *int32
	limitAppStoreVersionLocalizations *int32
}

// the fields to include for returned resources of type appStoreVersions
func (r AppStoreVersionsApiAppStoreVersionsGetInstanceRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) AppStoreVersionsApiAppStoreVersionsGetInstanceRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// comma-separated list of relationships to include
func (r AppStoreVersionsApiAppStoreVersionsGetInstanceRequest) Include(include []string) AppStoreVersionsApiAppStoreVersionsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type appStoreVersionExperiments
func (r AppStoreVersionsApiAppStoreVersionsGetInstanceRequest) FieldsAppStoreVersionExperiments(fieldsAppStoreVersionExperiments []string) AppStoreVersionsApiAppStoreVersionsGetInstanceRequest {
	r.fieldsAppStoreVersionExperiments = &fieldsAppStoreVersionExperiments
	return r
}

// the fields to include for returned resources of type appStoreVersionSubmissions
// Deprecated
func (r AppStoreVersionsApiAppStoreVersionsGetInstanceRequest) FieldsAppStoreVersionSubmissions(fieldsAppStoreVersionSubmissions []string) AppStoreVersionsApiAppStoreVersionsGetInstanceRequest {
	r.fieldsAppStoreVersionSubmissions = &fieldsAppStoreVersionSubmissions
	return r
}

// the fields to include for returned resources of type ageRatingDeclarations
// Deprecated
func (r AppStoreVersionsApiAppStoreVersionsGetInstanceRequest) FieldsAgeRatingDeclarations(fieldsAgeRatingDeclarations []string) AppStoreVersionsApiAppStoreVersionsGetInstanceRequest {
	r.fieldsAgeRatingDeclarations = &fieldsAgeRatingDeclarations
	return r
}

// the fields to include for returned resources of type customerReviews
func (r AppStoreVersionsApiAppStoreVersionsGetInstanceRequest) FieldsCustomerReviews(fieldsCustomerReviews []string) AppStoreVersionsApiAppStoreVersionsGetInstanceRequest {
	r.fieldsCustomerReviews = &fieldsCustomerReviews
	return r
}

// the fields to include for returned resources of type appStoreReviewDetails
func (r AppStoreVersionsApiAppStoreVersionsGetInstanceRequest) FieldsAppStoreReviewDetails(fieldsAppStoreReviewDetails []string) AppStoreVersionsApiAppStoreVersionsGetInstanceRequest {
	r.fieldsAppStoreReviewDetails = &fieldsAppStoreReviewDetails
	return r
}

// the fields to include for returned resources of type appClipDefaultExperiences
func (r AppStoreVersionsApiAppStoreVersionsGetInstanceRequest) FieldsAppClipDefaultExperiences(fieldsAppClipDefaultExperiences []string) AppStoreVersionsApiAppStoreVersionsGetInstanceRequest {
	r.fieldsAppClipDefaultExperiences = &fieldsAppClipDefaultExperiences
	return r
}

// the fields to include for returned resources of type routingAppCoverages
func (r AppStoreVersionsApiAppStoreVersionsGetInstanceRequest) FieldsRoutingAppCoverages(fieldsRoutingAppCoverages []string) AppStoreVersionsApiAppStoreVersionsGetInstanceRequest {
	r.fieldsRoutingAppCoverages = &fieldsRoutingAppCoverages
	return r
}

// the fields to include for returned resources of type appStoreVersionPhasedReleases
func (r AppStoreVersionsApiAppStoreVersionsGetInstanceRequest) FieldsAppStoreVersionPhasedReleases(fieldsAppStoreVersionPhasedReleases []string) AppStoreVersionsApiAppStoreVersionsGetInstanceRequest {
	r.fieldsAppStoreVersionPhasedReleases = &fieldsAppStoreVersionPhasedReleases
	return r
}

// the fields to include for returned resources of type builds
func (r AppStoreVersionsApiAppStoreVersionsGetInstanceRequest) FieldsBuilds(fieldsBuilds []string) AppStoreVersionsApiAppStoreVersionsGetInstanceRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// the fields to include for returned resources of type appStoreVersionLocalizations
func (r AppStoreVersionsApiAppStoreVersionsGetInstanceRequest) FieldsAppStoreVersionLocalizations(fieldsAppStoreVersionLocalizations []string) AppStoreVersionsApiAppStoreVersionsGetInstanceRequest {
	r.fieldsAppStoreVersionLocalizations = &fieldsAppStoreVersionLocalizations
	return r
}

// maximum number of related appStoreVersionExperiments returned (when they are included)
func (r AppStoreVersionsApiAppStoreVersionsGetInstanceRequest) LimitAppStoreVersionExperiments(limitAppStoreVersionExperiments int32) AppStoreVersionsApiAppStoreVersionsGetInstanceRequest {
	r.limitAppStoreVersionExperiments = &limitAppStoreVersionExperiments
	return r
}

// maximum number of related appStoreVersionLocalizations returned (when they are included)
func (r AppStoreVersionsApiAppStoreVersionsGetInstanceRequest) LimitAppStoreVersionLocalizations(limitAppStoreVersionLocalizations int32) AppStoreVersionsApiAppStoreVersionsGetInstanceRequest {
	r.limitAppStoreVersionLocalizations = &limitAppStoreVersionLocalizations
	return r
}

func (r AppStoreVersionsApiAppStoreVersionsGetInstanceRequest) Execute() (*AppStoreVersionResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsGetInstanceExecute(r)
}

/*
AppStoreVersionsGetInstance Method for AppStoreVersionsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionsApiAppStoreVersionsGetInstanceRequest
*/
func (a *AppStoreVersionsApiService) AppStoreVersionsGetInstance(ctx context.Context, id string) AppStoreVersionsApiAppStoreVersionsGetInstanceRequest {
	return AppStoreVersionsApiAppStoreVersionsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionResponse
func (a *AppStoreVersionsApiService) AppStoreVersionsGetInstanceExecute(r AppStoreVersionsApiAppStoreVersionsGetInstanceRequest) (*AppStoreVersionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsApiService.AppStoreVersionsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsAppStoreVersionExperiments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperiments]", r.fieldsAppStoreVersionExperiments, "csv")
	}
	if r.fieldsAppStoreVersionSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionSubmissions]", r.fieldsAppStoreVersionSubmissions, "csv")
	}
	if r.fieldsAgeRatingDeclarations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ageRatingDeclarations]", r.fieldsAgeRatingDeclarations, "csv")
	}
	if r.fieldsCustomerReviews != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[customerReviews]", r.fieldsCustomerReviews, "csv")
	}
	if r.fieldsAppStoreReviewDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreReviewDetails]", r.fieldsAppStoreReviewDetails, "csv")
	}
	if r.fieldsAppClipDefaultExperiences != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipDefaultExperiences]", r.fieldsAppClipDefaultExperiences, "csv")
	}
	if r.fieldsRoutingAppCoverages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[routingAppCoverages]", r.fieldsRoutingAppCoverages, "csv")
	}
	if r.fieldsAppStoreVersionPhasedReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionPhasedReleases]", r.fieldsAppStoreVersionPhasedReleases, "csv")
	}
	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	if r.fieldsAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionLocalizations]", r.fieldsAppStoreVersionLocalizations, "csv")
	}
	if r.limitAppStoreVersionExperiments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreVersionExperiments]", r.limitAppStoreVersionExperiments, "")
	}
	if r.limitAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreVersionLocalizations]", r.limitAppStoreVersionLocalizations, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreVersionsApiAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsApiService
	id string
	fieldsRoutingAppCoverages *[]string
}

// the fields to include for returned resources of type routingAppCoverages
func (r AppStoreVersionsApiAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest) FieldsRoutingAppCoverages(fieldsRoutingAppCoverages []string) AppStoreVersionsApiAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest {
	r.fieldsRoutingAppCoverages = &fieldsRoutingAppCoverages
	return r
}

func (r AppStoreVersionsApiAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest) Execute() (*RoutingAppCoverageResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsRoutingAppCoverageGetToOneRelatedExecute(r)
}

/*
AppStoreVersionsRoutingAppCoverageGetToOneRelated Method for AppStoreVersionsRoutingAppCoverageGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionsApiAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest
*/
func (a *AppStoreVersionsApiService) AppStoreVersionsRoutingAppCoverageGetToOneRelated(ctx context.Context, id string) AppStoreVersionsApiAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest {
	return AppStoreVersionsApiAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RoutingAppCoverageResponse
func (a *AppStoreVersionsApiService) AppStoreVersionsRoutingAppCoverageGetToOneRelatedExecute(r AppStoreVersionsApiAppStoreVersionsRoutingAppCoverageGetToOneRelatedRequest) (*RoutingAppCoverageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RoutingAppCoverageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsApiService.AppStoreVersionsRoutingAppCoverageGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}/routingAppCoverage"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsRoutingAppCoverages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[routingAppCoverages]", r.fieldsRoutingAppCoverages, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AppStoreVersionsApiAppStoreVersionsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *AppStoreVersionsApiService
	id string
	appStoreVersionUpdateRequest *AppStoreVersionUpdateRequest
}

// AppStoreVersion representation
func (r AppStoreVersionsApiAppStoreVersionsUpdateInstanceRequest) AppStoreVersionUpdateRequest(appStoreVersionUpdateRequest AppStoreVersionUpdateRequest) AppStoreVersionsApiAppStoreVersionsUpdateInstanceRequest {
	r.appStoreVersionUpdateRequest = &appStoreVersionUpdateRequest
	return r
}

func (r AppStoreVersionsApiAppStoreVersionsUpdateInstanceRequest) Execute() (*AppStoreVersionResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionsUpdateInstanceExecute(r)
}

/*
AppStoreVersionsUpdateInstance Method for AppStoreVersionsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return AppStoreVersionsApiAppStoreVersionsUpdateInstanceRequest
*/
func (a *AppStoreVersionsApiService) AppStoreVersionsUpdateInstance(ctx context.Context, id string) AppStoreVersionsApiAppStoreVersionsUpdateInstanceRequest {
	return AppStoreVersionsApiAppStoreVersionsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionResponse
func (a *AppStoreVersionsApiService) AppStoreVersionsUpdateInstanceExecute(r AppStoreVersionsApiAppStoreVersionsUpdateInstanceRequest) (*AppStoreVersionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionsApiService.AppStoreVersionsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appStoreVersionUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("appStoreVersionUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appStoreVersionUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
