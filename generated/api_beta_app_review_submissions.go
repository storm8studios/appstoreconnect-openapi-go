/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BetaAppReviewSubmissionsApiService BetaAppReviewSubmissionsApi service
type BetaAppReviewSubmissionsApiService service

type BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsBuildGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *BetaAppReviewSubmissionsApiService
	id string
	fieldsBuilds *[]string
}

// the fields to include for returned resources of type builds
func (r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsBuildGetToOneRelatedRequest) FieldsBuilds(fieldsBuilds []string) BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsBuildGetToOneRelatedRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

func (r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsBuildGetToOneRelatedRequest) Execute() (*BuildResponse, *http.Response, error) {
	return r.ApiService.BetaAppReviewSubmissionsBuildGetToOneRelatedExecute(r)
}

/*
BetaAppReviewSubmissionsBuildGetToOneRelated Method for BetaAppReviewSubmissionsBuildGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsBuildGetToOneRelatedRequest
*/
func (a *BetaAppReviewSubmissionsApiService) BetaAppReviewSubmissionsBuildGetToOneRelated(ctx context.Context, id string) BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsBuildGetToOneRelatedRequest {
	return BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsBuildGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BuildResponse
func (a *BetaAppReviewSubmissionsApiService) BetaAppReviewSubmissionsBuildGetToOneRelatedExecute(r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsBuildGetToOneRelatedRequest) (*BuildResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BuildResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaAppReviewSubmissionsApiService.BetaAppReviewSubmissionsBuildGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaAppReviewSubmissions/{id}/build"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *BetaAppReviewSubmissionsApiService
	betaAppReviewSubmissionCreateRequest *BetaAppReviewSubmissionCreateRequest
}

// BetaAppReviewSubmission representation
func (r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsCreateInstanceRequest) BetaAppReviewSubmissionCreateRequest(betaAppReviewSubmissionCreateRequest BetaAppReviewSubmissionCreateRequest) BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsCreateInstanceRequest {
	r.betaAppReviewSubmissionCreateRequest = &betaAppReviewSubmissionCreateRequest
	return r
}

func (r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsCreateInstanceRequest) Execute() (*BetaAppReviewSubmissionResponse, *http.Response, error) {
	return r.ApiService.BetaAppReviewSubmissionsCreateInstanceExecute(r)
}

/*
BetaAppReviewSubmissionsCreateInstance Method for BetaAppReviewSubmissionsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsCreateInstanceRequest
*/
func (a *BetaAppReviewSubmissionsApiService) BetaAppReviewSubmissionsCreateInstance(ctx context.Context) BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsCreateInstanceRequest {
	return BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BetaAppReviewSubmissionResponse
func (a *BetaAppReviewSubmissionsApiService) BetaAppReviewSubmissionsCreateInstanceExecute(r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsCreateInstanceRequest) (*BetaAppReviewSubmissionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BetaAppReviewSubmissionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaAppReviewSubmissionsApiService.BetaAppReviewSubmissionsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaAppReviewSubmissions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.betaAppReviewSubmissionCreateRequest == nil {
		return localVarReturnValue, nil, reportError("betaAppReviewSubmissionCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.betaAppReviewSubmissionCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetCollectionRequest struct {
	ctx context.Context
	ApiService *BetaAppReviewSubmissionsApiService
	filterBuild *[]string
	filterBetaReviewState *[]string
	fieldsBetaAppReviewSubmissions *[]string
	limit *int32
	include *[]string
	fieldsBuilds *[]string
}

// filter by id(s) of related &#39;build&#39;
func (r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetCollectionRequest) FilterBuild(filterBuild []string) BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetCollectionRequest {
	r.filterBuild = &filterBuild
	return r
}

// filter by attribute &#39;betaReviewState&#39;
func (r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetCollectionRequest) FilterBetaReviewState(filterBetaReviewState []string) BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetCollectionRequest {
	r.filterBetaReviewState = &filterBetaReviewState
	return r
}

// the fields to include for returned resources of type betaAppReviewSubmissions
func (r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetCollectionRequest) FieldsBetaAppReviewSubmissions(fieldsBetaAppReviewSubmissions []string) BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetCollectionRequest {
	r.fieldsBetaAppReviewSubmissions = &fieldsBetaAppReviewSubmissions
	return r
}

// maximum resources per page
func (r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetCollectionRequest) Limit(limit int32) BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetCollectionRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetCollectionRequest) Include(include []string) BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetCollectionRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type builds
func (r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetCollectionRequest) FieldsBuilds(fieldsBuilds []string) BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetCollectionRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

func (r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetCollectionRequest) Execute() (*BetaAppReviewSubmissionsResponse, *http.Response, error) {
	return r.ApiService.BetaAppReviewSubmissionsGetCollectionExecute(r)
}

/*
BetaAppReviewSubmissionsGetCollection Method for BetaAppReviewSubmissionsGetCollection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetCollectionRequest
*/
func (a *BetaAppReviewSubmissionsApiService) BetaAppReviewSubmissionsGetCollection(ctx context.Context) BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetCollectionRequest {
	return BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BetaAppReviewSubmissionsResponse
func (a *BetaAppReviewSubmissionsApiService) BetaAppReviewSubmissionsGetCollectionExecute(r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetCollectionRequest) (*BetaAppReviewSubmissionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BetaAppReviewSubmissionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaAppReviewSubmissionsApiService.BetaAppReviewSubmissionsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaAppReviewSubmissions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filterBuild == nil {
		return localVarReturnValue, nil, reportError("filterBuild is required and must be specified")
	}

	if r.filterBetaReviewState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[betaReviewState]", r.filterBetaReviewState, "csv")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "filter[build]", r.filterBuild, "csv")
	if r.fieldsBetaAppReviewSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaAppReviewSubmissions]", r.fieldsBetaAppReviewSubmissions, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetInstanceRequest struct {
	ctx context.Context
	ApiService *BetaAppReviewSubmissionsApiService
	id string
	fieldsBetaAppReviewSubmissions *[]string
	include *[]string
	fieldsBuilds *[]string
}

// the fields to include for returned resources of type betaAppReviewSubmissions
func (r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetInstanceRequest) FieldsBetaAppReviewSubmissions(fieldsBetaAppReviewSubmissions []string) BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetInstanceRequest {
	r.fieldsBetaAppReviewSubmissions = &fieldsBetaAppReviewSubmissions
	return r
}

// comma-separated list of relationships to include
func (r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetInstanceRequest) Include(include []string) BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type builds
func (r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetInstanceRequest) FieldsBuilds(fieldsBuilds []string) BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetInstanceRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

func (r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetInstanceRequest) Execute() (*BetaAppReviewSubmissionResponse, *http.Response, error) {
	return r.ApiService.BetaAppReviewSubmissionsGetInstanceExecute(r)
}

/*
BetaAppReviewSubmissionsGetInstance Method for BetaAppReviewSubmissionsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetInstanceRequest
*/
func (a *BetaAppReviewSubmissionsApiService) BetaAppReviewSubmissionsGetInstance(ctx context.Context, id string) BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetInstanceRequest {
	return BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BetaAppReviewSubmissionResponse
func (a *BetaAppReviewSubmissionsApiService) BetaAppReviewSubmissionsGetInstanceExecute(r BetaAppReviewSubmissionsApiBetaAppReviewSubmissionsGetInstanceRequest) (*BetaAppReviewSubmissionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BetaAppReviewSubmissionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaAppReviewSubmissionsApiService.BetaAppReviewSubmissionsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaAppReviewSubmissions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBetaAppReviewSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaAppReviewSubmissions]", r.fieldsBetaAppReviewSubmissions, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
