/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BetaGroupsApiService BetaGroupsApi service
type BetaGroupsApiService service

type BetaGroupsApiBetaGroupsAppGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *BetaGroupsApiService
	id string
	fieldsApps *[]string
}

// the fields to include for returned resources of type apps
func (r BetaGroupsApiBetaGroupsAppGetToOneRelatedRequest) FieldsApps(fieldsApps []string) BetaGroupsApiBetaGroupsAppGetToOneRelatedRequest {
	r.fieldsApps = &fieldsApps
	return r
}

func (r BetaGroupsApiBetaGroupsAppGetToOneRelatedRequest) Execute() (*AppResponse, *http.Response, error) {
	return r.ApiService.BetaGroupsAppGetToOneRelatedExecute(r)
}

/*
BetaGroupsAppGetToOneRelated Method for BetaGroupsAppGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BetaGroupsApiBetaGroupsAppGetToOneRelatedRequest
*/
func (a *BetaGroupsApiService) BetaGroupsAppGetToOneRelated(ctx context.Context, id string) BetaGroupsApiBetaGroupsAppGetToOneRelatedRequest {
	return BetaGroupsApiBetaGroupsAppGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppResponse
func (a *BetaGroupsApiService) BetaGroupsAppGetToOneRelatedExecute(r BetaGroupsApiBetaGroupsAppGetToOneRelatedRequest) (*AppResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaGroupsApiService.BetaGroupsAppGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaGroups/{id}/app"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BetaGroupsApiBetaGroupsBetaTestersCreateToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *BetaGroupsApiService
	id string
	betaGroupBetaTestersLinkagesRequest *BetaGroupBetaTestersLinkagesRequest
}

// List of related linkages
func (r BetaGroupsApiBetaGroupsBetaTestersCreateToManyRelationshipRequest) BetaGroupBetaTestersLinkagesRequest(betaGroupBetaTestersLinkagesRequest BetaGroupBetaTestersLinkagesRequest) BetaGroupsApiBetaGroupsBetaTestersCreateToManyRelationshipRequest {
	r.betaGroupBetaTestersLinkagesRequest = &betaGroupBetaTestersLinkagesRequest
	return r
}

func (r BetaGroupsApiBetaGroupsBetaTestersCreateToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.BetaGroupsBetaTestersCreateToManyRelationshipExecute(r)
}

/*
BetaGroupsBetaTestersCreateToManyRelationship Method for BetaGroupsBetaTestersCreateToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BetaGroupsApiBetaGroupsBetaTestersCreateToManyRelationshipRequest
*/
func (a *BetaGroupsApiService) BetaGroupsBetaTestersCreateToManyRelationship(ctx context.Context, id string) BetaGroupsApiBetaGroupsBetaTestersCreateToManyRelationshipRequest {
	return BetaGroupsApiBetaGroupsBetaTestersCreateToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *BetaGroupsApiService) BetaGroupsBetaTestersCreateToManyRelationshipExecute(r BetaGroupsApiBetaGroupsBetaTestersCreateToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaGroupsApiService.BetaGroupsBetaTestersCreateToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaGroups/{id}/relationships/betaTesters"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.betaGroupBetaTestersLinkagesRequest == nil {
		return nil, reportError("betaGroupBetaTestersLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.betaGroupBetaTestersLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BetaGroupsApiBetaGroupsBetaTestersDeleteToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *BetaGroupsApiService
	id string
	betaGroupBetaTestersLinkagesRequest *BetaGroupBetaTestersLinkagesRequest
}

// List of related linkages
func (r BetaGroupsApiBetaGroupsBetaTestersDeleteToManyRelationshipRequest) BetaGroupBetaTestersLinkagesRequest(betaGroupBetaTestersLinkagesRequest BetaGroupBetaTestersLinkagesRequest) BetaGroupsApiBetaGroupsBetaTestersDeleteToManyRelationshipRequest {
	r.betaGroupBetaTestersLinkagesRequest = &betaGroupBetaTestersLinkagesRequest
	return r
}

func (r BetaGroupsApiBetaGroupsBetaTestersDeleteToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.BetaGroupsBetaTestersDeleteToManyRelationshipExecute(r)
}

/*
BetaGroupsBetaTestersDeleteToManyRelationship Method for BetaGroupsBetaTestersDeleteToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BetaGroupsApiBetaGroupsBetaTestersDeleteToManyRelationshipRequest
*/
func (a *BetaGroupsApiService) BetaGroupsBetaTestersDeleteToManyRelationship(ctx context.Context, id string) BetaGroupsApiBetaGroupsBetaTestersDeleteToManyRelationshipRequest {
	return BetaGroupsApiBetaGroupsBetaTestersDeleteToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *BetaGroupsApiService) BetaGroupsBetaTestersDeleteToManyRelationshipExecute(r BetaGroupsApiBetaGroupsBetaTestersDeleteToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaGroupsApiService.BetaGroupsBetaTestersDeleteToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaGroups/{id}/relationships/betaTesters"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.betaGroupBetaTestersLinkagesRequest == nil {
		return nil, reportError("betaGroupBetaTestersLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.betaGroupBetaTestersLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BetaGroupsApiBetaGroupsBetaTestersGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *BetaGroupsApiService
	id string
	fieldsBetaTesters *[]string
	limit *int32
}

// the fields to include for returned resources of type betaTesters
func (r BetaGroupsApiBetaGroupsBetaTestersGetToManyRelatedRequest) FieldsBetaTesters(fieldsBetaTesters []string) BetaGroupsApiBetaGroupsBetaTestersGetToManyRelatedRequest {
	r.fieldsBetaTesters = &fieldsBetaTesters
	return r
}

// maximum resources per page
func (r BetaGroupsApiBetaGroupsBetaTestersGetToManyRelatedRequest) Limit(limit int32) BetaGroupsApiBetaGroupsBetaTestersGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r BetaGroupsApiBetaGroupsBetaTestersGetToManyRelatedRequest) Execute() (*BetaTestersResponse, *http.Response, error) {
	return r.ApiService.BetaGroupsBetaTestersGetToManyRelatedExecute(r)
}

/*
BetaGroupsBetaTestersGetToManyRelated Method for BetaGroupsBetaTestersGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BetaGroupsApiBetaGroupsBetaTestersGetToManyRelatedRequest
*/
func (a *BetaGroupsApiService) BetaGroupsBetaTestersGetToManyRelated(ctx context.Context, id string) BetaGroupsApiBetaGroupsBetaTestersGetToManyRelatedRequest {
	return BetaGroupsApiBetaGroupsBetaTestersGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BetaTestersResponse
func (a *BetaGroupsApiService) BetaGroupsBetaTestersGetToManyRelatedExecute(r BetaGroupsApiBetaGroupsBetaTestersGetToManyRelatedRequest) (*BetaTestersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BetaTestersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaGroupsApiService.BetaGroupsBetaTestersGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaGroups/{id}/betaTesters"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBetaTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaTesters]", r.fieldsBetaTesters, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BetaGroupsApiBetaGroupsBetaTestersGetToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *BetaGroupsApiService
	id string
	limit *int32
}

// maximum resources per page
func (r BetaGroupsApiBetaGroupsBetaTestersGetToManyRelationshipRequest) Limit(limit int32) BetaGroupsApiBetaGroupsBetaTestersGetToManyRelationshipRequest {
	r.limit = &limit
	return r
}

func (r BetaGroupsApiBetaGroupsBetaTestersGetToManyRelationshipRequest) Execute() (*BetaGroupBetaTestersLinkagesResponse, *http.Response, error) {
	return r.ApiService.BetaGroupsBetaTestersGetToManyRelationshipExecute(r)
}

/*
BetaGroupsBetaTestersGetToManyRelationship Method for BetaGroupsBetaTestersGetToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BetaGroupsApiBetaGroupsBetaTestersGetToManyRelationshipRequest
*/
func (a *BetaGroupsApiService) BetaGroupsBetaTestersGetToManyRelationship(ctx context.Context, id string) BetaGroupsApiBetaGroupsBetaTestersGetToManyRelationshipRequest {
	return BetaGroupsApiBetaGroupsBetaTestersGetToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BetaGroupBetaTestersLinkagesResponse
func (a *BetaGroupsApiService) BetaGroupsBetaTestersGetToManyRelationshipExecute(r BetaGroupsApiBetaGroupsBetaTestersGetToManyRelationshipRequest) (*BetaGroupBetaTestersLinkagesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BetaGroupBetaTestersLinkagesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaGroupsApiService.BetaGroupsBetaTestersGetToManyRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaGroups/{id}/relationships/betaTesters"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BetaGroupsApiBetaGroupsBuildsCreateToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *BetaGroupsApiService
	id string
	betaGroupBuildsLinkagesRequest *BetaGroupBuildsLinkagesRequest
}

// List of related linkages
func (r BetaGroupsApiBetaGroupsBuildsCreateToManyRelationshipRequest) BetaGroupBuildsLinkagesRequest(betaGroupBuildsLinkagesRequest BetaGroupBuildsLinkagesRequest) BetaGroupsApiBetaGroupsBuildsCreateToManyRelationshipRequest {
	r.betaGroupBuildsLinkagesRequest = &betaGroupBuildsLinkagesRequest
	return r
}

func (r BetaGroupsApiBetaGroupsBuildsCreateToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.BetaGroupsBuildsCreateToManyRelationshipExecute(r)
}

/*
BetaGroupsBuildsCreateToManyRelationship Method for BetaGroupsBuildsCreateToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BetaGroupsApiBetaGroupsBuildsCreateToManyRelationshipRequest
*/
func (a *BetaGroupsApiService) BetaGroupsBuildsCreateToManyRelationship(ctx context.Context, id string) BetaGroupsApiBetaGroupsBuildsCreateToManyRelationshipRequest {
	return BetaGroupsApiBetaGroupsBuildsCreateToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *BetaGroupsApiService) BetaGroupsBuildsCreateToManyRelationshipExecute(r BetaGroupsApiBetaGroupsBuildsCreateToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaGroupsApiService.BetaGroupsBuildsCreateToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaGroups/{id}/relationships/builds"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.betaGroupBuildsLinkagesRequest == nil {
		return nil, reportError("betaGroupBuildsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.betaGroupBuildsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BetaGroupsApiBetaGroupsBuildsDeleteToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *BetaGroupsApiService
	id string
	betaGroupBuildsLinkagesRequest *BetaGroupBuildsLinkagesRequest
}

// List of related linkages
func (r BetaGroupsApiBetaGroupsBuildsDeleteToManyRelationshipRequest) BetaGroupBuildsLinkagesRequest(betaGroupBuildsLinkagesRequest BetaGroupBuildsLinkagesRequest) BetaGroupsApiBetaGroupsBuildsDeleteToManyRelationshipRequest {
	r.betaGroupBuildsLinkagesRequest = &betaGroupBuildsLinkagesRequest
	return r
}

func (r BetaGroupsApiBetaGroupsBuildsDeleteToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.BetaGroupsBuildsDeleteToManyRelationshipExecute(r)
}

/*
BetaGroupsBuildsDeleteToManyRelationship Method for BetaGroupsBuildsDeleteToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BetaGroupsApiBetaGroupsBuildsDeleteToManyRelationshipRequest
*/
func (a *BetaGroupsApiService) BetaGroupsBuildsDeleteToManyRelationship(ctx context.Context, id string) BetaGroupsApiBetaGroupsBuildsDeleteToManyRelationshipRequest {
	return BetaGroupsApiBetaGroupsBuildsDeleteToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *BetaGroupsApiService) BetaGroupsBuildsDeleteToManyRelationshipExecute(r BetaGroupsApiBetaGroupsBuildsDeleteToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaGroupsApiService.BetaGroupsBuildsDeleteToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaGroups/{id}/relationships/builds"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.betaGroupBuildsLinkagesRequest == nil {
		return nil, reportError("betaGroupBuildsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.betaGroupBuildsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BetaGroupsApiBetaGroupsBuildsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *BetaGroupsApiService
	id string
	fieldsBuilds *[]string
	limit *int32
}

// the fields to include for returned resources of type builds
func (r BetaGroupsApiBetaGroupsBuildsGetToManyRelatedRequest) FieldsBuilds(fieldsBuilds []string) BetaGroupsApiBetaGroupsBuildsGetToManyRelatedRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// maximum resources per page
func (r BetaGroupsApiBetaGroupsBuildsGetToManyRelatedRequest) Limit(limit int32) BetaGroupsApiBetaGroupsBuildsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r BetaGroupsApiBetaGroupsBuildsGetToManyRelatedRequest) Execute() (*BuildsResponse, *http.Response, error) {
	return r.ApiService.BetaGroupsBuildsGetToManyRelatedExecute(r)
}

/*
BetaGroupsBuildsGetToManyRelated Method for BetaGroupsBuildsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BetaGroupsApiBetaGroupsBuildsGetToManyRelatedRequest
*/
func (a *BetaGroupsApiService) BetaGroupsBuildsGetToManyRelated(ctx context.Context, id string) BetaGroupsApiBetaGroupsBuildsGetToManyRelatedRequest {
	return BetaGroupsApiBetaGroupsBuildsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BuildsResponse
func (a *BetaGroupsApiService) BetaGroupsBuildsGetToManyRelatedExecute(r BetaGroupsApiBetaGroupsBuildsGetToManyRelatedRequest) (*BuildsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BuildsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaGroupsApiService.BetaGroupsBuildsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaGroups/{id}/builds"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BetaGroupsApiBetaGroupsBuildsGetToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *BetaGroupsApiService
	id string
	limit *int32
}

// maximum resources per page
func (r BetaGroupsApiBetaGroupsBuildsGetToManyRelationshipRequest) Limit(limit int32) BetaGroupsApiBetaGroupsBuildsGetToManyRelationshipRequest {
	r.limit = &limit
	return r
}

func (r BetaGroupsApiBetaGroupsBuildsGetToManyRelationshipRequest) Execute() (*BetaGroupBuildsLinkagesResponse, *http.Response, error) {
	return r.ApiService.BetaGroupsBuildsGetToManyRelationshipExecute(r)
}

/*
BetaGroupsBuildsGetToManyRelationship Method for BetaGroupsBuildsGetToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BetaGroupsApiBetaGroupsBuildsGetToManyRelationshipRequest
*/
func (a *BetaGroupsApiService) BetaGroupsBuildsGetToManyRelationship(ctx context.Context, id string) BetaGroupsApiBetaGroupsBuildsGetToManyRelationshipRequest {
	return BetaGroupsApiBetaGroupsBuildsGetToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BetaGroupBuildsLinkagesResponse
func (a *BetaGroupsApiService) BetaGroupsBuildsGetToManyRelationshipExecute(r BetaGroupsApiBetaGroupsBuildsGetToManyRelationshipRequest) (*BetaGroupBuildsLinkagesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BetaGroupBuildsLinkagesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaGroupsApiService.BetaGroupsBuildsGetToManyRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaGroups/{id}/relationships/builds"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BetaGroupsApiBetaGroupsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *BetaGroupsApiService
	betaGroupCreateRequest *BetaGroupCreateRequest
}

// BetaGroup representation
func (r BetaGroupsApiBetaGroupsCreateInstanceRequest) BetaGroupCreateRequest(betaGroupCreateRequest BetaGroupCreateRequest) BetaGroupsApiBetaGroupsCreateInstanceRequest {
	r.betaGroupCreateRequest = &betaGroupCreateRequest
	return r
}

func (r BetaGroupsApiBetaGroupsCreateInstanceRequest) Execute() (*BetaGroupResponse, *http.Response, error) {
	return r.ApiService.BetaGroupsCreateInstanceExecute(r)
}

/*
BetaGroupsCreateInstance Method for BetaGroupsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BetaGroupsApiBetaGroupsCreateInstanceRequest
*/
func (a *BetaGroupsApiService) BetaGroupsCreateInstance(ctx context.Context) BetaGroupsApiBetaGroupsCreateInstanceRequest {
	return BetaGroupsApiBetaGroupsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BetaGroupResponse
func (a *BetaGroupsApiService) BetaGroupsCreateInstanceExecute(r BetaGroupsApiBetaGroupsCreateInstanceRequest) (*BetaGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BetaGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaGroupsApiService.BetaGroupsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaGroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.betaGroupCreateRequest == nil {
		return localVarReturnValue, nil, reportError("betaGroupCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.betaGroupCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BetaGroupsApiBetaGroupsDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *BetaGroupsApiService
	id string
}

func (r BetaGroupsApiBetaGroupsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.BetaGroupsDeleteInstanceExecute(r)
}

/*
BetaGroupsDeleteInstance Method for BetaGroupsDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BetaGroupsApiBetaGroupsDeleteInstanceRequest
*/
func (a *BetaGroupsApiService) BetaGroupsDeleteInstance(ctx context.Context, id string) BetaGroupsApiBetaGroupsDeleteInstanceRequest {
	return BetaGroupsApiBetaGroupsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *BetaGroupsApiService) BetaGroupsDeleteInstanceExecute(r BetaGroupsApiBetaGroupsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaGroupsApiService.BetaGroupsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaGroups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BetaGroupsApiBetaGroupsGetCollectionRequest struct {
	ctx context.Context
	ApiService *BetaGroupsApiService
	filterIsInternalGroup *[]string
	filterName *[]string
	filterPublicLink *[]string
	filterPublicLinkEnabled *[]string
	filterPublicLinkLimitEnabled *[]string
	filterApp *[]string
	filterBuilds *[]string
	filterId *[]string
	sort *[]string
	fieldsBetaGroups *[]string
	limit *int32
	include *[]string
	fieldsBetaTesters *[]string
	fieldsApps *[]string
	fieldsBuilds *[]string
	limitBetaTesters *int32
	limitBuilds *int32
}

// filter by attribute &#39;isInternalGroup&#39;
func (r BetaGroupsApiBetaGroupsGetCollectionRequest) FilterIsInternalGroup(filterIsInternalGroup []string) BetaGroupsApiBetaGroupsGetCollectionRequest {
	r.filterIsInternalGroup = &filterIsInternalGroup
	return r
}

// filter by attribute &#39;name&#39;
func (r BetaGroupsApiBetaGroupsGetCollectionRequest) FilterName(filterName []string) BetaGroupsApiBetaGroupsGetCollectionRequest {
	r.filterName = &filterName
	return r
}

// filter by attribute &#39;publicLink&#39;
func (r BetaGroupsApiBetaGroupsGetCollectionRequest) FilterPublicLink(filterPublicLink []string) BetaGroupsApiBetaGroupsGetCollectionRequest {
	r.filterPublicLink = &filterPublicLink
	return r
}

// filter by attribute &#39;publicLinkEnabled&#39;
func (r BetaGroupsApiBetaGroupsGetCollectionRequest) FilterPublicLinkEnabled(filterPublicLinkEnabled []string) BetaGroupsApiBetaGroupsGetCollectionRequest {
	r.filterPublicLinkEnabled = &filterPublicLinkEnabled
	return r
}

// filter by attribute &#39;publicLinkLimitEnabled&#39;
func (r BetaGroupsApiBetaGroupsGetCollectionRequest) FilterPublicLinkLimitEnabled(filterPublicLinkLimitEnabled []string) BetaGroupsApiBetaGroupsGetCollectionRequest {
	r.filterPublicLinkLimitEnabled = &filterPublicLinkLimitEnabled
	return r
}

// filter by id(s) of related &#39;app&#39;
func (r BetaGroupsApiBetaGroupsGetCollectionRequest) FilterApp(filterApp []string) BetaGroupsApiBetaGroupsGetCollectionRequest {
	r.filterApp = &filterApp
	return r
}

// filter by id(s) of related &#39;builds&#39;
func (r BetaGroupsApiBetaGroupsGetCollectionRequest) FilterBuilds(filterBuilds []string) BetaGroupsApiBetaGroupsGetCollectionRequest {
	r.filterBuilds = &filterBuilds
	return r
}

// filter by id(s)
func (r BetaGroupsApiBetaGroupsGetCollectionRequest) FilterId(filterId []string) BetaGroupsApiBetaGroupsGetCollectionRequest {
	r.filterId = &filterId
	return r
}

// comma-separated list of sort expressions; resources will be sorted as specified
func (r BetaGroupsApiBetaGroupsGetCollectionRequest) Sort(sort []string) BetaGroupsApiBetaGroupsGetCollectionRequest {
	r.sort = &sort
	return r
}

// the fields to include for returned resources of type betaGroups
func (r BetaGroupsApiBetaGroupsGetCollectionRequest) FieldsBetaGroups(fieldsBetaGroups []string) BetaGroupsApiBetaGroupsGetCollectionRequest {
	r.fieldsBetaGroups = &fieldsBetaGroups
	return r
}

// maximum resources per page
func (r BetaGroupsApiBetaGroupsGetCollectionRequest) Limit(limit int32) BetaGroupsApiBetaGroupsGetCollectionRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r BetaGroupsApiBetaGroupsGetCollectionRequest) Include(include []string) BetaGroupsApiBetaGroupsGetCollectionRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type betaTesters
func (r BetaGroupsApiBetaGroupsGetCollectionRequest) FieldsBetaTesters(fieldsBetaTesters []string) BetaGroupsApiBetaGroupsGetCollectionRequest {
	r.fieldsBetaTesters = &fieldsBetaTesters
	return r
}

// the fields to include for returned resources of type apps
func (r BetaGroupsApiBetaGroupsGetCollectionRequest) FieldsApps(fieldsApps []string) BetaGroupsApiBetaGroupsGetCollectionRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// the fields to include for returned resources of type builds
func (r BetaGroupsApiBetaGroupsGetCollectionRequest) FieldsBuilds(fieldsBuilds []string) BetaGroupsApiBetaGroupsGetCollectionRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// maximum number of related betaTesters returned (when they are included)
func (r BetaGroupsApiBetaGroupsGetCollectionRequest) LimitBetaTesters(limitBetaTesters int32) BetaGroupsApiBetaGroupsGetCollectionRequest {
	r.limitBetaTesters = &limitBetaTesters
	return r
}

// maximum number of related builds returned (when they are included)
func (r BetaGroupsApiBetaGroupsGetCollectionRequest) LimitBuilds(limitBuilds int32) BetaGroupsApiBetaGroupsGetCollectionRequest {
	r.limitBuilds = &limitBuilds
	return r
}

func (r BetaGroupsApiBetaGroupsGetCollectionRequest) Execute() (*BetaGroupsResponse, *http.Response, error) {
	return r.ApiService.BetaGroupsGetCollectionExecute(r)
}

/*
BetaGroupsGetCollection Method for BetaGroupsGetCollection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BetaGroupsApiBetaGroupsGetCollectionRequest
*/
func (a *BetaGroupsApiService) BetaGroupsGetCollection(ctx context.Context) BetaGroupsApiBetaGroupsGetCollectionRequest {
	return BetaGroupsApiBetaGroupsGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BetaGroupsResponse
func (a *BetaGroupsApiService) BetaGroupsGetCollectionExecute(r BetaGroupsApiBetaGroupsGetCollectionRequest) (*BetaGroupsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BetaGroupsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaGroupsApiService.BetaGroupsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaGroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterIsInternalGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[isInternalGroup]", r.filterIsInternalGroup, "csv")
	}
	if r.filterName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[name]", r.filterName, "csv")
	}
	if r.filterPublicLink != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[publicLink]", r.filterPublicLink, "csv")
	}
	if r.filterPublicLinkEnabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[publicLinkEnabled]", r.filterPublicLinkEnabled, "csv")
	}
	if r.filterPublicLinkLimitEnabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[publicLinkLimitEnabled]", r.filterPublicLinkLimitEnabled, "csv")
	}
	if r.filterApp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[app]", r.filterApp, "csv")
	}
	if r.filterBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[builds]", r.filterBuilds, "csv")
	}
	if r.filterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[id]", r.filterId, "csv")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "csv")
	}
	if r.fieldsBetaGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaGroups]", r.fieldsBetaGroups, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsBetaTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaTesters]", r.fieldsBetaTesters, "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	if r.limitBetaTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[betaTesters]", r.limitBetaTesters, "")
	}
	if r.limitBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[builds]", r.limitBuilds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BetaGroupsApiBetaGroupsGetInstanceRequest struct {
	ctx context.Context
	ApiService *BetaGroupsApiService
	id string
	fieldsBetaGroups *[]string
	include *[]string
	fieldsBetaTesters *[]string
	fieldsApps *[]string
	fieldsBuilds *[]string
	limitBetaTesters *int32
	limitBuilds *int32
}

// the fields to include for returned resources of type betaGroups
func (r BetaGroupsApiBetaGroupsGetInstanceRequest) FieldsBetaGroups(fieldsBetaGroups []string) BetaGroupsApiBetaGroupsGetInstanceRequest {
	r.fieldsBetaGroups = &fieldsBetaGroups
	return r
}

// comma-separated list of relationships to include
func (r BetaGroupsApiBetaGroupsGetInstanceRequest) Include(include []string) BetaGroupsApiBetaGroupsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type betaTesters
func (r BetaGroupsApiBetaGroupsGetInstanceRequest) FieldsBetaTesters(fieldsBetaTesters []string) BetaGroupsApiBetaGroupsGetInstanceRequest {
	r.fieldsBetaTesters = &fieldsBetaTesters
	return r
}

// the fields to include for returned resources of type apps
func (r BetaGroupsApiBetaGroupsGetInstanceRequest) FieldsApps(fieldsApps []string) BetaGroupsApiBetaGroupsGetInstanceRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// the fields to include for returned resources of type builds
func (r BetaGroupsApiBetaGroupsGetInstanceRequest) FieldsBuilds(fieldsBuilds []string) BetaGroupsApiBetaGroupsGetInstanceRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// maximum number of related betaTesters returned (when they are included)
func (r BetaGroupsApiBetaGroupsGetInstanceRequest) LimitBetaTesters(limitBetaTesters int32) BetaGroupsApiBetaGroupsGetInstanceRequest {
	r.limitBetaTesters = &limitBetaTesters
	return r
}

// maximum number of related builds returned (when they are included)
func (r BetaGroupsApiBetaGroupsGetInstanceRequest) LimitBuilds(limitBuilds int32) BetaGroupsApiBetaGroupsGetInstanceRequest {
	r.limitBuilds = &limitBuilds
	return r
}

func (r BetaGroupsApiBetaGroupsGetInstanceRequest) Execute() (*BetaGroupResponse, *http.Response, error) {
	return r.ApiService.BetaGroupsGetInstanceExecute(r)
}

/*
BetaGroupsGetInstance Method for BetaGroupsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BetaGroupsApiBetaGroupsGetInstanceRequest
*/
func (a *BetaGroupsApiService) BetaGroupsGetInstance(ctx context.Context, id string) BetaGroupsApiBetaGroupsGetInstanceRequest {
	return BetaGroupsApiBetaGroupsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BetaGroupResponse
func (a *BetaGroupsApiService) BetaGroupsGetInstanceExecute(r BetaGroupsApiBetaGroupsGetInstanceRequest) (*BetaGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BetaGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaGroupsApiService.BetaGroupsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaGroups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBetaGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaGroups]", r.fieldsBetaGroups, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsBetaTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaTesters]", r.fieldsBetaTesters, "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	if r.limitBetaTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[betaTesters]", r.limitBetaTesters, "")
	}
	if r.limitBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[builds]", r.limitBuilds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BetaGroupsApiBetaGroupsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *BetaGroupsApiService
	id string
	betaGroupUpdateRequest *BetaGroupUpdateRequest
}

// BetaGroup representation
func (r BetaGroupsApiBetaGroupsUpdateInstanceRequest) BetaGroupUpdateRequest(betaGroupUpdateRequest BetaGroupUpdateRequest) BetaGroupsApiBetaGroupsUpdateInstanceRequest {
	r.betaGroupUpdateRequest = &betaGroupUpdateRequest
	return r
}

func (r BetaGroupsApiBetaGroupsUpdateInstanceRequest) Execute() (*BetaGroupResponse, *http.Response, error) {
	return r.ApiService.BetaGroupsUpdateInstanceExecute(r)
}

/*
BetaGroupsUpdateInstance Method for BetaGroupsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BetaGroupsApiBetaGroupsUpdateInstanceRequest
*/
func (a *BetaGroupsApiService) BetaGroupsUpdateInstance(ctx context.Context, id string) BetaGroupsApiBetaGroupsUpdateInstanceRequest {
	return BetaGroupsApiBetaGroupsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BetaGroupResponse
func (a *BetaGroupsApiService) BetaGroupsUpdateInstanceExecute(r BetaGroupsApiBetaGroupsUpdateInstanceRequest) (*BetaGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BetaGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaGroupsApiService.BetaGroupsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaGroups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.betaGroupUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("betaGroupUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.betaGroupUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
