/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BuildsApiService BuildsApi service
type BuildsApiService service

type BuildsApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	fieldsAppEncryptionDeclarations *[]string
}

// the fields to include for returned resources of type appEncryptionDeclarations
func (r BuildsApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest) FieldsAppEncryptionDeclarations(fieldsAppEncryptionDeclarations []string) BuildsApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest {
	r.fieldsAppEncryptionDeclarations = &fieldsAppEncryptionDeclarations
	return r
}

func (r BuildsApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest) Execute() (*AppEncryptionDeclarationResponse, *http.Response, error) {
	return r.ApiService.BuildsAppEncryptionDeclarationGetToOneRelatedExecute(r)
}

/*
BuildsAppEncryptionDeclarationGetToOneRelated Method for BuildsAppEncryptionDeclarationGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest
*/
func (a *BuildsApiService) BuildsAppEncryptionDeclarationGetToOneRelated(ctx context.Context, id string) BuildsApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest {
	return BuildsApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppEncryptionDeclarationResponse
func (a *BuildsApiService) BuildsAppEncryptionDeclarationGetToOneRelatedExecute(r BuildsApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest) (*AppEncryptionDeclarationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppEncryptionDeclarationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsAppEncryptionDeclarationGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/appEncryptionDeclaration"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppEncryptionDeclarations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEncryptionDeclarations]", r.fieldsAppEncryptionDeclarations, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BuildsApiBuildsAppEncryptionDeclarationGetToOneRelationshipRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
}

func (r BuildsApiBuildsAppEncryptionDeclarationGetToOneRelationshipRequest) Execute() (*BuildAppEncryptionDeclarationLinkageResponse, *http.Response, error) {
	return r.ApiService.BuildsAppEncryptionDeclarationGetToOneRelationshipExecute(r)
}

/*
BuildsAppEncryptionDeclarationGetToOneRelationship Method for BuildsAppEncryptionDeclarationGetToOneRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsAppEncryptionDeclarationGetToOneRelationshipRequest
*/
func (a *BuildsApiService) BuildsAppEncryptionDeclarationGetToOneRelationship(ctx context.Context, id string) BuildsApiBuildsAppEncryptionDeclarationGetToOneRelationshipRequest {
	return BuildsApiBuildsAppEncryptionDeclarationGetToOneRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BuildAppEncryptionDeclarationLinkageResponse
func (a *BuildsApiService) BuildsAppEncryptionDeclarationGetToOneRelationshipExecute(r BuildsApiBuildsAppEncryptionDeclarationGetToOneRelationshipRequest) (*BuildAppEncryptionDeclarationLinkageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BuildAppEncryptionDeclarationLinkageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsAppEncryptionDeclarationGetToOneRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/appEncryptionDeclaration"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BuildsApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	buildAppEncryptionDeclarationLinkageRequest *BuildAppEncryptionDeclarationLinkageRequest
}

// Related linkage
func (r BuildsApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest) BuildAppEncryptionDeclarationLinkageRequest(buildAppEncryptionDeclarationLinkageRequest BuildAppEncryptionDeclarationLinkageRequest) BuildsApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest {
	r.buildAppEncryptionDeclarationLinkageRequest = &buildAppEncryptionDeclarationLinkageRequest
	return r
}

func (r BuildsApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.BuildsAppEncryptionDeclarationUpdateToOneRelationshipExecute(r)
}

/*
BuildsAppEncryptionDeclarationUpdateToOneRelationship Method for BuildsAppEncryptionDeclarationUpdateToOneRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest
*/
func (a *BuildsApiService) BuildsAppEncryptionDeclarationUpdateToOneRelationship(ctx context.Context, id string) BuildsApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest {
	return BuildsApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *BuildsApiService) BuildsAppEncryptionDeclarationUpdateToOneRelationshipExecute(r BuildsApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsAppEncryptionDeclarationUpdateToOneRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/appEncryptionDeclaration"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.buildAppEncryptionDeclarationLinkageRequest == nil {
		return nil, reportError("buildAppEncryptionDeclarationLinkageRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildAppEncryptionDeclarationLinkageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BuildsApiBuildsAppGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	fieldsApps *[]string
}

// the fields to include for returned resources of type apps
func (r BuildsApiBuildsAppGetToOneRelatedRequest) FieldsApps(fieldsApps []string) BuildsApiBuildsAppGetToOneRelatedRequest {
	r.fieldsApps = &fieldsApps
	return r
}

func (r BuildsApiBuildsAppGetToOneRelatedRequest) Execute() (*AppResponse, *http.Response, error) {
	return r.ApiService.BuildsAppGetToOneRelatedExecute(r)
}

/*
BuildsAppGetToOneRelated Method for BuildsAppGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsAppGetToOneRelatedRequest
*/
func (a *BuildsApiService) BuildsAppGetToOneRelated(ctx context.Context, id string) BuildsApiBuildsAppGetToOneRelatedRequest {
	return BuildsApiBuildsAppGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppResponse
func (a *BuildsApiService) BuildsAppGetToOneRelatedExecute(r BuildsApiBuildsAppGetToOneRelatedRequest) (*AppResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsAppGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/app"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	fieldsAppStoreVersionExperiments *[]string
	fieldsAgeRatingDeclarations *[]string
	fieldsAppStoreVersionSubmissions *[]string
	fieldsAppStoreReviewDetails *[]string
	fieldsAppStoreVersions *[]string
	fieldsApps *[]string
	fieldsRoutingAppCoverages *[]string
	fieldsAppClipDefaultExperiences *[]string
	fieldsAppStoreVersionPhasedReleases *[]string
	fieldsBuilds *[]string
	fieldsAppStoreVersionLocalizations *[]string
	limitAppStoreVersionLocalizations *int32
	limitAppStoreVersionExperiments *int32
	include *[]string
}

// the fields to include for returned resources of type appStoreVersionExperiments
func (r BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreVersionExperiments(fieldsAppStoreVersionExperiments []string) BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreVersionExperiments = &fieldsAppStoreVersionExperiments
	return r
}

// the fields to include for returned resources of type ageRatingDeclarations
func (r BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsAgeRatingDeclarations(fieldsAgeRatingDeclarations []string) BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAgeRatingDeclarations = &fieldsAgeRatingDeclarations
	return r
}

// the fields to include for returned resources of type appStoreVersionSubmissions
func (r BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreVersionSubmissions(fieldsAppStoreVersionSubmissions []string) BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreVersionSubmissions = &fieldsAppStoreVersionSubmissions
	return r
}

// the fields to include for returned resources of type appStoreReviewDetails
func (r BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreReviewDetails(fieldsAppStoreReviewDetails []string) BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreReviewDetails = &fieldsAppStoreReviewDetails
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type apps
func (r BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsApps(fieldsApps []string) BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// the fields to include for returned resources of type routingAppCoverages
func (r BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsRoutingAppCoverages(fieldsRoutingAppCoverages []string) BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsRoutingAppCoverages = &fieldsRoutingAppCoverages
	return r
}

// the fields to include for returned resources of type appClipDefaultExperiences
func (r BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsAppClipDefaultExperiences(fieldsAppClipDefaultExperiences []string) BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppClipDefaultExperiences = &fieldsAppClipDefaultExperiences
	return r
}

// the fields to include for returned resources of type appStoreVersionPhasedReleases
func (r BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreVersionPhasedReleases(fieldsAppStoreVersionPhasedReleases []string) BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreVersionPhasedReleases = &fieldsAppStoreVersionPhasedReleases
	return r
}

// the fields to include for returned resources of type builds
func (r BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsBuilds(fieldsBuilds []string) BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// the fields to include for returned resources of type appStoreVersionLocalizations
func (r BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreVersionLocalizations(fieldsAppStoreVersionLocalizations []string) BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreVersionLocalizations = &fieldsAppStoreVersionLocalizations
	return r
}

// maximum number of related appStoreVersionLocalizations returned (when they are included)
func (r BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest) LimitAppStoreVersionLocalizations(limitAppStoreVersionLocalizations int32) BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.limitAppStoreVersionLocalizations = &limitAppStoreVersionLocalizations
	return r
}

// maximum number of related appStoreVersionExperiments returned (when they are included)
func (r BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest) LimitAppStoreVersionExperiments(limitAppStoreVersionExperiments int32) BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.limitAppStoreVersionExperiments = &limitAppStoreVersionExperiments
	return r
}

// comma-separated list of relationships to include
func (r BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest) Include(include []string) BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.include = &include
	return r
}

func (r BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest) Execute() (*AppStoreVersionResponse, *http.Response, error) {
	return r.ApiService.BuildsAppStoreVersionGetToOneRelatedExecute(r)
}

/*
BuildsAppStoreVersionGetToOneRelated Method for BuildsAppStoreVersionGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest
*/
func (a *BuildsApiService) BuildsAppStoreVersionGetToOneRelated(ctx context.Context, id string) BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest {
	return BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppStoreVersionResponse
func (a *BuildsApiService) BuildsAppStoreVersionGetToOneRelatedExecute(r BuildsApiBuildsAppStoreVersionGetToOneRelatedRequest) (*AppStoreVersionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppStoreVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsAppStoreVersionGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/appStoreVersion"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppStoreVersionExperiments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperiments]", r.fieldsAppStoreVersionExperiments, "csv")
	}
	if r.fieldsAgeRatingDeclarations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ageRatingDeclarations]", r.fieldsAgeRatingDeclarations, "csv")
	}
	if r.fieldsAppStoreVersionSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionSubmissions]", r.fieldsAppStoreVersionSubmissions, "csv")
	}
	if r.fieldsAppStoreReviewDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreReviewDetails]", r.fieldsAppStoreReviewDetails, "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	if r.fieldsRoutingAppCoverages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[routingAppCoverages]", r.fieldsRoutingAppCoverages, "csv")
	}
	if r.fieldsAppClipDefaultExperiences != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipDefaultExperiences]", r.fieldsAppClipDefaultExperiences, "csv")
	}
	if r.fieldsAppStoreVersionPhasedReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionPhasedReleases]", r.fieldsAppStoreVersionPhasedReleases, "csv")
	}
	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	if r.fieldsAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionLocalizations]", r.fieldsAppStoreVersionLocalizations, "csv")
	}
	if r.limitAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreVersionLocalizations]", r.limitAppStoreVersionLocalizations, "")
	}
	if r.limitAppStoreVersionExperiments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreVersionExperiments]", r.limitAppStoreVersionExperiments, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BuildsApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	fieldsBetaAppReviewSubmissions *[]string
}

// the fields to include for returned resources of type betaAppReviewSubmissions
func (r BuildsApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest) FieldsBetaAppReviewSubmissions(fieldsBetaAppReviewSubmissions []string) BuildsApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest {
	r.fieldsBetaAppReviewSubmissions = &fieldsBetaAppReviewSubmissions
	return r
}

func (r BuildsApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest) Execute() (*BetaAppReviewSubmissionResponse, *http.Response, error) {
	return r.ApiService.BuildsBetaAppReviewSubmissionGetToOneRelatedExecute(r)
}

/*
BuildsBetaAppReviewSubmissionGetToOneRelated Method for BuildsBetaAppReviewSubmissionGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest
*/
func (a *BuildsApiService) BuildsBetaAppReviewSubmissionGetToOneRelated(ctx context.Context, id string) BuildsApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest {
	return BuildsApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BetaAppReviewSubmissionResponse
func (a *BuildsApiService) BuildsBetaAppReviewSubmissionGetToOneRelatedExecute(r BuildsApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest) (*BetaAppReviewSubmissionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BetaAppReviewSubmissionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsBetaAppReviewSubmissionGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/betaAppReviewSubmission"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBetaAppReviewSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaAppReviewSubmissions]", r.fieldsBetaAppReviewSubmissions, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BuildsApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	fieldsBetaBuildLocalizations *[]string
	limit *int32
}

// the fields to include for returned resources of type betaBuildLocalizations
func (r BuildsApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest) FieldsBetaBuildLocalizations(fieldsBetaBuildLocalizations []string) BuildsApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest {
	r.fieldsBetaBuildLocalizations = &fieldsBetaBuildLocalizations
	return r
}

// maximum resources per page
func (r BuildsApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest) Limit(limit int32) BuildsApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r BuildsApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest) Execute() (*BetaBuildLocalizationsResponse, *http.Response, error) {
	return r.ApiService.BuildsBetaBuildLocalizationsGetToManyRelatedExecute(r)
}

/*
BuildsBetaBuildLocalizationsGetToManyRelated Method for BuildsBetaBuildLocalizationsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest
*/
func (a *BuildsApiService) BuildsBetaBuildLocalizationsGetToManyRelated(ctx context.Context, id string) BuildsApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest {
	return BuildsApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BetaBuildLocalizationsResponse
func (a *BuildsApiService) BuildsBetaBuildLocalizationsGetToManyRelatedExecute(r BuildsApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest) (*BetaBuildLocalizationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BetaBuildLocalizationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsBetaBuildLocalizationsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/betaBuildLocalizations"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBetaBuildLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaBuildLocalizations]", r.fieldsBetaBuildLocalizations, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BuildsApiBuildsBetaGroupsCreateToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	buildBetaGroupsLinkagesRequest *BuildBetaGroupsLinkagesRequest
}

// List of related linkages
func (r BuildsApiBuildsBetaGroupsCreateToManyRelationshipRequest) BuildBetaGroupsLinkagesRequest(buildBetaGroupsLinkagesRequest BuildBetaGroupsLinkagesRequest) BuildsApiBuildsBetaGroupsCreateToManyRelationshipRequest {
	r.buildBetaGroupsLinkagesRequest = &buildBetaGroupsLinkagesRequest
	return r
}

func (r BuildsApiBuildsBetaGroupsCreateToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.BuildsBetaGroupsCreateToManyRelationshipExecute(r)
}

/*
BuildsBetaGroupsCreateToManyRelationship Method for BuildsBetaGroupsCreateToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsBetaGroupsCreateToManyRelationshipRequest
*/
func (a *BuildsApiService) BuildsBetaGroupsCreateToManyRelationship(ctx context.Context, id string) BuildsApiBuildsBetaGroupsCreateToManyRelationshipRequest {
	return BuildsApiBuildsBetaGroupsCreateToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *BuildsApiService) BuildsBetaGroupsCreateToManyRelationshipExecute(r BuildsApiBuildsBetaGroupsCreateToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsBetaGroupsCreateToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/betaGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.buildBetaGroupsLinkagesRequest == nil {
		return nil, reportError("buildBetaGroupsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildBetaGroupsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BuildsApiBuildsBetaGroupsDeleteToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	buildBetaGroupsLinkagesRequest *BuildBetaGroupsLinkagesRequest
}

// List of related linkages
func (r BuildsApiBuildsBetaGroupsDeleteToManyRelationshipRequest) BuildBetaGroupsLinkagesRequest(buildBetaGroupsLinkagesRequest BuildBetaGroupsLinkagesRequest) BuildsApiBuildsBetaGroupsDeleteToManyRelationshipRequest {
	r.buildBetaGroupsLinkagesRequest = &buildBetaGroupsLinkagesRequest
	return r
}

func (r BuildsApiBuildsBetaGroupsDeleteToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.BuildsBetaGroupsDeleteToManyRelationshipExecute(r)
}

/*
BuildsBetaGroupsDeleteToManyRelationship Method for BuildsBetaGroupsDeleteToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsBetaGroupsDeleteToManyRelationshipRequest
*/
func (a *BuildsApiService) BuildsBetaGroupsDeleteToManyRelationship(ctx context.Context, id string) BuildsApiBuildsBetaGroupsDeleteToManyRelationshipRequest {
	return BuildsApiBuildsBetaGroupsDeleteToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *BuildsApiService) BuildsBetaGroupsDeleteToManyRelationshipExecute(r BuildsApiBuildsBetaGroupsDeleteToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsBetaGroupsDeleteToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/betaGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.buildBetaGroupsLinkagesRequest == nil {
		return nil, reportError("buildBetaGroupsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildBetaGroupsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BuildsApiBuildsBuildBetaDetailGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	fieldsBuildBetaDetails *[]string
}

// the fields to include for returned resources of type buildBetaDetails
func (r BuildsApiBuildsBuildBetaDetailGetToOneRelatedRequest) FieldsBuildBetaDetails(fieldsBuildBetaDetails []string) BuildsApiBuildsBuildBetaDetailGetToOneRelatedRequest {
	r.fieldsBuildBetaDetails = &fieldsBuildBetaDetails
	return r
}

func (r BuildsApiBuildsBuildBetaDetailGetToOneRelatedRequest) Execute() (*BuildBetaDetailResponse, *http.Response, error) {
	return r.ApiService.BuildsBuildBetaDetailGetToOneRelatedExecute(r)
}

/*
BuildsBuildBetaDetailGetToOneRelated Method for BuildsBuildBetaDetailGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsBuildBetaDetailGetToOneRelatedRequest
*/
func (a *BuildsApiService) BuildsBuildBetaDetailGetToOneRelated(ctx context.Context, id string) BuildsApiBuildsBuildBetaDetailGetToOneRelatedRequest {
	return BuildsApiBuildsBuildBetaDetailGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BuildBetaDetailResponse
func (a *BuildsApiService) BuildsBuildBetaDetailGetToOneRelatedExecute(r BuildsApiBuildsBuildBetaDetailGetToOneRelatedRequest) (*BuildBetaDetailResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BuildBetaDetailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsBuildBetaDetailGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/buildBetaDetail"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBuildBetaDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[buildBetaDetails]", r.fieldsBuildBetaDetails, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BuildsApiBuildsDiagnosticSignaturesGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	filterDiagnosticType *[]string
	fieldsDiagnosticSignatures *[]string
	limit *int32
}

// filter by attribute &#39;diagnosticType&#39;
func (r BuildsApiBuildsDiagnosticSignaturesGetToManyRelatedRequest) FilterDiagnosticType(filterDiagnosticType []string) BuildsApiBuildsDiagnosticSignaturesGetToManyRelatedRequest {
	r.filterDiagnosticType = &filterDiagnosticType
	return r
}

// the fields to include for returned resources of type diagnosticSignatures
func (r BuildsApiBuildsDiagnosticSignaturesGetToManyRelatedRequest) FieldsDiagnosticSignatures(fieldsDiagnosticSignatures []string) BuildsApiBuildsDiagnosticSignaturesGetToManyRelatedRequest {
	r.fieldsDiagnosticSignatures = &fieldsDiagnosticSignatures
	return r
}

// maximum resources per page
func (r BuildsApiBuildsDiagnosticSignaturesGetToManyRelatedRequest) Limit(limit int32) BuildsApiBuildsDiagnosticSignaturesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r BuildsApiBuildsDiagnosticSignaturesGetToManyRelatedRequest) Execute() (*DiagnosticSignaturesResponse, *http.Response, error) {
	return r.ApiService.BuildsDiagnosticSignaturesGetToManyRelatedExecute(r)
}

/*
BuildsDiagnosticSignaturesGetToManyRelated Method for BuildsDiagnosticSignaturesGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsDiagnosticSignaturesGetToManyRelatedRequest
*/
func (a *BuildsApiService) BuildsDiagnosticSignaturesGetToManyRelated(ctx context.Context, id string) BuildsApiBuildsDiagnosticSignaturesGetToManyRelatedRequest {
	return BuildsApiBuildsDiagnosticSignaturesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DiagnosticSignaturesResponse
func (a *BuildsApiService) BuildsDiagnosticSignaturesGetToManyRelatedExecute(r BuildsApiBuildsDiagnosticSignaturesGetToManyRelatedRequest) (*DiagnosticSignaturesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DiagnosticSignaturesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsDiagnosticSignaturesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/diagnosticSignatures"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterDiagnosticType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[diagnosticType]", r.filterDiagnosticType, "csv")
	}
	if r.fieldsDiagnosticSignatures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[diagnosticSignatures]", r.fieldsDiagnosticSignatures, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BuildsApiBuildsGetCollectionRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	filterBetaAppReviewSubmissionBetaReviewState *[]string
	filterBuildAudienceType *[]string
	filterExpired *[]string
	filterPreReleaseVersionPlatform *[]string
	filterPreReleaseVersionVersion *[]string
	filterProcessingState *[]string
	filterUsesNonExemptEncryption *[]string
	filterVersion *[]string
	filterApp *[]string
	filterAppStoreVersion *[]string
	filterBetaGroups *[]string
	filterPreReleaseVersion *[]string
	filterId *[]string
	sort *[]string
	fieldsBuilds *[]string
	limit *int32
	include *[]string
	fieldsDiagnosticSignatures *[]string
	fieldsBuildIcons *[]string
	fieldsBuildBetaDetails *[]string
	fieldsBetaAppReviewSubmissions *[]string
	fieldsBetaTesters *[]string
	fieldsAppStoreVersions *[]string
	fieldsBetaBuildLocalizations *[]string
	fieldsPreReleaseVersions *[]string
	fieldsAppEncryptionDeclarations *[]string
	fieldsApps *[]string
	fieldsPerfPowerMetrics *[]string
	limitBetaBuildLocalizations *int32
	limitBetaGroups *int32
	limitBuildBundles *int32
	limitIcons *int32
	limitIndividualTesters *int32
}

// filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39;
func (r BuildsApiBuildsGetCollectionRequest) FilterBetaAppReviewSubmissionBetaReviewState(filterBetaAppReviewSubmissionBetaReviewState []string) BuildsApiBuildsGetCollectionRequest {
	r.filterBetaAppReviewSubmissionBetaReviewState = &filterBetaAppReviewSubmissionBetaReviewState
	return r
}

// filter by attribute &#39;buildAudienceType&#39;
func (r BuildsApiBuildsGetCollectionRequest) FilterBuildAudienceType(filterBuildAudienceType []string) BuildsApiBuildsGetCollectionRequest {
	r.filterBuildAudienceType = &filterBuildAudienceType
	return r
}

// filter by attribute &#39;expired&#39;
func (r BuildsApiBuildsGetCollectionRequest) FilterExpired(filterExpired []string) BuildsApiBuildsGetCollectionRequest {
	r.filterExpired = &filterExpired
	return r
}

// filter by attribute &#39;preReleaseVersion.platform&#39;
func (r BuildsApiBuildsGetCollectionRequest) FilterPreReleaseVersionPlatform(filterPreReleaseVersionPlatform []string) BuildsApiBuildsGetCollectionRequest {
	r.filterPreReleaseVersionPlatform = &filterPreReleaseVersionPlatform
	return r
}

// filter by attribute &#39;preReleaseVersion.version&#39;
func (r BuildsApiBuildsGetCollectionRequest) FilterPreReleaseVersionVersion(filterPreReleaseVersionVersion []string) BuildsApiBuildsGetCollectionRequest {
	r.filterPreReleaseVersionVersion = &filterPreReleaseVersionVersion
	return r
}

// filter by attribute &#39;processingState&#39;
func (r BuildsApiBuildsGetCollectionRequest) FilterProcessingState(filterProcessingState []string) BuildsApiBuildsGetCollectionRequest {
	r.filterProcessingState = &filterProcessingState
	return r
}

// filter by attribute &#39;usesNonExemptEncryption&#39;
func (r BuildsApiBuildsGetCollectionRequest) FilterUsesNonExemptEncryption(filterUsesNonExemptEncryption []string) BuildsApiBuildsGetCollectionRequest {
	r.filterUsesNonExemptEncryption = &filterUsesNonExemptEncryption
	return r
}

// filter by attribute &#39;version&#39;
func (r BuildsApiBuildsGetCollectionRequest) FilterVersion(filterVersion []string) BuildsApiBuildsGetCollectionRequest {
	r.filterVersion = &filterVersion
	return r
}

// filter by id(s) of related &#39;app&#39;
func (r BuildsApiBuildsGetCollectionRequest) FilterApp(filterApp []string) BuildsApiBuildsGetCollectionRequest {
	r.filterApp = &filterApp
	return r
}

// filter by id(s) of related &#39;appStoreVersion&#39;
func (r BuildsApiBuildsGetCollectionRequest) FilterAppStoreVersion(filterAppStoreVersion []string) BuildsApiBuildsGetCollectionRequest {
	r.filterAppStoreVersion = &filterAppStoreVersion
	return r
}

// filter by id(s) of related &#39;betaGroups&#39;
func (r BuildsApiBuildsGetCollectionRequest) FilterBetaGroups(filterBetaGroups []string) BuildsApiBuildsGetCollectionRequest {
	r.filterBetaGroups = &filterBetaGroups
	return r
}

// filter by id(s) of related &#39;preReleaseVersion&#39;
func (r BuildsApiBuildsGetCollectionRequest) FilterPreReleaseVersion(filterPreReleaseVersion []string) BuildsApiBuildsGetCollectionRequest {
	r.filterPreReleaseVersion = &filterPreReleaseVersion
	return r
}

// filter by id(s)
func (r BuildsApiBuildsGetCollectionRequest) FilterId(filterId []string) BuildsApiBuildsGetCollectionRequest {
	r.filterId = &filterId
	return r
}

// comma-separated list of sort expressions; resources will be sorted as specified
func (r BuildsApiBuildsGetCollectionRequest) Sort(sort []string) BuildsApiBuildsGetCollectionRequest {
	r.sort = &sort
	return r
}

// the fields to include for returned resources of type builds
func (r BuildsApiBuildsGetCollectionRequest) FieldsBuilds(fieldsBuilds []string) BuildsApiBuildsGetCollectionRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// maximum resources per page
func (r BuildsApiBuildsGetCollectionRequest) Limit(limit int32) BuildsApiBuildsGetCollectionRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r BuildsApiBuildsGetCollectionRequest) Include(include []string) BuildsApiBuildsGetCollectionRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type diagnosticSignatures
func (r BuildsApiBuildsGetCollectionRequest) FieldsDiagnosticSignatures(fieldsDiagnosticSignatures []string) BuildsApiBuildsGetCollectionRequest {
	r.fieldsDiagnosticSignatures = &fieldsDiagnosticSignatures
	return r
}

// the fields to include for returned resources of type buildIcons
func (r BuildsApiBuildsGetCollectionRequest) FieldsBuildIcons(fieldsBuildIcons []string) BuildsApiBuildsGetCollectionRequest {
	r.fieldsBuildIcons = &fieldsBuildIcons
	return r
}

// the fields to include for returned resources of type buildBetaDetails
func (r BuildsApiBuildsGetCollectionRequest) FieldsBuildBetaDetails(fieldsBuildBetaDetails []string) BuildsApiBuildsGetCollectionRequest {
	r.fieldsBuildBetaDetails = &fieldsBuildBetaDetails
	return r
}

// the fields to include for returned resources of type betaAppReviewSubmissions
func (r BuildsApiBuildsGetCollectionRequest) FieldsBetaAppReviewSubmissions(fieldsBetaAppReviewSubmissions []string) BuildsApiBuildsGetCollectionRequest {
	r.fieldsBetaAppReviewSubmissions = &fieldsBetaAppReviewSubmissions
	return r
}

// the fields to include for returned resources of type betaTesters
func (r BuildsApiBuildsGetCollectionRequest) FieldsBetaTesters(fieldsBetaTesters []string) BuildsApiBuildsGetCollectionRequest {
	r.fieldsBetaTesters = &fieldsBetaTesters
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r BuildsApiBuildsGetCollectionRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) BuildsApiBuildsGetCollectionRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type betaBuildLocalizations
func (r BuildsApiBuildsGetCollectionRequest) FieldsBetaBuildLocalizations(fieldsBetaBuildLocalizations []string) BuildsApiBuildsGetCollectionRequest {
	r.fieldsBetaBuildLocalizations = &fieldsBetaBuildLocalizations
	return r
}

// the fields to include for returned resources of type preReleaseVersions
func (r BuildsApiBuildsGetCollectionRequest) FieldsPreReleaseVersions(fieldsPreReleaseVersions []string) BuildsApiBuildsGetCollectionRequest {
	r.fieldsPreReleaseVersions = &fieldsPreReleaseVersions
	return r
}

// the fields to include for returned resources of type appEncryptionDeclarations
func (r BuildsApiBuildsGetCollectionRequest) FieldsAppEncryptionDeclarations(fieldsAppEncryptionDeclarations []string) BuildsApiBuildsGetCollectionRequest {
	r.fieldsAppEncryptionDeclarations = &fieldsAppEncryptionDeclarations
	return r
}

// the fields to include for returned resources of type apps
func (r BuildsApiBuildsGetCollectionRequest) FieldsApps(fieldsApps []string) BuildsApiBuildsGetCollectionRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// the fields to include for returned resources of type perfPowerMetrics
func (r BuildsApiBuildsGetCollectionRequest) FieldsPerfPowerMetrics(fieldsPerfPowerMetrics []string) BuildsApiBuildsGetCollectionRequest {
	r.fieldsPerfPowerMetrics = &fieldsPerfPowerMetrics
	return r
}

// maximum number of related betaBuildLocalizations returned (when they are included)
func (r BuildsApiBuildsGetCollectionRequest) LimitBetaBuildLocalizations(limitBetaBuildLocalizations int32) BuildsApiBuildsGetCollectionRequest {
	r.limitBetaBuildLocalizations = &limitBetaBuildLocalizations
	return r
}

// maximum number of related betaGroups returned (when they are included)
func (r BuildsApiBuildsGetCollectionRequest) LimitBetaGroups(limitBetaGroups int32) BuildsApiBuildsGetCollectionRequest {
	r.limitBetaGroups = &limitBetaGroups
	return r
}

// maximum number of related buildBundles returned (when they are included)
func (r BuildsApiBuildsGetCollectionRequest) LimitBuildBundles(limitBuildBundles int32) BuildsApiBuildsGetCollectionRequest {
	r.limitBuildBundles = &limitBuildBundles
	return r
}

// maximum number of related icons returned (when they are included)
func (r BuildsApiBuildsGetCollectionRequest) LimitIcons(limitIcons int32) BuildsApiBuildsGetCollectionRequest {
	r.limitIcons = &limitIcons
	return r
}

// maximum number of related individualTesters returned (when they are included)
func (r BuildsApiBuildsGetCollectionRequest) LimitIndividualTesters(limitIndividualTesters int32) BuildsApiBuildsGetCollectionRequest {
	r.limitIndividualTesters = &limitIndividualTesters
	return r
}

func (r BuildsApiBuildsGetCollectionRequest) Execute() (*BuildsResponse, *http.Response, error) {
	return r.ApiService.BuildsGetCollectionExecute(r)
}

/*
BuildsGetCollection Method for BuildsGetCollection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return BuildsApiBuildsGetCollectionRequest
*/
func (a *BuildsApiService) BuildsGetCollection(ctx context.Context) BuildsApiBuildsGetCollectionRequest {
	return BuildsApiBuildsGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BuildsResponse
func (a *BuildsApiService) BuildsGetCollectionExecute(r BuildsApiBuildsGetCollectionRequest) (*BuildsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BuildsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterBetaAppReviewSubmissionBetaReviewState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[betaAppReviewSubmission.betaReviewState]", r.filterBetaAppReviewSubmissionBetaReviewState, "csv")
	}
	if r.filterBuildAudienceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[buildAudienceType]", r.filterBuildAudienceType, "csv")
	}
	if r.filterExpired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[expired]", r.filterExpired, "csv")
	}
	if r.filterPreReleaseVersionPlatform != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[preReleaseVersion.platform]", r.filterPreReleaseVersionPlatform, "csv")
	}
	if r.filterPreReleaseVersionVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[preReleaseVersion.version]", r.filterPreReleaseVersionVersion, "csv")
	}
	if r.filterProcessingState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[processingState]", r.filterProcessingState, "csv")
	}
	if r.filterUsesNonExemptEncryption != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[usesNonExemptEncryption]", r.filterUsesNonExemptEncryption, "csv")
	}
	if r.filterVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[version]", r.filterVersion, "csv")
	}
	if r.filterApp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[app]", r.filterApp, "csv")
	}
	if r.filterAppStoreVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[appStoreVersion]", r.filterAppStoreVersion, "csv")
	}
	if r.filterBetaGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[betaGroups]", r.filterBetaGroups, "csv")
	}
	if r.filterPreReleaseVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[preReleaseVersion]", r.filterPreReleaseVersion, "csv")
	}
	if r.filterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[id]", r.filterId, "csv")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "csv")
	}
	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsDiagnosticSignatures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[diagnosticSignatures]", r.fieldsDiagnosticSignatures, "csv")
	}
	if r.fieldsBuildIcons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[buildIcons]", r.fieldsBuildIcons, "csv")
	}
	if r.fieldsBuildBetaDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[buildBetaDetails]", r.fieldsBuildBetaDetails, "csv")
	}
	if r.fieldsBetaAppReviewSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaAppReviewSubmissions]", r.fieldsBetaAppReviewSubmissions, "csv")
	}
	if r.fieldsBetaTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaTesters]", r.fieldsBetaTesters, "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "csv")
	}
	if r.fieldsBetaBuildLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaBuildLocalizations]", r.fieldsBetaBuildLocalizations, "csv")
	}
	if r.fieldsPreReleaseVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[preReleaseVersions]", r.fieldsPreReleaseVersions, "csv")
	}
	if r.fieldsAppEncryptionDeclarations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEncryptionDeclarations]", r.fieldsAppEncryptionDeclarations, "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	if r.fieldsPerfPowerMetrics != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[perfPowerMetrics]", r.fieldsPerfPowerMetrics, "csv")
	}
	if r.limitBetaBuildLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[betaBuildLocalizations]", r.limitBetaBuildLocalizations, "")
	}
	if r.limitBetaGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[betaGroups]", r.limitBetaGroups, "")
	}
	if r.limitBuildBundles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[buildBundles]", r.limitBuildBundles, "")
	}
	if r.limitIcons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[icons]", r.limitIcons, "")
	}
	if r.limitIndividualTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[individualTesters]", r.limitIndividualTesters, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BuildsApiBuildsGetInstanceRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	fieldsBuilds *[]string
	include *[]string
	fieldsDiagnosticSignatures *[]string
	fieldsBuildIcons *[]string
	fieldsBuildBetaDetails *[]string
	fieldsBetaAppReviewSubmissions *[]string
	fieldsBetaTesters *[]string
	fieldsAppStoreVersions *[]string
	fieldsBetaBuildLocalizations *[]string
	fieldsPreReleaseVersions *[]string
	fieldsAppEncryptionDeclarations *[]string
	fieldsApps *[]string
	fieldsPerfPowerMetrics *[]string
	limitBetaBuildLocalizations *int32
	limitBetaGroups *int32
	limitBuildBundles *int32
	limitIcons *int32
	limitIndividualTesters *int32
}

// the fields to include for returned resources of type builds
func (r BuildsApiBuildsGetInstanceRequest) FieldsBuilds(fieldsBuilds []string) BuildsApiBuildsGetInstanceRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// comma-separated list of relationships to include
func (r BuildsApiBuildsGetInstanceRequest) Include(include []string) BuildsApiBuildsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type diagnosticSignatures
func (r BuildsApiBuildsGetInstanceRequest) FieldsDiagnosticSignatures(fieldsDiagnosticSignatures []string) BuildsApiBuildsGetInstanceRequest {
	r.fieldsDiagnosticSignatures = &fieldsDiagnosticSignatures
	return r
}

// the fields to include for returned resources of type buildIcons
func (r BuildsApiBuildsGetInstanceRequest) FieldsBuildIcons(fieldsBuildIcons []string) BuildsApiBuildsGetInstanceRequest {
	r.fieldsBuildIcons = &fieldsBuildIcons
	return r
}

// the fields to include for returned resources of type buildBetaDetails
func (r BuildsApiBuildsGetInstanceRequest) FieldsBuildBetaDetails(fieldsBuildBetaDetails []string) BuildsApiBuildsGetInstanceRequest {
	r.fieldsBuildBetaDetails = &fieldsBuildBetaDetails
	return r
}

// the fields to include for returned resources of type betaAppReviewSubmissions
func (r BuildsApiBuildsGetInstanceRequest) FieldsBetaAppReviewSubmissions(fieldsBetaAppReviewSubmissions []string) BuildsApiBuildsGetInstanceRequest {
	r.fieldsBetaAppReviewSubmissions = &fieldsBetaAppReviewSubmissions
	return r
}

// the fields to include for returned resources of type betaTesters
func (r BuildsApiBuildsGetInstanceRequest) FieldsBetaTesters(fieldsBetaTesters []string) BuildsApiBuildsGetInstanceRequest {
	r.fieldsBetaTesters = &fieldsBetaTesters
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r BuildsApiBuildsGetInstanceRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) BuildsApiBuildsGetInstanceRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type betaBuildLocalizations
func (r BuildsApiBuildsGetInstanceRequest) FieldsBetaBuildLocalizations(fieldsBetaBuildLocalizations []string) BuildsApiBuildsGetInstanceRequest {
	r.fieldsBetaBuildLocalizations = &fieldsBetaBuildLocalizations
	return r
}

// the fields to include for returned resources of type preReleaseVersions
func (r BuildsApiBuildsGetInstanceRequest) FieldsPreReleaseVersions(fieldsPreReleaseVersions []string) BuildsApiBuildsGetInstanceRequest {
	r.fieldsPreReleaseVersions = &fieldsPreReleaseVersions
	return r
}

// the fields to include for returned resources of type appEncryptionDeclarations
func (r BuildsApiBuildsGetInstanceRequest) FieldsAppEncryptionDeclarations(fieldsAppEncryptionDeclarations []string) BuildsApiBuildsGetInstanceRequest {
	r.fieldsAppEncryptionDeclarations = &fieldsAppEncryptionDeclarations
	return r
}

// the fields to include for returned resources of type apps
func (r BuildsApiBuildsGetInstanceRequest) FieldsApps(fieldsApps []string) BuildsApiBuildsGetInstanceRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// the fields to include for returned resources of type perfPowerMetrics
func (r BuildsApiBuildsGetInstanceRequest) FieldsPerfPowerMetrics(fieldsPerfPowerMetrics []string) BuildsApiBuildsGetInstanceRequest {
	r.fieldsPerfPowerMetrics = &fieldsPerfPowerMetrics
	return r
}

// maximum number of related betaBuildLocalizations returned (when they are included)
func (r BuildsApiBuildsGetInstanceRequest) LimitBetaBuildLocalizations(limitBetaBuildLocalizations int32) BuildsApiBuildsGetInstanceRequest {
	r.limitBetaBuildLocalizations = &limitBetaBuildLocalizations
	return r
}

// maximum number of related betaGroups returned (when they are included)
func (r BuildsApiBuildsGetInstanceRequest) LimitBetaGroups(limitBetaGroups int32) BuildsApiBuildsGetInstanceRequest {
	r.limitBetaGroups = &limitBetaGroups
	return r
}

// maximum number of related buildBundles returned (when they are included)
func (r BuildsApiBuildsGetInstanceRequest) LimitBuildBundles(limitBuildBundles int32) BuildsApiBuildsGetInstanceRequest {
	r.limitBuildBundles = &limitBuildBundles
	return r
}

// maximum number of related icons returned (when they are included)
func (r BuildsApiBuildsGetInstanceRequest) LimitIcons(limitIcons int32) BuildsApiBuildsGetInstanceRequest {
	r.limitIcons = &limitIcons
	return r
}

// maximum number of related individualTesters returned (when they are included)
func (r BuildsApiBuildsGetInstanceRequest) LimitIndividualTesters(limitIndividualTesters int32) BuildsApiBuildsGetInstanceRequest {
	r.limitIndividualTesters = &limitIndividualTesters
	return r
}

func (r BuildsApiBuildsGetInstanceRequest) Execute() (*BuildResponse, *http.Response, error) {
	return r.ApiService.BuildsGetInstanceExecute(r)
}

/*
BuildsGetInstance Method for BuildsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsGetInstanceRequest
*/
func (a *BuildsApiService) BuildsGetInstance(ctx context.Context, id string) BuildsApiBuildsGetInstanceRequest {
	return BuildsApiBuildsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BuildResponse
func (a *BuildsApiService) BuildsGetInstanceExecute(r BuildsApiBuildsGetInstanceRequest) (*BuildResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BuildResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsDiagnosticSignatures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[diagnosticSignatures]", r.fieldsDiagnosticSignatures, "csv")
	}
	if r.fieldsBuildIcons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[buildIcons]", r.fieldsBuildIcons, "csv")
	}
	if r.fieldsBuildBetaDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[buildBetaDetails]", r.fieldsBuildBetaDetails, "csv")
	}
	if r.fieldsBetaAppReviewSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaAppReviewSubmissions]", r.fieldsBetaAppReviewSubmissions, "csv")
	}
	if r.fieldsBetaTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaTesters]", r.fieldsBetaTesters, "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "csv")
	}
	if r.fieldsBetaBuildLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaBuildLocalizations]", r.fieldsBetaBuildLocalizations, "csv")
	}
	if r.fieldsPreReleaseVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[preReleaseVersions]", r.fieldsPreReleaseVersions, "csv")
	}
	if r.fieldsAppEncryptionDeclarations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEncryptionDeclarations]", r.fieldsAppEncryptionDeclarations, "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	if r.fieldsPerfPowerMetrics != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[perfPowerMetrics]", r.fieldsPerfPowerMetrics, "csv")
	}
	if r.limitBetaBuildLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[betaBuildLocalizations]", r.limitBetaBuildLocalizations, "")
	}
	if r.limitBetaGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[betaGroups]", r.limitBetaGroups, "")
	}
	if r.limitBuildBundles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[buildBundles]", r.limitBuildBundles, "")
	}
	if r.limitIcons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[icons]", r.limitIcons, "")
	}
	if r.limitIndividualTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[individualTesters]", r.limitIndividualTesters, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BuildsApiBuildsIconsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	fieldsBuildIcons *[]string
	limit *int32
}

// the fields to include for returned resources of type buildIcons
func (r BuildsApiBuildsIconsGetToManyRelatedRequest) FieldsBuildIcons(fieldsBuildIcons []string) BuildsApiBuildsIconsGetToManyRelatedRequest {
	r.fieldsBuildIcons = &fieldsBuildIcons
	return r
}

// maximum resources per page
func (r BuildsApiBuildsIconsGetToManyRelatedRequest) Limit(limit int32) BuildsApiBuildsIconsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r BuildsApiBuildsIconsGetToManyRelatedRequest) Execute() (*BuildIconsResponse, *http.Response, error) {
	return r.ApiService.BuildsIconsGetToManyRelatedExecute(r)
}

/*
BuildsIconsGetToManyRelated Method for BuildsIconsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsIconsGetToManyRelatedRequest
*/
func (a *BuildsApiService) BuildsIconsGetToManyRelated(ctx context.Context, id string) BuildsApiBuildsIconsGetToManyRelatedRequest {
	return BuildsApiBuildsIconsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BuildIconsResponse
func (a *BuildsApiService) BuildsIconsGetToManyRelatedExecute(r BuildsApiBuildsIconsGetToManyRelatedRequest) (*BuildIconsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BuildIconsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsIconsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/icons"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBuildIcons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[buildIcons]", r.fieldsBuildIcons, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BuildsApiBuildsIndividualTestersCreateToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	buildIndividualTestersLinkagesRequest *BuildIndividualTestersLinkagesRequest
}

// List of related linkages
func (r BuildsApiBuildsIndividualTestersCreateToManyRelationshipRequest) BuildIndividualTestersLinkagesRequest(buildIndividualTestersLinkagesRequest BuildIndividualTestersLinkagesRequest) BuildsApiBuildsIndividualTestersCreateToManyRelationshipRequest {
	r.buildIndividualTestersLinkagesRequest = &buildIndividualTestersLinkagesRequest
	return r
}

func (r BuildsApiBuildsIndividualTestersCreateToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.BuildsIndividualTestersCreateToManyRelationshipExecute(r)
}

/*
BuildsIndividualTestersCreateToManyRelationship Method for BuildsIndividualTestersCreateToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsIndividualTestersCreateToManyRelationshipRequest
*/
func (a *BuildsApiService) BuildsIndividualTestersCreateToManyRelationship(ctx context.Context, id string) BuildsApiBuildsIndividualTestersCreateToManyRelationshipRequest {
	return BuildsApiBuildsIndividualTestersCreateToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *BuildsApiService) BuildsIndividualTestersCreateToManyRelationshipExecute(r BuildsApiBuildsIndividualTestersCreateToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsIndividualTestersCreateToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/individualTesters"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.buildIndividualTestersLinkagesRequest == nil {
		return nil, reportError("buildIndividualTestersLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildIndividualTestersLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BuildsApiBuildsIndividualTestersDeleteToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	buildIndividualTestersLinkagesRequest *BuildIndividualTestersLinkagesRequest
}

// List of related linkages
func (r BuildsApiBuildsIndividualTestersDeleteToManyRelationshipRequest) BuildIndividualTestersLinkagesRequest(buildIndividualTestersLinkagesRequest BuildIndividualTestersLinkagesRequest) BuildsApiBuildsIndividualTestersDeleteToManyRelationshipRequest {
	r.buildIndividualTestersLinkagesRequest = &buildIndividualTestersLinkagesRequest
	return r
}

func (r BuildsApiBuildsIndividualTestersDeleteToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.BuildsIndividualTestersDeleteToManyRelationshipExecute(r)
}

/*
BuildsIndividualTestersDeleteToManyRelationship Method for BuildsIndividualTestersDeleteToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsIndividualTestersDeleteToManyRelationshipRequest
*/
func (a *BuildsApiService) BuildsIndividualTestersDeleteToManyRelationship(ctx context.Context, id string) BuildsApiBuildsIndividualTestersDeleteToManyRelationshipRequest {
	return BuildsApiBuildsIndividualTestersDeleteToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *BuildsApiService) BuildsIndividualTestersDeleteToManyRelationshipExecute(r BuildsApiBuildsIndividualTestersDeleteToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsIndividualTestersDeleteToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/individualTesters"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.buildIndividualTestersLinkagesRequest == nil {
		return nil, reportError("buildIndividualTestersLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildIndividualTestersLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type BuildsApiBuildsIndividualTestersGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	fieldsBetaTesters *[]string
	limit *int32
}

// the fields to include for returned resources of type betaTesters
func (r BuildsApiBuildsIndividualTestersGetToManyRelatedRequest) FieldsBetaTesters(fieldsBetaTesters []string) BuildsApiBuildsIndividualTestersGetToManyRelatedRequest {
	r.fieldsBetaTesters = &fieldsBetaTesters
	return r
}

// maximum resources per page
func (r BuildsApiBuildsIndividualTestersGetToManyRelatedRequest) Limit(limit int32) BuildsApiBuildsIndividualTestersGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r BuildsApiBuildsIndividualTestersGetToManyRelatedRequest) Execute() (*BetaTestersResponse, *http.Response, error) {
	return r.ApiService.BuildsIndividualTestersGetToManyRelatedExecute(r)
}

/*
BuildsIndividualTestersGetToManyRelated Method for BuildsIndividualTestersGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsIndividualTestersGetToManyRelatedRequest
*/
func (a *BuildsApiService) BuildsIndividualTestersGetToManyRelated(ctx context.Context, id string) BuildsApiBuildsIndividualTestersGetToManyRelatedRequest {
	return BuildsApiBuildsIndividualTestersGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BetaTestersResponse
func (a *BuildsApiService) BuildsIndividualTestersGetToManyRelatedExecute(r BuildsApiBuildsIndividualTestersGetToManyRelatedRequest) (*BetaTestersResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BetaTestersResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsIndividualTestersGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/individualTesters"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBetaTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaTesters]", r.fieldsBetaTesters, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BuildsApiBuildsIndividualTestersGetToManyRelationshipRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	limit *int32
}

// maximum resources per page
func (r BuildsApiBuildsIndividualTestersGetToManyRelationshipRequest) Limit(limit int32) BuildsApiBuildsIndividualTestersGetToManyRelationshipRequest {
	r.limit = &limit
	return r
}

func (r BuildsApiBuildsIndividualTestersGetToManyRelationshipRequest) Execute() (*BuildIndividualTestersLinkagesResponse, *http.Response, error) {
	return r.ApiService.BuildsIndividualTestersGetToManyRelationshipExecute(r)
}

/*
BuildsIndividualTestersGetToManyRelationship Method for BuildsIndividualTestersGetToManyRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsIndividualTestersGetToManyRelationshipRequest
*/
func (a *BuildsApiService) BuildsIndividualTestersGetToManyRelationship(ctx context.Context, id string) BuildsApiBuildsIndividualTestersGetToManyRelationshipRequest {
	return BuildsApiBuildsIndividualTestersGetToManyRelationshipRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BuildIndividualTestersLinkagesResponse
func (a *BuildsApiService) BuildsIndividualTestersGetToManyRelationshipExecute(r BuildsApiBuildsIndividualTestersGetToManyRelationshipRequest) (*BuildIndividualTestersLinkagesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BuildIndividualTestersLinkagesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsIndividualTestersGetToManyRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/individualTesters"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BuildsApiBuildsPerfPowerMetricsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	filterDeviceType *[]string
	filterMetricType *[]string
	filterPlatform *[]string
}

// filter by attribute &#39;deviceType&#39;
func (r BuildsApiBuildsPerfPowerMetricsGetToManyRelatedRequest) FilterDeviceType(filterDeviceType []string) BuildsApiBuildsPerfPowerMetricsGetToManyRelatedRequest {
	r.filterDeviceType = &filterDeviceType
	return r
}

// filter by attribute &#39;metricType&#39;
func (r BuildsApiBuildsPerfPowerMetricsGetToManyRelatedRequest) FilterMetricType(filterMetricType []string) BuildsApiBuildsPerfPowerMetricsGetToManyRelatedRequest {
	r.filterMetricType = &filterMetricType
	return r
}

// filter by attribute &#39;platform&#39;
func (r BuildsApiBuildsPerfPowerMetricsGetToManyRelatedRequest) FilterPlatform(filterPlatform []string) BuildsApiBuildsPerfPowerMetricsGetToManyRelatedRequest {
	r.filterPlatform = &filterPlatform
	return r
}

func (r BuildsApiBuildsPerfPowerMetricsGetToManyRelatedRequest) Execute() (*XcodeMetrics, *http.Response, error) {
	return r.ApiService.BuildsPerfPowerMetricsGetToManyRelatedExecute(r)
}

/*
BuildsPerfPowerMetricsGetToManyRelated Method for BuildsPerfPowerMetricsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsPerfPowerMetricsGetToManyRelatedRequest
*/
func (a *BuildsApiService) BuildsPerfPowerMetricsGetToManyRelated(ctx context.Context, id string) BuildsApiBuildsPerfPowerMetricsGetToManyRelatedRequest {
	return BuildsApiBuildsPerfPowerMetricsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return XcodeMetrics
func (a *BuildsApiService) BuildsPerfPowerMetricsGetToManyRelatedExecute(r BuildsApiBuildsPerfPowerMetricsGetToManyRelatedRequest) (*XcodeMetrics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *XcodeMetrics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsPerfPowerMetricsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/perfPowerMetrics"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterDeviceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[deviceType]", r.filterDeviceType, "csv")
	}
	if r.filterMetricType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[metricType]", r.filterMetricType, "csv")
	}
	if r.filterPlatform != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[platform]", r.filterPlatform, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.apple.xcode-metrics+json", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BuildsApiBuildsPreReleaseVersionGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	fieldsPreReleaseVersions *[]string
}

// the fields to include for returned resources of type preReleaseVersions
func (r BuildsApiBuildsPreReleaseVersionGetToOneRelatedRequest) FieldsPreReleaseVersions(fieldsPreReleaseVersions []string) BuildsApiBuildsPreReleaseVersionGetToOneRelatedRequest {
	r.fieldsPreReleaseVersions = &fieldsPreReleaseVersions
	return r
}

func (r BuildsApiBuildsPreReleaseVersionGetToOneRelatedRequest) Execute() (*PrereleaseVersionResponse, *http.Response, error) {
	return r.ApiService.BuildsPreReleaseVersionGetToOneRelatedExecute(r)
}

/*
BuildsPreReleaseVersionGetToOneRelated Method for BuildsPreReleaseVersionGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsPreReleaseVersionGetToOneRelatedRequest
*/
func (a *BuildsApiService) BuildsPreReleaseVersionGetToOneRelated(ctx context.Context, id string) BuildsApiBuildsPreReleaseVersionGetToOneRelatedRequest {
	return BuildsApiBuildsPreReleaseVersionGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PrereleaseVersionResponse
func (a *BuildsApiService) BuildsPreReleaseVersionGetToOneRelatedExecute(r BuildsApiBuildsPreReleaseVersionGetToOneRelatedRequest) (*PrereleaseVersionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PrereleaseVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsPreReleaseVersionGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/preReleaseVersion"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsPreReleaseVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[preReleaseVersions]", r.fieldsPreReleaseVersions, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type BuildsApiBuildsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *BuildsApiService
	id string
	buildUpdateRequest *BuildUpdateRequest
}

// Build representation
func (r BuildsApiBuildsUpdateInstanceRequest) BuildUpdateRequest(buildUpdateRequest BuildUpdateRequest) BuildsApiBuildsUpdateInstanceRequest {
	r.buildUpdateRequest = &buildUpdateRequest
	return r
}

func (r BuildsApiBuildsUpdateInstanceRequest) Execute() (*BuildResponse, *http.Response, error) {
	return r.ApiService.BuildsUpdateInstanceExecute(r)
}

/*
BuildsUpdateInstance Method for BuildsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return BuildsApiBuildsUpdateInstanceRequest
*/
func (a *BuildsApiService) BuildsUpdateInstance(ctx context.Context, id string) BuildsApiBuildsUpdateInstanceRequest {
	return BuildsApiBuildsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BuildResponse
func (a *BuildsApiService) BuildsUpdateInstanceExecute(r BuildsApiBuildsUpdateInstanceRequest) (*BuildResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BuildResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.buildUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("buildUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
