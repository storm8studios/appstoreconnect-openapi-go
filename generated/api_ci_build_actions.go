/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CiBuildActionsApiService CiBuildActionsApi service
type CiBuildActionsApiService service

type CiBuildActionsApiCiBuildActionsArtifactsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *CiBuildActionsApiService
	id string
	fieldsCiArtifacts *[]string
	limit *int32
}

// the fields to include for returned resources of type ciArtifacts
func (r CiBuildActionsApiCiBuildActionsArtifactsGetToManyRelatedRequest) FieldsCiArtifacts(fieldsCiArtifacts []string) CiBuildActionsApiCiBuildActionsArtifactsGetToManyRelatedRequest {
	r.fieldsCiArtifacts = &fieldsCiArtifacts
	return r
}

// maximum resources per page
func (r CiBuildActionsApiCiBuildActionsArtifactsGetToManyRelatedRequest) Limit(limit int32) CiBuildActionsApiCiBuildActionsArtifactsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r CiBuildActionsApiCiBuildActionsArtifactsGetToManyRelatedRequest) Execute() (*CiArtifactsResponse, *http.Response, error) {
	return r.ApiService.CiBuildActionsArtifactsGetToManyRelatedExecute(r)
}

/*
CiBuildActionsArtifactsGetToManyRelated Method for CiBuildActionsArtifactsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return CiBuildActionsApiCiBuildActionsArtifactsGetToManyRelatedRequest
*/
func (a *CiBuildActionsApiService) CiBuildActionsArtifactsGetToManyRelated(ctx context.Context, id string) CiBuildActionsApiCiBuildActionsArtifactsGetToManyRelatedRequest {
	return CiBuildActionsApiCiBuildActionsArtifactsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CiArtifactsResponse
func (a *CiBuildActionsApiService) CiBuildActionsArtifactsGetToManyRelatedExecute(r CiBuildActionsApiCiBuildActionsArtifactsGetToManyRelatedRequest) (*CiArtifactsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CiArtifactsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiBuildActionsApiService.CiBuildActionsArtifactsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciBuildActions/{id}/artifacts"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsCiArtifacts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciArtifacts]", r.fieldsCiArtifacts, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest struct {
	ctx context.Context
	ApiService *CiBuildActionsApiService
	id string
	fieldsScmGitReferences *[]string
	fieldsCiBuildRuns *[]string
	fieldsCiWorkflows *[]string
	fieldsScmPullRequests *[]string
	fieldsCiProducts *[]string
	fieldsBuilds *[]string
	limitBuilds *int32
	include *[]string
}

// the fields to include for returned resources of type scmGitReferences
func (r CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest) FieldsScmGitReferences(fieldsScmGitReferences []string) CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest {
	r.fieldsScmGitReferences = &fieldsScmGitReferences
	return r
}

// the fields to include for returned resources of type ciBuildRuns
func (r CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest) FieldsCiBuildRuns(fieldsCiBuildRuns []string) CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest {
	r.fieldsCiBuildRuns = &fieldsCiBuildRuns
	return r
}

// the fields to include for returned resources of type ciWorkflows
func (r CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest) FieldsCiWorkflows(fieldsCiWorkflows []string) CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest {
	r.fieldsCiWorkflows = &fieldsCiWorkflows
	return r
}

// the fields to include for returned resources of type scmPullRequests
func (r CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest) FieldsScmPullRequests(fieldsScmPullRequests []string) CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest {
	r.fieldsScmPullRequests = &fieldsScmPullRequests
	return r
}

// the fields to include for returned resources of type ciProducts
func (r CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest) FieldsCiProducts(fieldsCiProducts []string) CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest {
	r.fieldsCiProducts = &fieldsCiProducts
	return r
}

// the fields to include for returned resources of type builds
func (r CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest) FieldsBuilds(fieldsBuilds []string) CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// maximum number of related builds returned (when they are included)
func (r CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest) LimitBuilds(limitBuilds int32) CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest {
	r.limitBuilds = &limitBuilds
	return r
}

// comma-separated list of relationships to include
func (r CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest) Include(include []string) CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest {
	r.include = &include
	return r
}

func (r CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest) Execute() (*CiBuildRunResponse, *http.Response, error) {
	return r.ApiService.CiBuildActionsBuildRunGetToOneRelatedExecute(r)
}

/*
CiBuildActionsBuildRunGetToOneRelated Method for CiBuildActionsBuildRunGetToOneRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest
*/
func (a *CiBuildActionsApiService) CiBuildActionsBuildRunGetToOneRelated(ctx context.Context, id string) CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest {
	return CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CiBuildRunResponse
func (a *CiBuildActionsApiService) CiBuildActionsBuildRunGetToOneRelatedExecute(r CiBuildActionsApiCiBuildActionsBuildRunGetToOneRelatedRequest) (*CiBuildRunResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CiBuildRunResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiBuildActionsApiService.CiBuildActionsBuildRunGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciBuildActions/{id}/buildRun"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsScmGitReferences != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[scmGitReferences]", r.fieldsScmGitReferences, "csv")
	}
	if r.fieldsCiBuildRuns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciBuildRuns]", r.fieldsCiBuildRuns, "csv")
	}
	if r.fieldsCiWorkflows != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciWorkflows]", r.fieldsCiWorkflows, "csv")
	}
	if r.fieldsScmPullRequests != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[scmPullRequests]", r.fieldsScmPullRequests, "csv")
	}
	if r.fieldsCiProducts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciProducts]", r.fieldsCiProducts, "csv")
	}
	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	if r.limitBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[builds]", r.limitBuilds, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CiBuildActionsApiCiBuildActionsGetInstanceRequest struct {
	ctx context.Context
	ApiService *CiBuildActionsApiService
	id string
	fieldsCiBuildActions *[]string
	include *[]string
	fieldsCiIssues *[]string
	fieldsCiBuildRuns *[]string
	fieldsCiTestResults *[]string
	fieldsCiArtifacts *[]string
}

// the fields to include for returned resources of type ciBuildActions
func (r CiBuildActionsApiCiBuildActionsGetInstanceRequest) FieldsCiBuildActions(fieldsCiBuildActions []string) CiBuildActionsApiCiBuildActionsGetInstanceRequest {
	r.fieldsCiBuildActions = &fieldsCiBuildActions
	return r
}

// comma-separated list of relationships to include
func (r CiBuildActionsApiCiBuildActionsGetInstanceRequest) Include(include []string) CiBuildActionsApiCiBuildActionsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type ciIssues
func (r CiBuildActionsApiCiBuildActionsGetInstanceRequest) FieldsCiIssues(fieldsCiIssues []string) CiBuildActionsApiCiBuildActionsGetInstanceRequest {
	r.fieldsCiIssues = &fieldsCiIssues
	return r
}

// the fields to include for returned resources of type ciBuildRuns
func (r CiBuildActionsApiCiBuildActionsGetInstanceRequest) FieldsCiBuildRuns(fieldsCiBuildRuns []string) CiBuildActionsApiCiBuildActionsGetInstanceRequest {
	r.fieldsCiBuildRuns = &fieldsCiBuildRuns
	return r
}

// the fields to include for returned resources of type ciTestResults
func (r CiBuildActionsApiCiBuildActionsGetInstanceRequest) FieldsCiTestResults(fieldsCiTestResults []string) CiBuildActionsApiCiBuildActionsGetInstanceRequest {
	r.fieldsCiTestResults = &fieldsCiTestResults
	return r
}

// the fields to include for returned resources of type ciArtifacts
func (r CiBuildActionsApiCiBuildActionsGetInstanceRequest) FieldsCiArtifacts(fieldsCiArtifacts []string) CiBuildActionsApiCiBuildActionsGetInstanceRequest {
	r.fieldsCiArtifacts = &fieldsCiArtifacts
	return r
}

func (r CiBuildActionsApiCiBuildActionsGetInstanceRequest) Execute() (*CiBuildActionResponse, *http.Response, error) {
	return r.ApiService.CiBuildActionsGetInstanceExecute(r)
}

/*
CiBuildActionsGetInstance Method for CiBuildActionsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return CiBuildActionsApiCiBuildActionsGetInstanceRequest
*/
func (a *CiBuildActionsApiService) CiBuildActionsGetInstance(ctx context.Context, id string) CiBuildActionsApiCiBuildActionsGetInstanceRequest {
	return CiBuildActionsApiCiBuildActionsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CiBuildActionResponse
func (a *CiBuildActionsApiService) CiBuildActionsGetInstanceExecute(r CiBuildActionsApiCiBuildActionsGetInstanceRequest) (*CiBuildActionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CiBuildActionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiBuildActionsApiService.CiBuildActionsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciBuildActions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsCiBuildActions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciBuildActions]", r.fieldsCiBuildActions, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsCiIssues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciIssues]", r.fieldsCiIssues, "csv")
	}
	if r.fieldsCiBuildRuns != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciBuildRuns]", r.fieldsCiBuildRuns, "csv")
	}
	if r.fieldsCiTestResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciTestResults]", r.fieldsCiTestResults, "csv")
	}
	if r.fieldsCiArtifacts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciArtifacts]", r.fieldsCiArtifacts, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CiBuildActionsApiCiBuildActionsIssuesGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *CiBuildActionsApiService
	id string
	fieldsCiIssues *[]string
	limit *int32
}

// the fields to include for returned resources of type ciIssues
func (r CiBuildActionsApiCiBuildActionsIssuesGetToManyRelatedRequest) FieldsCiIssues(fieldsCiIssues []string) CiBuildActionsApiCiBuildActionsIssuesGetToManyRelatedRequest {
	r.fieldsCiIssues = &fieldsCiIssues
	return r
}

// maximum resources per page
func (r CiBuildActionsApiCiBuildActionsIssuesGetToManyRelatedRequest) Limit(limit int32) CiBuildActionsApiCiBuildActionsIssuesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r CiBuildActionsApiCiBuildActionsIssuesGetToManyRelatedRequest) Execute() (*CiIssuesResponse, *http.Response, error) {
	return r.ApiService.CiBuildActionsIssuesGetToManyRelatedExecute(r)
}

/*
CiBuildActionsIssuesGetToManyRelated Method for CiBuildActionsIssuesGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return CiBuildActionsApiCiBuildActionsIssuesGetToManyRelatedRequest
*/
func (a *CiBuildActionsApiService) CiBuildActionsIssuesGetToManyRelated(ctx context.Context, id string) CiBuildActionsApiCiBuildActionsIssuesGetToManyRelatedRequest {
	return CiBuildActionsApiCiBuildActionsIssuesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CiIssuesResponse
func (a *CiBuildActionsApiService) CiBuildActionsIssuesGetToManyRelatedExecute(r CiBuildActionsApiCiBuildActionsIssuesGetToManyRelatedRequest) (*CiIssuesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CiIssuesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiBuildActionsApiService.CiBuildActionsIssuesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciBuildActions/{id}/issues"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsCiIssues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciIssues]", r.fieldsCiIssues, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CiBuildActionsApiCiBuildActionsTestResultsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *CiBuildActionsApiService
	id string
	fieldsCiTestResults *[]string
	limit *int32
}

// the fields to include for returned resources of type ciTestResults
func (r CiBuildActionsApiCiBuildActionsTestResultsGetToManyRelatedRequest) FieldsCiTestResults(fieldsCiTestResults []string) CiBuildActionsApiCiBuildActionsTestResultsGetToManyRelatedRequest {
	r.fieldsCiTestResults = &fieldsCiTestResults
	return r
}

// maximum resources per page
func (r CiBuildActionsApiCiBuildActionsTestResultsGetToManyRelatedRequest) Limit(limit int32) CiBuildActionsApiCiBuildActionsTestResultsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r CiBuildActionsApiCiBuildActionsTestResultsGetToManyRelatedRequest) Execute() (*CiTestResultsResponse, *http.Response, error) {
	return r.ApiService.CiBuildActionsTestResultsGetToManyRelatedExecute(r)
}

/*
CiBuildActionsTestResultsGetToManyRelated Method for CiBuildActionsTestResultsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return CiBuildActionsApiCiBuildActionsTestResultsGetToManyRelatedRequest
*/
func (a *CiBuildActionsApiService) CiBuildActionsTestResultsGetToManyRelated(ctx context.Context, id string) CiBuildActionsApiCiBuildActionsTestResultsGetToManyRelatedRequest {
	return CiBuildActionsApiCiBuildActionsTestResultsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CiTestResultsResponse
func (a *CiBuildActionsApiService) CiBuildActionsTestResultsGetToManyRelatedExecute(r CiBuildActionsApiCiBuildActionsTestResultsGetToManyRelatedRequest) (*CiTestResultsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CiTestResultsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CiBuildActionsApiService.CiBuildActionsTestResultsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ciBuildActions/{id}/testResults"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsCiTestResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ciTestResults]", r.fieldsCiTestResults, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
