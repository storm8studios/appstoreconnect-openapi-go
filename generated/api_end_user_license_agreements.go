/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EndUserLicenseAgreementsApiService EndUserLicenseAgreementsApi service
type EndUserLicenseAgreementsApiService service

type EndUserLicenseAgreementsApiEndUserLicenseAgreementsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *EndUserLicenseAgreementsApiService
	endUserLicenseAgreementCreateRequest *EndUserLicenseAgreementCreateRequest
}

// EndUserLicenseAgreement representation
func (r EndUserLicenseAgreementsApiEndUserLicenseAgreementsCreateInstanceRequest) EndUserLicenseAgreementCreateRequest(endUserLicenseAgreementCreateRequest EndUserLicenseAgreementCreateRequest) EndUserLicenseAgreementsApiEndUserLicenseAgreementsCreateInstanceRequest {
	r.endUserLicenseAgreementCreateRequest = &endUserLicenseAgreementCreateRequest
	return r
}

func (r EndUserLicenseAgreementsApiEndUserLicenseAgreementsCreateInstanceRequest) Execute() (*EndUserLicenseAgreementResponse, *http.Response, error) {
	return r.ApiService.EndUserLicenseAgreementsCreateInstanceExecute(r)
}

/*
EndUserLicenseAgreementsCreateInstance Method for EndUserLicenseAgreementsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EndUserLicenseAgreementsApiEndUserLicenseAgreementsCreateInstanceRequest
*/
func (a *EndUserLicenseAgreementsApiService) EndUserLicenseAgreementsCreateInstance(ctx context.Context) EndUserLicenseAgreementsApiEndUserLicenseAgreementsCreateInstanceRequest {
	return EndUserLicenseAgreementsApiEndUserLicenseAgreementsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EndUserLicenseAgreementResponse
func (a *EndUserLicenseAgreementsApiService) EndUserLicenseAgreementsCreateInstanceExecute(r EndUserLicenseAgreementsApiEndUserLicenseAgreementsCreateInstanceRequest) (*EndUserLicenseAgreementResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EndUserLicenseAgreementResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndUserLicenseAgreementsApiService.EndUserLicenseAgreementsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/endUserLicenseAgreements"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.endUserLicenseAgreementCreateRequest == nil {
		return localVarReturnValue, nil, reportError("endUserLicenseAgreementCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.endUserLicenseAgreementCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndUserLicenseAgreementsApiEndUserLicenseAgreementsDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *EndUserLicenseAgreementsApiService
	id string
}

func (r EndUserLicenseAgreementsApiEndUserLicenseAgreementsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.EndUserLicenseAgreementsDeleteInstanceExecute(r)
}

/*
EndUserLicenseAgreementsDeleteInstance Method for EndUserLicenseAgreementsDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return EndUserLicenseAgreementsApiEndUserLicenseAgreementsDeleteInstanceRequest
*/
func (a *EndUserLicenseAgreementsApiService) EndUserLicenseAgreementsDeleteInstance(ctx context.Context, id string) EndUserLicenseAgreementsApiEndUserLicenseAgreementsDeleteInstanceRequest {
	return EndUserLicenseAgreementsApiEndUserLicenseAgreementsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *EndUserLicenseAgreementsApiService) EndUserLicenseAgreementsDeleteInstanceExecute(r EndUserLicenseAgreementsApiEndUserLicenseAgreementsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndUserLicenseAgreementsApiService.EndUserLicenseAgreementsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/endUserLicenseAgreements/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type EndUserLicenseAgreementsApiEndUserLicenseAgreementsGetInstanceRequest struct {
	ctx context.Context
	ApiService *EndUserLicenseAgreementsApiService
	id string
	fieldsEndUserLicenseAgreements *[]string
	include *[]string
	fieldsTerritories *[]string
	limitTerritories *int32
}

// the fields to include for returned resources of type endUserLicenseAgreements
func (r EndUserLicenseAgreementsApiEndUserLicenseAgreementsGetInstanceRequest) FieldsEndUserLicenseAgreements(fieldsEndUserLicenseAgreements []string) EndUserLicenseAgreementsApiEndUserLicenseAgreementsGetInstanceRequest {
	r.fieldsEndUserLicenseAgreements = &fieldsEndUserLicenseAgreements
	return r
}

// comma-separated list of relationships to include
func (r EndUserLicenseAgreementsApiEndUserLicenseAgreementsGetInstanceRequest) Include(include []string) EndUserLicenseAgreementsApiEndUserLicenseAgreementsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type territories
func (r EndUserLicenseAgreementsApiEndUserLicenseAgreementsGetInstanceRequest) FieldsTerritories(fieldsTerritories []string) EndUserLicenseAgreementsApiEndUserLicenseAgreementsGetInstanceRequest {
	r.fieldsTerritories = &fieldsTerritories
	return r
}

// maximum number of related territories returned (when they are included)
func (r EndUserLicenseAgreementsApiEndUserLicenseAgreementsGetInstanceRequest) LimitTerritories(limitTerritories int32) EndUserLicenseAgreementsApiEndUserLicenseAgreementsGetInstanceRequest {
	r.limitTerritories = &limitTerritories
	return r
}

func (r EndUserLicenseAgreementsApiEndUserLicenseAgreementsGetInstanceRequest) Execute() (*EndUserLicenseAgreementResponse, *http.Response, error) {
	return r.ApiService.EndUserLicenseAgreementsGetInstanceExecute(r)
}

/*
EndUserLicenseAgreementsGetInstance Method for EndUserLicenseAgreementsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return EndUserLicenseAgreementsApiEndUserLicenseAgreementsGetInstanceRequest
*/
func (a *EndUserLicenseAgreementsApiService) EndUserLicenseAgreementsGetInstance(ctx context.Context, id string) EndUserLicenseAgreementsApiEndUserLicenseAgreementsGetInstanceRequest {
	return EndUserLicenseAgreementsApiEndUserLicenseAgreementsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return EndUserLicenseAgreementResponse
func (a *EndUserLicenseAgreementsApiService) EndUserLicenseAgreementsGetInstanceExecute(r EndUserLicenseAgreementsApiEndUserLicenseAgreementsGetInstanceRequest) (*EndUserLicenseAgreementResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EndUserLicenseAgreementResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndUserLicenseAgreementsApiService.EndUserLicenseAgreementsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/endUserLicenseAgreements/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsEndUserLicenseAgreements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[endUserLicenseAgreements]", r.fieldsEndUserLicenseAgreements, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsTerritories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[territories]", r.fieldsTerritories, "csv")
	}
	if r.limitTerritories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[territories]", r.limitTerritories, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndUserLicenseAgreementsApiEndUserLicenseAgreementsTerritoriesGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *EndUserLicenseAgreementsApiService
	id string
	fieldsTerritories *[]string
	limit *int32
}

// the fields to include for returned resources of type territories
func (r EndUserLicenseAgreementsApiEndUserLicenseAgreementsTerritoriesGetToManyRelatedRequest) FieldsTerritories(fieldsTerritories []string) EndUserLicenseAgreementsApiEndUserLicenseAgreementsTerritoriesGetToManyRelatedRequest {
	r.fieldsTerritories = &fieldsTerritories
	return r
}

// maximum resources per page
func (r EndUserLicenseAgreementsApiEndUserLicenseAgreementsTerritoriesGetToManyRelatedRequest) Limit(limit int32) EndUserLicenseAgreementsApiEndUserLicenseAgreementsTerritoriesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r EndUserLicenseAgreementsApiEndUserLicenseAgreementsTerritoriesGetToManyRelatedRequest) Execute() (*TerritoriesResponse, *http.Response, error) {
	return r.ApiService.EndUserLicenseAgreementsTerritoriesGetToManyRelatedExecute(r)
}

/*
EndUserLicenseAgreementsTerritoriesGetToManyRelated Method for EndUserLicenseAgreementsTerritoriesGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return EndUserLicenseAgreementsApiEndUserLicenseAgreementsTerritoriesGetToManyRelatedRequest
*/
func (a *EndUserLicenseAgreementsApiService) EndUserLicenseAgreementsTerritoriesGetToManyRelated(ctx context.Context, id string) EndUserLicenseAgreementsApiEndUserLicenseAgreementsTerritoriesGetToManyRelatedRequest {
	return EndUserLicenseAgreementsApiEndUserLicenseAgreementsTerritoriesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TerritoriesResponse
func (a *EndUserLicenseAgreementsApiService) EndUserLicenseAgreementsTerritoriesGetToManyRelatedExecute(r EndUserLicenseAgreementsApiEndUserLicenseAgreementsTerritoriesGetToManyRelatedRequest) (*TerritoriesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TerritoriesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndUserLicenseAgreementsApiService.EndUserLicenseAgreementsTerritoriesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/endUserLicenseAgreements/{id}/territories"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsTerritories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[territories]", r.fieldsTerritories, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EndUserLicenseAgreementsApiEndUserLicenseAgreementsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *EndUserLicenseAgreementsApiService
	id string
	endUserLicenseAgreementUpdateRequest *EndUserLicenseAgreementUpdateRequest
}

// EndUserLicenseAgreement representation
func (r EndUserLicenseAgreementsApiEndUserLicenseAgreementsUpdateInstanceRequest) EndUserLicenseAgreementUpdateRequest(endUserLicenseAgreementUpdateRequest EndUserLicenseAgreementUpdateRequest) EndUserLicenseAgreementsApiEndUserLicenseAgreementsUpdateInstanceRequest {
	r.endUserLicenseAgreementUpdateRequest = &endUserLicenseAgreementUpdateRequest
	return r
}

func (r EndUserLicenseAgreementsApiEndUserLicenseAgreementsUpdateInstanceRequest) Execute() (*EndUserLicenseAgreementResponse, *http.Response, error) {
	return r.ApiService.EndUserLicenseAgreementsUpdateInstanceExecute(r)
}

/*
EndUserLicenseAgreementsUpdateInstance Method for EndUserLicenseAgreementsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return EndUserLicenseAgreementsApiEndUserLicenseAgreementsUpdateInstanceRequest
*/
func (a *EndUserLicenseAgreementsApiService) EndUserLicenseAgreementsUpdateInstance(ctx context.Context, id string) EndUserLicenseAgreementsApiEndUserLicenseAgreementsUpdateInstanceRequest {
	return EndUserLicenseAgreementsApiEndUserLicenseAgreementsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return EndUserLicenseAgreementResponse
func (a *EndUserLicenseAgreementsApiService) EndUserLicenseAgreementsUpdateInstanceExecute(r EndUserLicenseAgreementsApiEndUserLicenseAgreementsUpdateInstanceRequest) (*EndUserLicenseAgreementResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EndUserLicenseAgreementResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EndUserLicenseAgreementsApiService.EndUserLicenseAgreementsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/endUserLicenseAgreements/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.endUserLicenseAgreementUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("endUserLicenseAgreementUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.endUserLicenseAgreementUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
