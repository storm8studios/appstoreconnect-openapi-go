/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// InAppPurchaseAppStoreReviewScreenshotsApiService InAppPurchaseAppStoreReviewScreenshotsApi service
type InAppPurchaseAppStoreReviewScreenshotsApiService service

type InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *InAppPurchaseAppStoreReviewScreenshotsApiService
	inAppPurchaseAppStoreReviewScreenshotCreateRequest *InAppPurchaseAppStoreReviewScreenshotCreateRequest
}

// InAppPurchaseAppStoreReviewScreenshot representation
func (r InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsCreateInstanceRequest) InAppPurchaseAppStoreReviewScreenshotCreateRequest(inAppPurchaseAppStoreReviewScreenshotCreateRequest InAppPurchaseAppStoreReviewScreenshotCreateRequest) InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsCreateInstanceRequest {
	r.inAppPurchaseAppStoreReviewScreenshotCreateRequest = &inAppPurchaseAppStoreReviewScreenshotCreateRequest
	return r
}

func (r InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsCreateInstanceRequest) Execute() (*InAppPurchaseAppStoreReviewScreenshotResponse, *http.Response, error) {
	return r.ApiService.InAppPurchaseAppStoreReviewScreenshotsCreateInstanceExecute(r)
}

/*
InAppPurchaseAppStoreReviewScreenshotsCreateInstance Method for InAppPurchaseAppStoreReviewScreenshotsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsCreateInstanceRequest
*/
func (a *InAppPurchaseAppStoreReviewScreenshotsApiService) InAppPurchaseAppStoreReviewScreenshotsCreateInstance(ctx context.Context) InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsCreateInstanceRequest {
	return InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InAppPurchaseAppStoreReviewScreenshotResponse
func (a *InAppPurchaseAppStoreReviewScreenshotsApiService) InAppPurchaseAppStoreReviewScreenshotsCreateInstanceExecute(r InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsCreateInstanceRequest) (*InAppPurchaseAppStoreReviewScreenshotResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InAppPurchaseAppStoreReviewScreenshotResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InAppPurchaseAppStoreReviewScreenshotsApiService.InAppPurchaseAppStoreReviewScreenshotsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inAppPurchaseAppStoreReviewScreenshots"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inAppPurchaseAppStoreReviewScreenshotCreateRequest == nil {
		return localVarReturnValue, nil, reportError("inAppPurchaseAppStoreReviewScreenshotCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inAppPurchaseAppStoreReviewScreenshotCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *InAppPurchaseAppStoreReviewScreenshotsApiService
	id string
}

func (r InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceExecute(r)
}

/*
InAppPurchaseAppStoreReviewScreenshotsDeleteInstance Method for InAppPurchaseAppStoreReviewScreenshotsDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsDeleteInstanceRequest
*/
func (a *InAppPurchaseAppStoreReviewScreenshotsApiService) InAppPurchaseAppStoreReviewScreenshotsDeleteInstance(ctx context.Context, id string) InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsDeleteInstanceRequest {
	return InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *InAppPurchaseAppStoreReviewScreenshotsApiService) InAppPurchaseAppStoreReviewScreenshotsDeleteInstanceExecute(r InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InAppPurchaseAppStoreReviewScreenshotsApiService.InAppPurchaseAppStoreReviewScreenshotsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inAppPurchaseAppStoreReviewScreenshots/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsGetInstanceRequest struct {
	ctx context.Context
	ApiService *InAppPurchaseAppStoreReviewScreenshotsApiService
	id string
	fieldsInAppPurchaseAppStoreReviewScreenshots *[]string
	include *[]string
}

// the fields to include for returned resources of type inAppPurchaseAppStoreReviewScreenshots
func (r InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsGetInstanceRequest) FieldsInAppPurchaseAppStoreReviewScreenshots(fieldsInAppPurchaseAppStoreReviewScreenshots []string) InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsGetInstanceRequest {
	r.fieldsInAppPurchaseAppStoreReviewScreenshots = &fieldsInAppPurchaseAppStoreReviewScreenshots
	return r
}

// comma-separated list of relationships to include
func (r InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsGetInstanceRequest) Include(include []string) InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsGetInstanceRequest {
	r.include = &include
	return r
}

func (r InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsGetInstanceRequest) Execute() (*InAppPurchaseAppStoreReviewScreenshotResponse, *http.Response, error) {
	return r.ApiService.InAppPurchaseAppStoreReviewScreenshotsGetInstanceExecute(r)
}

/*
InAppPurchaseAppStoreReviewScreenshotsGetInstance Method for InAppPurchaseAppStoreReviewScreenshotsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsGetInstanceRequest
*/
func (a *InAppPurchaseAppStoreReviewScreenshotsApiService) InAppPurchaseAppStoreReviewScreenshotsGetInstance(ctx context.Context, id string) InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsGetInstanceRequest {
	return InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return InAppPurchaseAppStoreReviewScreenshotResponse
func (a *InAppPurchaseAppStoreReviewScreenshotsApiService) InAppPurchaseAppStoreReviewScreenshotsGetInstanceExecute(r InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsGetInstanceRequest) (*InAppPurchaseAppStoreReviewScreenshotResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InAppPurchaseAppStoreReviewScreenshotResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InAppPurchaseAppStoreReviewScreenshotsApiService.InAppPurchaseAppStoreReviewScreenshotsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inAppPurchaseAppStoreReviewScreenshots/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsInAppPurchaseAppStoreReviewScreenshots != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[inAppPurchaseAppStoreReviewScreenshots]", r.fieldsInAppPurchaseAppStoreReviewScreenshots, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *InAppPurchaseAppStoreReviewScreenshotsApiService
	id string
	inAppPurchaseAppStoreReviewScreenshotUpdateRequest *InAppPurchaseAppStoreReviewScreenshotUpdateRequest
}

// InAppPurchaseAppStoreReviewScreenshot representation
func (r InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsUpdateInstanceRequest) InAppPurchaseAppStoreReviewScreenshotUpdateRequest(inAppPurchaseAppStoreReviewScreenshotUpdateRequest InAppPurchaseAppStoreReviewScreenshotUpdateRequest) InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsUpdateInstanceRequest {
	r.inAppPurchaseAppStoreReviewScreenshotUpdateRequest = &inAppPurchaseAppStoreReviewScreenshotUpdateRequest
	return r
}

func (r InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsUpdateInstanceRequest) Execute() (*InAppPurchaseAppStoreReviewScreenshotResponse, *http.Response, error) {
	return r.ApiService.InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceExecute(r)
}

/*
InAppPurchaseAppStoreReviewScreenshotsUpdateInstance Method for InAppPurchaseAppStoreReviewScreenshotsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsUpdateInstanceRequest
*/
func (a *InAppPurchaseAppStoreReviewScreenshotsApiService) InAppPurchaseAppStoreReviewScreenshotsUpdateInstance(ctx context.Context, id string) InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsUpdateInstanceRequest {
	return InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return InAppPurchaseAppStoreReviewScreenshotResponse
func (a *InAppPurchaseAppStoreReviewScreenshotsApiService) InAppPurchaseAppStoreReviewScreenshotsUpdateInstanceExecute(r InAppPurchaseAppStoreReviewScreenshotsApiInAppPurchaseAppStoreReviewScreenshotsUpdateInstanceRequest) (*InAppPurchaseAppStoreReviewScreenshotResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InAppPurchaseAppStoreReviewScreenshotResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InAppPurchaseAppStoreReviewScreenshotsApiService.InAppPurchaseAppStoreReviewScreenshotsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/inAppPurchaseAppStoreReviewScreenshots/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.inAppPurchaseAppStoreReviewScreenshotUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("inAppPurchaseAppStoreReviewScreenshotUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inAppPurchaseAppStoreReviewScreenshotUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
