/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ReviewSubmissionsApiService ReviewSubmissionsApi service
type ReviewSubmissionsApiService service

type ReviewSubmissionsApiReviewSubmissionsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *ReviewSubmissionsApiService
	reviewSubmissionCreateRequest *ReviewSubmissionCreateRequest
}

// ReviewSubmission representation
func (r ReviewSubmissionsApiReviewSubmissionsCreateInstanceRequest) ReviewSubmissionCreateRequest(reviewSubmissionCreateRequest ReviewSubmissionCreateRequest) ReviewSubmissionsApiReviewSubmissionsCreateInstanceRequest {
	r.reviewSubmissionCreateRequest = &reviewSubmissionCreateRequest
	return r
}

func (r ReviewSubmissionsApiReviewSubmissionsCreateInstanceRequest) Execute() (*ReviewSubmissionResponse, *http.Response, error) {
	return r.ApiService.ReviewSubmissionsCreateInstanceExecute(r)
}

/*
ReviewSubmissionsCreateInstance Method for ReviewSubmissionsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReviewSubmissionsApiReviewSubmissionsCreateInstanceRequest
*/
func (a *ReviewSubmissionsApiService) ReviewSubmissionsCreateInstance(ctx context.Context) ReviewSubmissionsApiReviewSubmissionsCreateInstanceRequest {
	return ReviewSubmissionsApiReviewSubmissionsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ReviewSubmissionResponse
func (a *ReviewSubmissionsApiService) ReviewSubmissionsCreateInstanceExecute(r ReviewSubmissionsApiReviewSubmissionsCreateInstanceRequest) (*ReviewSubmissionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReviewSubmissionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReviewSubmissionsApiService.ReviewSubmissionsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/reviewSubmissions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.reviewSubmissionCreateRequest == nil {
		return localVarReturnValue, nil, reportError("reviewSubmissionCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.reviewSubmissionCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest struct {
	ctx context.Context
	ApiService *ReviewSubmissionsApiService
	filterApp *[]string
	filterPlatform *[]string
	filterState *[]string
	fieldsReviewSubmissions *[]string
	limit *int32
	include *[]string
	fieldsReviewSubmissionItems *[]string
	limitItems *int32
}

// filter by id(s) of related &#39;app&#39;
func (r ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest) FilterApp(filterApp []string) ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest {
	r.filterApp = &filterApp
	return r
}

// filter by attribute &#39;platform&#39;
func (r ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest) FilterPlatform(filterPlatform []string) ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest {
	r.filterPlatform = &filterPlatform
	return r
}

// filter by attribute &#39;state&#39;
func (r ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest) FilterState(filterState []string) ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest {
	r.filterState = &filterState
	return r
}

// the fields to include for returned resources of type reviewSubmissions
func (r ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest) FieldsReviewSubmissions(fieldsReviewSubmissions []string) ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest {
	r.fieldsReviewSubmissions = &fieldsReviewSubmissions
	return r
}

// maximum resources per page
func (r ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest) Limit(limit int32) ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest) Include(include []string) ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type reviewSubmissionItems
func (r ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest) FieldsReviewSubmissionItems(fieldsReviewSubmissionItems []string) ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest {
	r.fieldsReviewSubmissionItems = &fieldsReviewSubmissionItems
	return r
}

// maximum number of related items returned (when they are included)
func (r ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest) LimitItems(limitItems int32) ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest {
	r.limitItems = &limitItems
	return r
}

func (r ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest) Execute() (*ReviewSubmissionsResponse, *http.Response, error) {
	return r.ApiService.ReviewSubmissionsGetCollectionExecute(r)
}

/*
ReviewSubmissionsGetCollection Method for ReviewSubmissionsGetCollection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest
*/
func (a *ReviewSubmissionsApiService) ReviewSubmissionsGetCollection(ctx context.Context) ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest {
	return ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ReviewSubmissionsResponse
func (a *ReviewSubmissionsApiService) ReviewSubmissionsGetCollectionExecute(r ReviewSubmissionsApiReviewSubmissionsGetCollectionRequest) (*ReviewSubmissionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReviewSubmissionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReviewSubmissionsApiService.ReviewSubmissionsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/reviewSubmissions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.filterApp == nil {
		return localVarReturnValue, nil, reportError("filterApp is required and must be specified")
	}

	if r.filterPlatform != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[platform]", r.filterPlatform, "csv")
	}
	if r.filterState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[state]", r.filterState, "csv")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "filter[app]", r.filterApp, "csv")
	if r.fieldsReviewSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[reviewSubmissions]", r.fieldsReviewSubmissions, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsReviewSubmissionItems != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[reviewSubmissionItems]", r.fieldsReviewSubmissionItems, "csv")
	}
	if r.limitItems != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[items]", r.limitItems, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReviewSubmissionsApiReviewSubmissionsGetInstanceRequest struct {
	ctx context.Context
	ApiService *ReviewSubmissionsApiService
	id string
	fieldsReviewSubmissions *[]string
	include *[]string
	fieldsReviewSubmissionItems *[]string
	limitItems *int32
}

// the fields to include for returned resources of type reviewSubmissions
func (r ReviewSubmissionsApiReviewSubmissionsGetInstanceRequest) FieldsReviewSubmissions(fieldsReviewSubmissions []string) ReviewSubmissionsApiReviewSubmissionsGetInstanceRequest {
	r.fieldsReviewSubmissions = &fieldsReviewSubmissions
	return r
}

// comma-separated list of relationships to include
func (r ReviewSubmissionsApiReviewSubmissionsGetInstanceRequest) Include(include []string) ReviewSubmissionsApiReviewSubmissionsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type reviewSubmissionItems
func (r ReviewSubmissionsApiReviewSubmissionsGetInstanceRequest) FieldsReviewSubmissionItems(fieldsReviewSubmissionItems []string) ReviewSubmissionsApiReviewSubmissionsGetInstanceRequest {
	r.fieldsReviewSubmissionItems = &fieldsReviewSubmissionItems
	return r
}

// maximum number of related items returned (when they are included)
func (r ReviewSubmissionsApiReviewSubmissionsGetInstanceRequest) LimitItems(limitItems int32) ReviewSubmissionsApiReviewSubmissionsGetInstanceRequest {
	r.limitItems = &limitItems
	return r
}

func (r ReviewSubmissionsApiReviewSubmissionsGetInstanceRequest) Execute() (*ReviewSubmissionResponse, *http.Response, error) {
	return r.ApiService.ReviewSubmissionsGetInstanceExecute(r)
}

/*
ReviewSubmissionsGetInstance Method for ReviewSubmissionsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ReviewSubmissionsApiReviewSubmissionsGetInstanceRequest
*/
func (a *ReviewSubmissionsApiService) ReviewSubmissionsGetInstance(ctx context.Context, id string) ReviewSubmissionsApiReviewSubmissionsGetInstanceRequest {
	return ReviewSubmissionsApiReviewSubmissionsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ReviewSubmissionResponse
func (a *ReviewSubmissionsApiService) ReviewSubmissionsGetInstanceExecute(r ReviewSubmissionsApiReviewSubmissionsGetInstanceRequest) (*ReviewSubmissionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReviewSubmissionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReviewSubmissionsApiService.ReviewSubmissionsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/reviewSubmissions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsReviewSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[reviewSubmissions]", r.fieldsReviewSubmissions, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsReviewSubmissionItems != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[reviewSubmissionItems]", r.fieldsReviewSubmissionItems, "csv")
	}
	if r.limitItems != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[items]", r.limitItems, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *ReviewSubmissionsApiService
	id string
	fieldsAppStoreVersionExperiments *[]string
	fieldsReviewSubmissionItems *[]string
	fieldsAppStoreVersions *[]string
	fieldsAppCustomProductPageVersions *[]string
	fieldsAppEvents *[]string
	limit *int32
	include *[]string
}

// the fields to include for returned resources of type appStoreVersionExperiments
func (r ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest) FieldsAppStoreVersionExperiments(fieldsAppStoreVersionExperiments []string) ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionExperiments = &fieldsAppStoreVersionExperiments
	return r
}

// the fields to include for returned resources of type reviewSubmissionItems
func (r ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest) FieldsReviewSubmissionItems(fieldsReviewSubmissionItems []string) ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest {
	r.fieldsReviewSubmissionItems = &fieldsReviewSubmissionItems
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type appCustomProductPageVersions
func (r ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest) FieldsAppCustomProductPageVersions(fieldsAppCustomProductPageVersions []string) ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest {
	r.fieldsAppCustomProductPageVersions = &fieldsAppCustomProductPageVersions
	return r
}

// the fields to include for returned resources of type appEvents
func (r ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest) FieldsAppEvents(fieldsAppEvents []string) ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest {
	r.fieldsAppEvents = &fieldsAppEvents
	return r
}

// maximum resources per page
func (r ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest) Limit(limit int32) ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest) Include(include []string) ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest) Execute() (*ReviewSubmissionItemsResponse, *http.Response, error) {
	return r.ApiService.ReviewSubmissionsItemsGetToManyRelatedExecute(r)
}

/*
ReviewSubmissionsItemsGetToManyRelated Method for ReviewSubmissionsItemsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest
*/
func (a *ReviewSubmissionsApiService) ReviewSubmissionsItemsGetToManyRelated(ctx context.Context, id string) ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest {
	return ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ReviewSubmissionItemsResponse
func (a *ReviewSubmissionsApiService) ReviewSubmissionsItemsGetToManyRelatedExecute(r ReviewSubmissionsApiReviewSubmissionsItemsGetToManyRelatedRequest) (*ReviewSubmissionItemsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReviewSubmissionItemsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReviewSubmissionsApiService.ReviewSubmissionsItemsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/reviewSubmissions/{id}/items"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppStoreVersionExperiments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperiments]", r.fieldsAppStoreVersionExperiments, "csv")
	}
	if r.fieldsReviewSubmissionItems != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[reviewSubmissionItems]", r.fieldsReviewSubmissionItems, "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "csv")
	}
	if r.fieldsAppCustomProductPageVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appCustomProductPageVersions]", r.fieldsAppCustomProductPageVersions, "csv")
	}
	if r.fieldsAppEvents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEvents]", r.fieldsAppEvents, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReviewSubmissionsApiReviewSubmissionsUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *ReviewSubmissionsApiService
	id string
	reviewSubmissionUpdateRequest *ReviewSubmissionUpdateRequest
}

// ReviewSubmission representation
func (r ReviewSubmissionsApiReviewSubmissionsUpdateInstanceRequest) ReviewSubmissionUpdateRequest(reviewSubmissionUpdateRequest ReviewSubmissionUpdateRequest) ReviewSubmissionsApiReviewSubmissionsUpdateInstanceRequest {
	r.reviewSubmissionUpdateRequest = &reviewSubmissionUpdateRequest
	return r
}

func (r ReviewSubmissionsApiReviewSubmissionsUpdateInstanceRequest) Execute() (*ReviewSubmissionResponse, *http.Response, error) {
	return r.ApiService.ReviewSubmissionsUpdateInstanceExecute(r)
}

/*
ReviewSubmissionsUpdateInstance Method for ReviewSubmissionsUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ReviewSubmissionsApiReviewSubmissionsUpdateInstanceRequest
*/
func (a *ReviewSubmissionsApiService) ReviewSubmissionsUpdateInstance(ctx context.Context, id string) ReviewSubmissionsApiReviewSubmissionsUpdateInstanceRequest {
	return ReviewSubmissionsApiReviewSubmissionsUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ReviewSubmissionResponse
func (a *ReviewSubmissionsApiService) ReviewSubmissionsUpdateInstanceExecute(r ReviewSubmissionsApiReviewSubmissionsUpdateInstanceRequest) (*ReviewSubmissionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReviewSubmissionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReviewSubmissionsApiService.ReviewSubmissionsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/reviewSubmissions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.reviewSubmissionUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("reviewSubmissionUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.reviewSubmissionUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
