/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SubscriptionAvailabilitiesApiService SubscriptionAvailabilitiesApi service
type SubscriptionAvailabilitiesApiService service

type SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *SubscriptionAvailabilitiesApiService
	id string
	fieldsTerritories *[]string
	limit *int32
}

// the fields to include for returned resources of type territories
func (r SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedRequest) FieldsTerritories(fieldsTerritories []string) SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedRequest {
	r.fieldsTerritories = &fieldsTerritories
	return r
}

// maximum resources per page
func (r SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedRequest) Limit(limit int32) SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedRequest) Execute() (*TerritoriesResponse, *http.Response, error) {
	return r.ApiService.SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedExecute(r)
}

/*
SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelated Method for SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedRequest
*/
func (a *SubscriptionAvailabilitiesApiService) SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelated(ctx context.Context, id string) SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedRequest {
	return SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TerritoriesResponse
func (a *SubscriptionAvailabilitiesApiService) SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedExecute(r SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelatedRequest) (*TerritoriesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TerritoriesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionAvailabilitiesApiService.SubscriptionAvailabilitiesAvailableTerritoriesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionAvailabilities/{id}/availableTerritories"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsTerritories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[territories]", r.fieldsTerritories, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesCreateInstanceRequest struct {
	ctx context.Context
	ApiService *SubscriptionAvailabilitiesApiService
	subscriptionAvailabilityCreateRequest *SubscriptionAvailabilityCreateRequest
}

// SubscriptionAvailability representation
func (r SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesCreateInstanceRequest) SubscriptionAvailabilityCreateRequest(subscriptionAvailabilityCreateRequest SubscriptionAvailabilityCreateRequest) SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesCreateInstanceRequest {
	r.subscriptionAvailabilityCreateRequest = &subscriptionAvailabilityCreateRequest
	return r
}

func (r SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesCreateInstanceRequest) Execute() (*SubscriptionAvailabilityResponse, *http.Response, error) {
	return r.ApiService.SubscriptionAvailabilitiesCreateInstanceExecute(r)
}

/*
SubscriptionAvailabilitiesCreateInstance Method for SubscriptionAvailabilitiesCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesCreateInstanceRequest
*/
func (a *SubscriptionAvailabilitiesApiService) SubscriptionAvailabilitiesCreateInstance(ctx context.Context) SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesCreateInstanceRequest {
	return SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SubscriptionAvailabilityResponse
func (a *SubscriptionAvailabilitiesApiService) SubscriptionAvailabilitiesCreateInstanceExecute(r SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesCreateInstanceRequest) (*SubscriptionAvailabilityResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionAvailabilityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionAvailabilitiesApiService.SubscriptionAvailabilitiesCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionAvailabilities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subscriptionAvailabilityCreateRequest == nil {
		return localVarReturnValue, nil, reportError("subscriptionAvailabilityCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.subscriptionAvailabilityCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesGetInstanceRequest struct {
	ctx context.Context
	ApiService *SubscriptionAvailabilitiesApiService
	id string
	fieldsSubscriptionAvailabilities *[]string
	include *[]string
	fieldsTerritories *[]string
	limitAvailableTerritories *int32
}

// the fields to include for returned resources of type subscriptionAvailabilities
func (r SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesGetInstanceRequest) FieldsSubscriptionAvailabilities(fieldsSubscriptionAvailabilities []string) SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesGetInstanceRequest {
	r.fieldsSubscriptionAvailabilities = &fieldsSubscriptionAvailabilities
	return r
}

// comma-separated list of relationships to include
func (r SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesGetInstanceRequest) Include(include []string) SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type territories
func (r SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesGetInstanceRequest) FieldsTerritories(fieldsTerritories []string) SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesGetInstanceRequest {
	r.fieldsTerritories = &fieldsTerritories
	return r
}

// maximum number of related availableTerritories returned (when they are included)
func (r SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesGetInstanceRequest) LimitAvailableTerritories(limitAvailableTerritories int32) SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesGetInstanceRequest {
	r.limitAvailableTerritories = &limitAvailableTerritories
	return r
}

func (r SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesGetInstanceRequest) Execute() (*SubscriptionAvailabilityResponse, *http.Response, error) {
	return r.ApiService.SubscriptionAvailabilitiesGetInstanceExecute(r)
}

/*
SubscriptionAvailabilitiesGetInstance Method for SubscriptionAvailabilitiesGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesGetInstanceRequest
*/
func (a *SubscriptionAvailabilitiesApiService) SubscriptionAvailabilitiesGetInstance(ctx context.Context, id string) SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesGetInstanceRequest {
	return SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubscriptionAvailabilityResponse
func (a *SubscriptionAvailabilitiesApiService) SubscriptionAvailabilitiesGetInstanceExecute(r SubscriptionAvailabilitiesApiSubscriptionAvailabilitiesGetInstanceRequest) (*SubscriptionAvailabilityResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionAvailabilityResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionAvailabilitiesApiService.SubscriptionAvailabilitiesGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionAvailabilities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsSubscriptionAvailabilities != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionAvailabilities]", r.fieldsSubscriptionAvailabilities, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsTerritories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[territories]", r.fieldsTerritories, "csv")
	}
	if r.limitAvailableTerritories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[availableTerritories]", r.limitAvailableTerritories, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
