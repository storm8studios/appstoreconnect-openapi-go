/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SubscriptionOfferCodeCustomCodesApiService SubscriptionOfferCodeCustomCodesApi service
type SubscriptionOfferCodeCustomCodesApiService service

type SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesCreateInstanceRequest struct {
	ctx context.Context
	ApiService *SubscriptionOfferCodeCustomCodesApiService
	subscriptionOfferCodeCustomCodeCreateRequest *SubscriptionOfferCodeCustomCodeCreateRequest
}

// SubscriptionOfferCodeCustomCode representation
func (r SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesCreateInstanceRequest) SubscriptionOfferCodeCustomCodeCreateRequest(subscriptionOfferCodeCustomCodeCreateRequest SubscriptionOfferCodeCustomCodeCreateRequest) SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesCreateInstanceRequest {
	r.subscriptionOfferCodeCustomCodeCreateRequest = &subscriptionOfferCodeCustomCodeCreateRequest
	return r
}

func (r SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesCreateInstanceRequest) Execute() (*SubscriptionOfferCodeCustomCodeResponse, *http.Response, error) {
	return r.ApiService.SubscriptionOfferCodeCustomCodesCreateInstanceExecute(r)
}

/*
SubscriptionOfferCodeCustomCodesCreateInstance Method for SubscriptionOfferCodeCustomCodesCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesCreateInstanceRequest
*/
func (a *SubscriptionOfferCodeCustomCodesApiService) SubscriptionOfferCodeCustomCodesCreateInstance(ctx context.Context) SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesCreateInstanceRequest {
	return SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SubscriptionOfferCodeCustomCodeResponse
func (a *SubscriptionOfferCodeCustomCodesApiService) SubscriptionOfferCodeCustomCodesCreateInstanceExecute(r SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesCreateInstanceRequest) (*SubscriptionOfferCodeCustomCodeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionOfferCodeCustomCodeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionOfferCodeCustomCodesApiService.SubscriptionOfferCodeCustomCodesCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionOfferCodeCustomCodes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subscriptionOfferCodeCustomCodeCreateRequest == nil {
		return localVarReturnValue, nil, reportError("subscriptionOfferCodeCustomCodeCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.subscriptionOfferCodeCustomCodeCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesGetInstanceRequest struct {
	ctx context.Context
	ApiService *SubscriptionOfferCodeCustomCodesApiService
	id string
	fieldsSubscriptionOfferCodeCustomCodes *[]string
	include *[]string
}

// the fields to include for returned resources of type subscriptionOfferCodeCustomCodes
func (r SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesGetInstanceRequest) FieldsSubscriptionOfferCodeCustomCodes(fieldsSubscriptionOfferCodeCustomCodes []string) SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesGetInstanceRequest {
	r.fieldsSubscriptionOfferCodeCustomCodes = &fieldsSubscriptionOfferCodeCustomCodes
	return r
}

// comma-separated list of relationships to include
func (r SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesGetInstanceRequest) Include(include []string) SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesGetInstanceRequest {
	r.include = &include
	return r
}

func (r SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesGetInstanceRequest) Execute() (*SubscriptionOfferCodeCustomCodeResponse, *http.Response, error) {
	return r.ApiService.SubscriptionOfferCodeCustomCodesGetInstanceExecute(r)
}

/*
SubscriptionOfferCodeCustomCodesGetInstance Method for SubscriptionOfferCodeCustomCodesGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesGetInstanceRequest
*/
func (a *SubscriptionOfferCodeCustomCodesApiService) SubscriptionOfferCodeCustomCodesGetInstance(ctx context.Context, id string) SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesGetInstanceRequest {
	return SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubscriptionOfferCodeCustomCodeResponse
func (a *SubscriptionOfferCodeCustomCodesApiService) SubscriptionOfferCodeCustomCodesGetInstanceExecute(r SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesGetInstanceRequest) (*SubscriptionOfferCodeCustomCodeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionOfferCodeCustomCodeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionOfferCodeCustomCodesApiService.SubscriptionOfferCodeCustomCodesGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionOfferCodeCustomCodes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsSubscriptionOfferCodeCustomCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodeCustomCodes]", r.fieldsSubscriptionOfferCodeCustomCodes, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *SubscriptionOfferCodeCustomCodesApiService
	id string
	subscriptionOfferCodeCustomCodeUpdateRequest *SubscriptionOfferCodeCustomCodeUpdateRequest
}

// SubscriptionOfferCodeCustomCode representation
func (r SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesUpdateInstanceRequest) SubscriptionOfferCodeCustomCodeUpdateRequest(subscriptionOfferCodeCustomCodeUpdateRequest SubscriptionOfferCodeCustomCodeUpdateRequest) SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesUpdateInstanceRequest {
	r.subscriptionOfferCodeCustomCodeUpdateRequest = &subscriptionOfferCodeCustomCodeUpdateRequest
	return r
}

func (r SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesUpdateInstanceRequest) Execute() (*SubscriptionOfferCodeCustomCodeResponse, *http.Response, error) {
	return r.ApiService.SubscriptionOfferCodeCustomCodesUpdateInstanceExecute(r)
}

/*
SubscriptionOfferCodeCustomCodesUpdateInstance Method for SubscriptionOfferCodeCustomCodesUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesUpdateInstanceRequest
*/
func (a *SubscriptionOfferCodeCustomCodesApiService) SubscriptionOfferCodeCustomCodesUpdateInstance(ctx context.Context, id string) SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesUpdateInstanceRequest {
	return SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubscriptionOfferCodeCustomCodeResponse
func (a *SubscriptionOfferCodeCustomCodesApiService) SubscriptionOfferCodeCustomCodesUpdateInstanceExecute(r SubscriptionOfferCodeCustomCodesApiSubscriptionOfferCodeCustomCodesUpdateInstanceRequest) (*SubscriptionOfferCodeCustomCodeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionOfferCodeCustomCodeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionOfferCodeCustomCodesApiService.SubscriptionOfferCodeCustomCodesUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionOfferCodeCustomCodes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subscriptionOfferCodeCustomCodeUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("subscriptionOfferCodeCustomCodeUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.subscriptionOfferCodeCustomCodeUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
