/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SubscriptionOfferCodesApiService SubscriptionOfferCodesApi service
type SubscriptionOfferCodesApiService service

type SubscriptionOfferCodesApiSubscriptionOfferCodesCreateInstanceRequest struct {
	ctx context.Context
	ApiService *SubscriptionOfferCodesApiService
	subscriptionOfferCodeCreateRequest *SubscriptionOfferCodeCreateRequest
}

// SubscriptionOfferCode representation
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesCreateInstanceRequest) SubscriptionOfferCodeCreateRequest(subscriptionOfferCodeCreateRequest SubscriptionOfferCodeCreateRequest) SubscriptionOfferCodesApiSubscriptionOfferCodesCreateInstanceRequest {
	r.subscriptionOfferCodeCreateRequest = &subscriptionOfferCodeCreateRequest
	return r
}

func (r SubscriptionOfferCodesApiSubscriptionOfferCodesCreateInstanceRequest) Execute() (*SubscriptionOfferCodeResponse, *http.Response, error) {
	return r.ApiService.SubscriptionOfferCodesCreateInstanceExecute(r)
}

/*
SubscriptionOfferCodesCreateInstance Method for SubscriptionOfferCodesCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SubscriptionOfferCodesApiSubscriptionOfferCodesCreateInstanceRequest
*/
func (a *SubscriptionOfferCodesApiService) SubscriptionOfferCodesCreateInstance(ctx context.Context) SubscriptionOfferCodesApiSubscriptionOfferCodesCreateInstanceRequest {
	return SubscriptionOfferCodesApiSubscriptionOfferCodesCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SubscriptionOfferCodeResponse
func (a *SubscriptionOfferCodesApiService) SubscriptionOfferCodesCreateInstanceExecute(r SubscriptionOfferCodesApiSubscriptionOfferCodesCreateInstanceRequest) (*SubscriptionOfferCodeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionOfferCodeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionOfferCodesApiService.SubscriptionOfferCodesCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionOfferCodes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subscriptionOfferCodeCreateRequest == nil {
		return localVarReturnValue, nil, reportError("subscriptionOfferCodeCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.subscriptionOfferCodeCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionOfferCodesApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *SubscriptionOfferCodesApiService
	id string
	fieldsSubscriptionOfferCodeCustomCodes *[]string
	fieldsSubscriptionOfferCodes *[]string
	limit *int32
	include *[]string
}

// the fields to include for returned resources of type subscriptionOfferCodeCustomCodes
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest) FieldsSubscriptionOfferCodeCustomCodes(fieldsSubscriptionOfferCodeCustomCodes []string) SubscriptionOfferCodesApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest {
	r.fieldsSubscriptionOfferCodeCustomCodes = &fieldsSubscriptionOfferCodeCustomCodes
	return r
}

// the fields to include for returned resources of type subscriptionOfferCodes
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest) FieldsSubscriptionOfferCodes(fieldsSubscriptionOfferCodes []string) SubscriptionOfferCodesApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest {
	r.fieldsSubscriptionOfferCodes = &fieldsSubscriptionOfferCodes
	return r
}

// maximum resources per page
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest) Limit(limit int32) SubscriptionOfferCodesApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest) Include(include []string) SubscriptionOfferCodesApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r SubscriptionOfferCodesApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest) Execute() (*SubscriptionOfferCodeCustomCodesResponse, *http.Response, error) {
	return r.ApiService.SubscriptionOfferCodesCustomCodesGetToManyRelatedExecute(r)
}

/*
SubscriptionOfferCodesCustomCodesGetToManyRelated Method for SubscriptionOfferCodesCustomCodesGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return SubscriptionOfferCodesApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest
*/
func (a *SubscriptionOfferCodesApiService) SubscriptionOfferCodesCustomCodesGetToManyRelated(ctx context.Context, id string) SubscriptionOfferCodesApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest {
	return SubscriptionOfferCodesApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubscriptionOfferCodeCustomCodesResponse
func (a *SubscriptionOfferCodesApiService) SubscriptionOfferCodesCustomCodesGetToManyRelatedExecute(r SubscriptionOfferCodesApiSubscriptionOfferCodesCustomCodesGetToManyRelatedRequest) (*SubscriptionOfferCodeCustomCodesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionOfferCodeCustomCodesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionOfferCodesApiService.SubscriptionOfferCodesCustomCodesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionOfferCodes/{id}/customCodes"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsSubscriptionOfferCodeCustomCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodeCustomCodes]", r.fieldsSubscriptionOfferCodeCustomCodes, "csv")
	}
	if r.fieldsSubscriptionOfferCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodes]", r.fieldsSubscriptionOfferCodes, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest struct {
	ctx context.Context
	ApiService *SubscriptionOfferCodesApiService
	id string
	fieldsSubscriptionOfferCodes *[]string
	include *[]string
	fieldsSubscriptionOfferCodeCustomCodes *[]string
	fieldsSubscriptionOfferCodeOneTimeUseCodes *[]string
	fieldsSubscriptionOfferCodePrices *[]string
	limitCustomCodes *int32
	limitOneTimeUseCodes *int32
	limitPrices *int32
}

// the fields to include for returned resources of type subscriptionOfferCodes
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest) FieldsSubscriptionOfferCodes(fieldsSubscriptionOfferCodes []string) SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest {
	r.fieldsSubscriptionOfferCodes = &fieldsSubscriptionOfferCodes
	return r
}

// comma-separated list of relationships to include
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest) Include(include []string) SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type subscriptionOfferCodeCustomCodes
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest) FieldsSubscriptionOfferCodeCustomCodes(fieldsSubscriptionOfferCodeCustomCodes []string) SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest {
	r.fieldsSubscriptionOfferCodeCustomCodes = &fieldsSubscriptionOfferCodeCustomCodes
	return r
}

// the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest) FieldsSubscriptionOfferCodeOneTimeUseCodes(fieldsSubscriptionOfferCodeOneTimeUseCodes []string) SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest {
	r.fieldsSubscriptionOfferCodeOneTimeUseCodes = &fieldsSubscriptionOfferCodeOneTimeUseCodes
	return r
}

// the fields to include for returned resources of type subscriptionOfferCodePrices
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest) FieldsSubscriptionOfferCodePrices(fieldsSubscriptionOfferCodePrices []string) SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest {
	r.fieldsSubscriptionOfferCodePrices = &fieldsSubscriptionOfferCodePrices
	return r
}

// maximum number of related customCodes returned (when they are included)
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest) LimitCustomCodes(limitCustomCodes int32) SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest {
	r.limitCustomCodes = &limitCustomCodes
	return r
}

// maximum number of related oneTimeUseCodes returned (when they are included)
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest) LimitOneTimeUseCodes(limitOneTimeUseCodes int32) SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest {
	r.limitOneTimeUseCodes = &limitOneTimeUseCodes
	return r
}

// maximum number of related prices returned (when they are included)
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest) LimitPrices(limitPrices int32) SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest {
	r.limitPrices = &limitPrices
	return r
}

func (r SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest) Execute() (*SubscriptionOfferCodeResponse, *http.Response, error) {
	return r.ApiService.SubscriptionOfferCodesGetInstanceExecute(r)
}

/*
SubscriptionOfferCodesGetInstance Method for SubscriptionOfferCodesGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest
*/
func (a *SubscriptionOfferCodesApiService) SubscriptionOfferCodesGetInstance(ctx context.Context, id string) SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest {
	return SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubscriptionOfferCodeResponse
func (a *SubscriptionOfferCodesApiService) SubscriptionOfferCodesGetInstanceExecute(r SubscriptionOfferCodesApiSubscriptionOfferCodesGetInstanceRequest) (*SubscriptionOfferCodeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionOfferCodeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionOfferCodesApiService.SubscriptionOfferCodesGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionOfferCodes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsSubscriptionOfferCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodes]", r.fieldsSubscriptionOfferCodes, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsSubscriptionOfferCodeCustomCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodeCustomCodes]", r.fieldsSubscriptionOfferCodeCustomCodes, "csv")
	}
	if r.fieldsSubscriptionOfferCodeOneTimeUseCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodeOneTimeUseCodes]", r.fieldsSubscriptionOfferCodeOneTimeUseCodes, "csv")
	}
	if r.fieldsSubscriptionOfferCodePrices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodePrices]", r.fieldsSubscriptionOfferCodePrices, "csv")
	}
	if r.limitCustomCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[customCodes]", r.limitCustomCodes, "")
	}
	if r.limitOneTimeUseCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[oneTimeUseCodes]", r.limitOneTimeUseCodes, "")
	}
	if r.limitPrices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[prices]", r.limitPrices, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionOfferCodesApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *SubscriptionOfferCodesApiService
	id string
	fieldsSubscriptionOfferCodes *[]string
	fieldsSubscriptionOfferCodeOneTimeUseCodes *[]string
	limit *int32
	include *[]string
}

// the fields to include for returned resources of type subscriptionOfferCodes
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest) FieldsSubscriptionOfferCodes(fieldsSubscriptionOfferCodes []string) SubscriptionOfferCodesApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest {
	r.fieldsSubscriptionOfferCodes = &fieldsSubscriptionOfferCodes
	return r
}

// the fields to include for returned resources of type subscriptionOfferCodeOneTimeUseCodes
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest) FieldsSubscriptionOfferCodeOneTimeUseCodes(fieldsSubscriptionOfferCodeOneTimeUseCodes []string) SubscriptionOfferCodesApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest {
	r.fieldsSubscriptionOfferCodeOneTimeUseCodes = &fieldsSubscriptionOfferCodeOneTimeUseCodes
	return r
}

// maximum resources per page
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest) Limit(limit int32) SubscriptionOfferCodesApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest) Include(include []string) SubscriptionOfferCodesApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r SubscriptionOfferCodesApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest) Execute() (*SubscriptionOfferCodeOneTimeUseCodesResponse, *http.Response, error) {
	return r.ApiService.SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedExecute(r)
}

/*
SubscriptionOfferCodesOneTimeUseCodesGetToManyRelated Method for SubscriptionOfferCodesOneTimeUseCodesGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return SubscriptionOfferCodesApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest
*/
func (a *SubscriptionOfferCodesApiService) SubscriptionOfferCodesOneTimeUseCodesGetToManyRelated(ctx context.Context, id string) SubscriptionOfferCodesApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest {
	return SubscriptionOfferCodesApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubscriptionOfferCodeOneTimeUseCodesResponse
func (a *SubscriptionOfferCodesApiService) SubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedExecute(r SubscriptionOfferCodesApiSubscriptionOfferCodesOneTimeUseCodesGetToManyRelatedRequest) (*SubscriptionOfferCodeOneTimeUseCodesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionOfferCodeOneTimeUseCodesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionOfferCodesApiService.SubscriptionOfferCodesOneTimeUseCodesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionOfferCodes/{id}/oneTimeUseCodes"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsSubscriptionOfferCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodes]", r.fieldsSubscriptionOfferCodes, "csv")
	}
	if r.fieldsSubscriptionOfferCodeOneTimeUseCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodeOneTimeUseCodes]", r.fieldsSubscriptionOfferCodeOneTimeUseCodes, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionOfferCodesApiSubscriptionOfferCodesPricesGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *SubscriptionOfferCodesApiService
	id string
	filterTerritory *[]string
	fieldsSubscriptionPricePoints *[]string
	fieldsTerritories *[]string
	fieldsSubscriptionOfferCodePrices *[]string
	limit *int32
	include *[]string
}

// filter by id(s) of related &#39;territory&#39;
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesPricesGetToManyRelatedRequest) FilterTerritory(filterTerritory []string) SubscriptionOfferCodesApiSubscriptionOfferCodesPricesGetToManyRelatedRequest {
	r.filterTerritory = &filterTerritory
	return r
}

// the fields to include for returned resources of type subscriptionPricePoints
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesPricesGetToManyRelatedRequest) FieldsSubscriptionPricePoints(fieldsSubscriptionPricePoints []string) SubscriptionOfferCodesApiSubscriptionOfferCodesPricesGetToManyRelatedRequest {
	r.fieldsSubscriptionPricePoints = &fieldsSubscriptionPricePoints
	return r
}

// the fields to include for returned resources of type territories
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesPricesGetToManyRelatedRequest) FieldsTerritories(fieldsTerritories []string) SubscriptionOfferCodesApiSubscriptionOfferCodesPricesGetToManyRelatedRequest {
	r.fieldsTerritories = &fieldsTerritories
	return r
}

// the fields to include for returned resources of type subscriptionOfferCodePrices
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesPricesGetToManyRelatedRequest) FieldsSubscriptionOfferCodePrices(fieldsSubscriptionOfferCodePrices []string) SubscriptionOfferCodesApiSubscriptionOfferCodesPricesGetToManyRelatedRequest {
	r.fieldsSubscriptionOfferCodePrices = &fieldsSubscriptionOfferCodePrices
	return r
}

// maximum resources per page
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesPricesGetToManyRelatedRequest) Limit(limit int32) SubscriptionOfferCodesApiSubscriptionOfferCodesPricesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesPricesGetToManyRelatedRequest) Include(include []string) SubscriptionOfferCodesApiSubscriptionOfferCodesPricesGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r SubscriptionOfferCodesApiSubscriptionOfferCodesPricesGetToManyRelatedRequest) Execute() (*SubscriptionOfferCodePricesResponse, *http.Response, error) {
	return r.ApiService.SubscriptionOfferCodesPricesGetToManyRelatedExecute(r)
}

/*
SubscriptionOfferCodesPricesGetToManyRelated Method for SubscriptionOfferCodesPricesGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return SubscriptionOfferCodesApiSubscriptionOfferCodesPricesGetToManyRelatedRequest
*/
func (a *SubscriptionOfferCodesApiService) SubscriptionOfferCodesPricesGetToManyRelated(ctx context.Context, id string) SubscriptionOfferCodesApiSubscriptionOfferCodesPricesGetToManyRelatedRequest {
	return SubscriptionOfferCodesApiSubscriptionOfferCodesPricesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubscriptionOfferCodePricesResponse
func (a *SubscriptionOfferCodesApiService) SubscriptionOfferCodesPricesGetToManyRelatedExecute(r SubscriptionOfferCodesApiSubscriptionOfferCodesPricesGetToManyRelatedRequest) (*SubscriptionOfferCodePricesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionOfferCodePricesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionOfferCodesApiService.SubscriptionOfferCodesPricesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionOfferCodes/{id}/prices"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterTerritory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[territory]", r.filterTerritory, "csv")
	}
	if r.fieldsSubscriptionPricePoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionPricePoints]", r.fieldsSubscriptionPricePoints, "csv")
	}
	if r.fieldsTerritories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[territories]", r.fieldsTerritories, "csv")
	}
	if r.fieldsSubscriptionOfferCodePrices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodePrices]", r.fieldsSubscriptionOfferCodePrices, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionOfferCodesApiSubscriptionOfferCodesUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *SubscriptionOfferCodesApiService
	id string
	subscriptionOfferCodeUpdateRequest *SubscriptionOfferCodeUpdateRequest
}

// SubscriptionOfferCode representation
func (r SubscriptionOfferCodesApiSubscriptionOfferCodesUpdateInstanceRequest) SubscriptionOfferCodeUpdateRequest(subscriptionOfferCodeUpdateRequest SubscriptionOfferCodeUpdateRequest) SubscriptionOfferCodesApiSubscriptionOfferCodesUpdateInstanceRequest {
	r.subscriptionOfferCodeUpdateRequest = &subscriptionOfferCodeUpdateRequest
	return r
}

func (r SubscriptionOfferCodesApiSubscriptionOfferCodesUpdateInstanceRequest) Execute() (*SubscriptionOfferCodeResponse, *http.Response, error) {
	return r.ApiService.SubscriptionOfferCodesUpdateInstanceExecute(r)
}

/*
SubscriptionOfferCodesUpdateInstance Method for SubscriptionOfferCodesUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return SubscriptionOfferCodesApiSubscriptionOfferCodesUpdateInstanceRequest
*/
func (a *SubscriptionOfferCodesApiService) SubscriptionOfferCodesUpdateInstance(ctx context.Context, id string) SubscriptionOfferCodesApiSubscriptionOfferCodesUpdateInstanceRequest {
	return SubscriptionOfferCodesApiSubscriptionOfferCodesUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubscriptionOfferCodeResponse
func (a *SubscriptionOfferCodesApiService) SubscriptionOfferCodesUpdateInstanceExecute(r SubscriptionOfferCodesApiSubscriptionOfferCodesUpdateInstanceRequest) (*SubscriptionOfferCodeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionOfferCodeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionOfferCodesApiService.SubscriptionOfferCodesUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionOfferCodes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subscriptionOfferCodeUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("subscriptionOfferCodeUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.subscriptionOfferCodeUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
