/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SubscriptionPromotionalOffersApiService SubscriptionPromotionalOffersApi service
type SubscriptionPromotionalOffersApiService service

type SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersCreateInstanceRequest struct {
	ctx context.Context
	ApiService *SubscriptionPromotionalOffersApiService
	subscriptionPromotionalOfferCreateRequest *SubscriptionPromotionalOfferCreateRequest
}

// SubscriptionPromotionalOffer representation
func (r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersCreateInstanceRequest) SubscriptionPromotionalOfferCreateRequest(subscriptionPromotionalOfferCreateRequest SubscriptionPromotionalOfferCreateRequest) SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersCreateInstanceRequest {
	r.subscriptionPromotionalOfferCreateRequest = &subscriptionPromotionalOfferCreateRequest
	return r
}

func (r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersCreateInstanceRequest) Execute() (*SubscriptionPromotionalOfferResponse, *http.Response, error) {
	return r.ApiService.SubscriptionPromotionalOffersCreateInstanceExecute(r)
}

/*
SubscriptionPromotionalOffersCreateInstance Method for SubscriptionPromotionalOffersCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersCreateInstanceRequest
*/
func (a *SubscriptionPromotionalOffersApiService) SubscriptionPromotionalOffersCreateInstance(ctx context.Context) SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersCreateInstanceRequest {
	return SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SubscriptionPromotionalOfferResponse
func (a *SubscriptionPromotionalOffersApiService) SubscriptionPromotionalOffersCreateInstanceExecute(r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersCreateInstanceRequest) (*SubscriptionPromotionalOfferResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionPromotionalOfferResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionPromotionalOffersApiService.SubscriptionPromotionalOffersCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionPromotionalOffers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subscriptionPromotionalOfferCreateRequest == nil {
		return localVarReturnValue, nil, reportError("subscriptionPromotionalOfferCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.subscriptionPromotionalOfferCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *SubscriptionPromotionalOffersApiService
	id string
}

func (r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.SubscriptionPromotionalOffersDeleteInstanceExecute(r)
}

/*
SubscriptionPromotionalOffersDeleteInstance Method for SubscriptionPromotionalOffersDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersDeleteInstanceRequest
*/
func (a *SubscriptionPromotionalOffersApiService) SubscriptionPromotionalOffersDeleteInstance(ctx context.Context, id string) SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersDeleteInstanceRequest {
	return SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *SubscriptionPromotionalOffersApiService) SubscriptionPromotionalOffersDeleteInstanceExecute(r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionPromotionalOffersApiService.SubscriptionPromotionalOffersDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionPromotionalOffers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersGetInstanceRequest struct {
	ctx context.Context
	ApiService *SubscriptionPromotionalOffersApiService
	id string
	fieldsSubscriptionPromotionalOffers *[]string
	include *[]string
	fieldsSubscriptionPromotionalOfferPrices *[]string
	limitPrices *int32
}

// the fields to include for returned resources of type subscriptionPromotionalOffers
func (r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersGetInstanceRequest) FieldsSubscriptionPromotionalOffers(fieldsSubscriptionPromotionalOffers []string) SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersGetInstanceRequest {
	r.fieldsSubscriptionPromotionalOffers = &fieldsSubscriptionPromotionalOffers
	return r
}

// comma-separated list of relationships to include
func (r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersGetInstanceRequest) Include(include []string) SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type subscriptionPromotionalOfferPrices
func (r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersGetInstanceRequest) FieldsSubscriptionPromotionalOfferPrices(fieldsSubscriptionPromotionalOfferPrices []string) SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersGetInstanceRequest {
	r.fieldsSubscriptionPromotionalOfferPrices = &fieldsSubscriptionPromotionalOfferPrices
	return r
}

// maximum number of related prices returned (when they are included)
func (r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersGetInstanceRequest) LimitPrices(limitPrices int32) SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersGetInstanceRequest {
	r.limitPrices = &limitPrices
	return r
}

func (r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersGetInstanceRequest) Execute() (*SubscriptionPromotionalOfferResponse, *http.Response, error) {
	return r.ApiService.SubscriptionPromotionalOffersGetInstanceExecute(r)
}

/*
SubscriptionPromotionalOffersGetInstance Method for SubscriptionPromotionalOffersGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersGetInstanceRequest
*/
func (a *SubscriptionPromotionalOffersApiService) SubscriptionPromotionalOffersGetInstance(ctx context.Context, id string) SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersGetInstanceRequest {
	return SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubscriptionPromotionalOfferResponse
func (a *SubscriptionPromotionalOffersApiService) SubscriptionPromotionalOffersGetInstanceExecute(r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersGetInstanceRequest) (*SubscriptionPromotionalOfferResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionPromotionalOfferResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionPromotionalOffersApiService.SubscriptionPromotionalOffersGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionPromotionalOffers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsSubscriptionPromotionalOffers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionPromotionalOffers]", r.fieldsSubscriptionPromotionalOffers, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsSubscriptionPromotionalOfferPrices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionPromotionalOfferPrices]", r.fieldsSubscriptionPromotionalOfferPrices, "csv")
	}
	if r.limitPrices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[prices]", r.limitPrices, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersPricesGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *SubscriptionPromotionalOffersApiService
	id string
	filterTerritory *[]string
	fieldsSubscriptionPricePoints *[]string
	fieldsTerritories *[]string
	fieldsSubscriptionPromotionalOfferPrices *[]string
	limit *int32
	include *[]string
}

// filter by id(s) of related &#39;territory&#39;
func (r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersPricesGetToManyRelatedRequest) FilterTerritory(filterTerritory []string) SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersPricesGetToManyRelatedRequest {
	r.filterTerritory = &filterTerritory
	return r
}

// the fields to include for returned resources of type subscriptionPricePoints
func (r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersPricesGetToManyRelatedRequest) FieldsSubscriptionPricePoints(fieldsSubscriptionPricePoints []string) SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersPricesGetToManyRelatedRequest {
	r.fieldsSubscriptionPricePoints = &fieldsSubscriptionPricePoints
	return r
}

// the fields to include for returned resources of type territories
func (r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersPricesGetToManyRelatedRequest) FieldsTerritories(fieldsTerritories []string) SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersPricesGetToManyRelatedRequest {
	r.fieldsTerritories = &fieldsTerritories
	return r
}

// the fields to include for returned resources of type subscriptionPromotionalOfferPrices
func (r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersPricesGetToManyRelatedRequest) FieldsSubscriptionPromotionalOfferPrices(fieldsSubscriptionPromotionalOfferPrices []string) SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersPricesGetToManyRelatedRequest {
	r.fieldsSubscriptionPromotionalOfferPrices = &fieldsSubscriptionPromotionalOfferPrices
	return r
}

// maximum resources per page
func (r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersPricesGetToManyRelatedRequest) Limit(limit int32) SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersPricesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersPricesGetToManyRelatedRequest) Include(include []string) SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersPricesGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersPricesGetToManyRelatedRequest) Execute() (*SubscriptionPromotionalOfferPricesResponse, *http.Response, error) {
	return r.ApiService.SubscriptionPromotionalOffersPricesGetToManyRelatedExecute(r)
}

/*
SubscriptionPromotionalOffersPricesGetToManyRelated Method for SubscriptionPromotionalOffersPricesGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersPricesGetToManyRelatedRequest
*/
func (a *SubscriptionPromotionalOffersApiService) SubscriptionPromotionalOffersPricesGetToManyRelated(ctx context.Context, id string) SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersPricesGetToManyRelatedRequest {
	return SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersPricesGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubscriptionPromotionalOfferPricesResponse
func (a *SubscriptionPromotionalOffersApiService) SubscriptionPromotionalOffersPricesGetToManyRelatedExecute(r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersPricesGetToManyRelatedRequest) (*SubscriptionPromotionalOfferPricesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionPromotionalOfferPricesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionPromotionalOffersApiService.SubscriptionPromotionalOffersPricesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionPromotionalOffers/{id}/prices"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterTerritory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[territory]", r.filterTerritory, "csv")
	}
	if r.fieldsSubscriptionPricePoints != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionPricePoints]", r.fieldsSubscriptionPricePoints, "csv")
	}
	if r.fieldsTerritories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[territories]", r.fieldsTerritories, "csv")
	}
	if r.fieldsSubscriptionPromotionalOfferPrices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionPromotionalOfferPrices]", r.fieldsSubscriptionPromotionalOfferPrices, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersUpdateInstanceRequest struct {
	ctx context.Context
	ApiService *SubscriptionPromotionalOffersApiService
	id string
	subscriptionPromotionalOfferUpdateRequest *SubscriptionPromotionalOfferUpdateRequest
}

// SubscriptionPromotionalOffer representation
func (r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersUpdateInstanceRequest) SubscriptionPromotionalOfferUpdateRequest(subscriptionPromotionalOfferUpdateRequest SubscriptionPromotionalOfferUpdateRequest) SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersUpdateInstanceRequest {
	r.subscriptionPromotionalOfferUpdateRequest = &subscriptionPromotionalOfferUpdateRequest
	return r
}

func (r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersUpdateInstanceRequest) Execute() (*SubscriptionPromotionalOfferResponse, *http.Response, error) {
	return r.ApiService.SubscriptionPromotionalOffersUpdateInstanceExecute(r)
}

/*
SubscriptionPromotionalOffersUpdateInstance Method for SubscriptionPromotionalOffersUpdateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersUpdateInstanceRequest
*/
func (a *SubscriptionPromotionalOffersApiService) SubscriptionPromotionalOffersUpdateInstance(ctx context.Context, id string) SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersUpdateInstanceRequest {
	return SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersUpdateInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubscriptionPromotionalOfferResponse
func (a *SubscriptionPromotionalOffersApiService) SubscriptionPromotionalOffersUpdateInstanceExecute(r SubscriptionPromotionalOffersApiSubscriptionPromotionalOffersUpdateInstanceRequest) (*SubscriptionPromotionalOfferResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubscriptionPromotionalOfferResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionPromotionalOffersApiService.SubscriptionPromotionalOffersUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionPromotionalOffers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subscriptionPromotionalOfferUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("subscriptionPromotionalOfferUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.subscriptionPromotionalOfferUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
