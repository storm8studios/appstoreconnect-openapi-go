/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// UserInvitationsApiService UserInvitationsApi service
type UserInvitationsApiService service

type UserInvitationsApiUserInvitationsCreateInstanceRequest struct {
	ctx context.Context
	ApiService *UserInvitationsApiService
	userInvitationCreateRequest *UserInvitationCreateRequest
}

// UserInvitation representation
func (r UserInvitationsApiUserInvitationsCreateInstanceRequest) UserInvitationCreateRequest(userInvitationCreateRequest UserInvitationCreateRequest) UserInvitationsApiUserInvitationsCreateInstanceRequest {
	r.userInvitationCreateRequest = &userInvitationCreateRequest
	return r
}

func (r UserInvitationsApiUserInvitationsCreateInstanceRequest) Execute() (*UserInvitationResponse, *http.Response, error) {
	return r.ApiService.UserInvitationsCreateInstanceExecute(r)
}

/*
UserInvitationsCreateInstance Method for UserInvitationsCreateInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UserInvitationsApiUserInvitationsCreateInstanceRequest
*/
func (a *UserInvitationsApiService) UserInvitationsCreateInstance(ctx context.Context) UserInvitationsApiUserInvitationsCreateInstanceRequest {
	return UserInvitationsApiUserInvitationsCreateInstanceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserInvitationResponse
func (a *UserInvitationsApiService) UserInvitationsCreateInstanceExecute(r UserInvitationsApiUserInvitationsCreateInstanceRequest) (*UserInvitationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserInvitationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserInvitationsApiService.UserInvitationsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/userInvitations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userInvitationCreateRequest == nil {
		return localVarReturnValue, nil, reportError("userInvitationCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userInvitationCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserInvitationsApiUserInvitationsDeleteInstanceRequest struct {
	ctx context.Context
	ApiService *UserInvitationsApiService
	id string
}

func (r UserInvitationsApiUserInvitationsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.UserInvitationsDeleteInstanceExecute(r)
}

/*
UserInvitationsDeleteInstance Method for UserInvitationsDeleteInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return UserInvitationsApiUserInvitationsDeleteInstanceRequest
*/
func (a *UserInvitationsApiService) UserInvitationsDeleteInstance(ctx context.Context, id string) UserInvitationsApiUserInvitationsDeleteInstanceRequest {
	return UserInvitationsApiUserInvitationsDeleteInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *UserInvitationsApiService) UserInvitationsDeleteInstanceExecute(r UserInvitationsApiUserInvitationsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserInvitationsApiService.UserInvitationsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/userInvitations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type UserInvitationsApiUserInvitationsGetCollectionRequest struct {
	ctx context.Context
	ApiService *UserInvitationsApiService
	filterEmail *[]string
	filterRoles *[]string
	filterVisibleApps *[]string
	sort *[]string
	fieldsUserInvitations *[]string
	limit *int32
	include *[]string
	fieldsApps *[]string
	limitVisibleApps *int32
}

// filter by attribute &#39;email&#39;
func (r UserInvitationsApiUserInvitationsGetCollectionRequest) FilterEmail(filterEmail []string) UserInvitationsApiUserInvitationsGetCollectionRequest {
	r.filterEmail = &filterEmail
	return r
}

// filter by attribute &#39;roles&#39;
func (r UserInvitationsApiUserInvitationsGetCollectionRequest) FilterRoles(filterRoles []string) UserInvitationsApiUserInvitationsGetCollectionRequest {
	r.filterRoles = &filterRoles
	return r
}

// filter by id(s) of related &#39;visibleApps&#39;
func (r UserInvitationsApiUserInvitationsGetCollectionRequest) FilterVisibleApps(filterVisibleApps []string) UserInvitationsApiUserInvitationsGetCollectionRequest {
	r.filterVisibleApps = &filterVisibleApps
	return r
}

// comma-separated list of sort expressions; resources will be sorted as specified
func (r UserInvitationsApiUserInvitationsGetCollectionRequest) Sort(sort []string) UserInvitationsApiUserInvitationsGetCollectionRequest {
	r.sort = &sort
	return r
}

// the fields to include for returned resources of type userInvitations
func (r UserInvitationsApiUserInvitationsGetCollectionRequest) FieldsUserInvitations(fieldsUserInvitations []string) UserInvitationsApiUserInvitationsGetCollectionRequest {
	r.fieldsUserInvitations = &fieldsUserInvitations
	return r
}

// maximum resources per page
func (r UserInvitationsApiUserInvitationsGetCollectionRequest) Limit(limit int32) UserInvitationsApiUserInvitationsGetCollectionRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r UserInvitationsApiUserInvitationsGetCollectionRequest) Include(include []string) UserInvitationsApiUserInvitationsGetCollectionRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type apps
func (r UserInvitationsApiUserInvitationsGetCollectionRequest) FieldsApps(fieldsApps []string) UserInvitationsApiUserInvitationsGetCollectionRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// maximum number of related visibleApps returned (when they are included)
func (r UserInvitationsApiUserInvitationsGetCollectionRequest) LimitVisibleApps(limitVisibleApps int32) UserInvitationsApiUserInvitationsGetCollectionRequest {
	r.limitVisibleApps = &limitVisibleApps
	return r
}

func (r UserInvitationsApiUserInvitationsGetCollectionRequest) Execute() (*UserInvitationsResponse, *http.Response, error) {
	return r.ApiService.UserInvitationsGetCollectionExecute(r)
}

/*
UserInvitationsGetCollection Method for UserInvitationsGetCollection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UserInvitationsApiUserInvitationsGetCollectionRequest
*/
func (a *UserInvitationsApiService) UserInvitationsGetCollection(ctx context.Context) UserInvitationsApiUserInvitationsGetCollectionRequest {
	return UserInvitationsApiUserInvitationsGetCollectionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserInvitationsResponse
func (a *UserInvitationsApiService) UserInvitationsGetCollectionExecute(r UserInvitationsApiUserInvitationsGetCollectionRequest) (*UserInvitationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserInvitationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserInvitationsApiService.UserInvitationsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/userInvitations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterEmail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[email]", r.filterEmail, "csv")
	}
	if r.filterRoles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[roles]", r.filterRoles, "csv")
	}
	if r.filterVisibleApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[visibleApps]", r.filterVisibleApps, "csv")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "csv")
	}
	if r.fieldsUserInvitations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[userInvitations]", r.fieldsUserInvitations, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	if r.limitVisibleApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[visibleApps]", r.limitVisibleApps, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserInvitationsApiUserInvitationsGetInstanceRequest struct {
	ctx context.Context
	ApiService *UserInvitationsApiService
	id string
	fieldsUserInvitations *[]string
	include *[]string
	fieldsApps *[]string
	limitVisibleApps *int32
}

// the fields to include for returned resources of type userInvitations
func (r UserInvitationsApiUserInvitationsGetInstanceRequest) FieldsUserInvitations(fieldsUserInvitations []string) UserInvitationsApiUserInvitationsGetInstanceRequest {
	r.fieldsUserInvitations = &fieldsUserInvitations
	return r
}

// comma-separated list of relationships to include
func (r UserInvitationsApiUserInvitationsGetInstanceRequest) Include(include []string) UserInvitationsApiUserInvitationsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type apps
func (r UserInvitationsApiUserInvitationsGetInstanceRequest) FieldsApps(fieldsApps []string) UserInvitationsApiUserInvitationsGetInstanceRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// maximum number of related visibleApps returned (when they are included)
func (r UserInvitationsApiUserInvitationsGetInstanceRequest) LimitVisibleApps(limitVisibleApps int32) UserInvitationsApiUserInvitationsGetInstanceRequest {
	r.limitVisibleApps = &limitVisibleApps
	return r
}

func (r UserInvitationsApiUserInvitationsGetInstanceRequest) Execute() (*UserInvitationResponse, *http.Response, error) {
	return r.ApiService.UserInvitationsGetInstanceExecute(r)
}

/*
UserInvitationsGetInstance Method for UserInvitationsGetInstance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return UserInvitationsApiUserInvitationsGetInstanceRequest
*/
func (a *UserInvitationsApiService) UserInvitationsGetInstance(ctx context.Context, id string) UserInvitationsApiUserInvitationsGetInstanceRequest {
	return UserInvitationsApiUserInvitationsGetInstanceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return UserInvitationResponse
func (a *UserInvitationsApiService) UserInvitationsGetInstanceExecute(r UserInvitationsApiUserInvitationsGetInstanceRequest) (*UserInvitationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserInvitationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserInvitationsApiService.UserInvitationsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/userInvitations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsUserInvitations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[userInvitations]", r.fieldsUserInvitations, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	if r.limitVisibleApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[visibleApps]", r.limitVisibleApps, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserInvitationsApiUserInvitationsVisibleAppsGetToManyRelatedRequest struct {
	ctx context.Context
	ApiService *UserInvitationsApiService
	id string
	fieldsApps *[]string
	limit *int32
}

// the fields to include for returned resources of type apps
func (r UserInvitationsApiUserInvitationsVisibleAppsGetToManyRelatedRequest) FieldsApps(fieldsApps []string) UserInvitationsApiUserInvitationsVisibleAppsGetToManyRelatedRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// maximum resources per page
func (r UserInvitationsApiUserInvitationsVisibleAppsGetToManyRelatedRequest) Limit(limit int32) UserInvitationsApiUserInvitationsVisibleAppsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r UserInvitationsApiUserInvitationsVisibleAppsGetToManyRelatedRequest) Execute() (*AppsResponse, *http.Response, error) {
	return r.ApiService.UserInvitationsVisibleAppsGetToManyRelatedExecute(r)
}

/*
UserInvitationsVisibleAppsGetToManyRelated Method for UserInvitationsVisibleAppsGetToManyRelated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return UserInvitationsApiUserInvitationsVisibleAppsGetToManyRelatedRequest
*/
func (a *UserInvitationsApiService) UserInvitationsVisibleAppsGetToManyRelated(ctx context.Context, id string) UserInvitationsApiUserInvitationsVisibleAppsGetToManyRelatedRequest {
	return UserInvitationsApiUserInvitationsVisibleAppsGetToManyRelatedRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppsResponse
func (a *UserInvitationsApiService) UserInvitationsVisibleAppsGetToManyRelatedExecute(r UserInvitationsApiUserInvitationsVisibleAppsGetToManyRelatedRequest) (*AppsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserInvitationsApiService.UserInvitationsVisibleAppsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/userInvitations/{id}/visibleApps"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
