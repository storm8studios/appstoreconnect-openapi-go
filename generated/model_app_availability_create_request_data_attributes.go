/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
)

// checks if the AppAvailabilityCreateRequestDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppAvailabilityCreateRequestDataAttributes{}

// AppAvailabilityCreateRequestDataAttributes struct for AppAvailabilityCreateRequestDataAttributes
type AppAvailabilityCreateRequestDataAttributes struct {
	AvailableInNewTerritories bool `json:"availableInNewTerritories"`
}

// NewAppAvailabilityCreateRequestDataAttributes instantiates a new AppAvailabilityCreateRequestDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppAvailabilityCreateRequestDataAttributes(availableInNewTerritories bool) *AppAvailabilityCreateRequestDataAttributes {
	this := AppAvailabilityCreateRequestDataAttributes{}
	this.AvailableInNewTerritories = availableInNewTerritories
	return &this
}

// NewAppAvailabilityCreateRequestDataAttributesWithDefaults instantiates a new AppAvailabilityCreateRequestDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppAvailabilityCreateRequestDataAttributesWithDefaults() *AppAvailabilityCreateRequestDataAttributes {
	this := AppAvailabilityCreateRequestDataAttributes{}
	return &this
}

// GetAvailableInNewTerritories returns the AvailableInNewTerritories field value
func (o *AppAvailabilityCreateRequestDataAttributes) GetAvailableInNewTerritories() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AvailableInNewTerritories
}

// GetAvailableInNewTerritoriesOk returns a tuple with the AvailableInNewTerritories field value
// and a boolean to check if the value has been set.
func (o *AppAvailabilityCreateRequestDataAttributes) GetAvailableInNewTerritoriesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailableInNewTerritories, true
}

// SetAvailableInNewTerritories sets field value
func (o *AppAvailabilityCreateRequestDataAttributes) SetAvailableInNewTerritories(v bool) {
	o.AvailableInNewTerritories = v
}

func (o AppAvailabilityCreateRequestDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppAvailabilityCreateRequestDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["availableInNewTerritories"] = o.AvailableInNewTerritories
	return toSerialize, nil
}

type NullableAppAvailabilityCreateRequestDataAttributes struct {
	value *AppAvailabilityCreateRequestDataAttributes
	isSet bool
}

func (v NullableAppAvailabilityCreateRequestDataAttributes) Get() *AppAvailabilityCreateRequestDataAttributes {
	return v.value
}

func (v *NullableAppAvailabilityCreateRequestDataAttributes) Set(val *AppAvailabilityCreateRequestDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableAppAvailabilityCreateRequestDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableAppAvailabilityCreateRequestDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppAvailabilityCreateRequestDataAttributes(val *AppAvailabilityCreateRequestDataAttributes) *NullableAppAvailabilityCreateRequestDataAttributes {
	return &NullableAppAvailabilityCreateRequestDataAttributes{value: val, isSet: true}
}

func (v NullableAppAvailabilityCreateRequestDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppAvailabilityCreateRequestDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


