/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
)

// checks if the AppInfoLocalization type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppInfoLocalization{}

// AppInfoLocalization struct for AppInfoLocalization
type AppInfoLocalization struct {
	Type string `json:"type"`
	Id string `json:"id"`
	Attributes *AppInfoLocalizationAttributes `json:"attributes,omitempty"`
	Relationships *AppInfoLocalizationRelationships `json:"relationships,omitempty"`
	Links ResourceLinks `json:"links"`
}

// NewAppInfoLocalization instantiates a new AppInfoLocalization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppInfoLocalization(type_ string, id string, links ResourceLinks) *AppInfoLocalization {
	this := AppInfoLocalization{}
	this.Type = type_
	this.Id = id
	this.Links = links
	return &this
}

// NewAppInfoLocalizationWithDefaults instantiates a new AppInfoLocalization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppInfoLocalizationWithDefaults() *AppInfoLocalization {
	this := AppInfoLocalization{}
	return &this
}

// GetType returns the Type field value
func (o *AppInfoLocalization) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AppInfoLocalization) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AppInfoLocalization) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value
func (o *AppInfoLocalization) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AppInfoLocalization) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AppInfoLocalization) SetId(v string) {
	o.Id = v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *AppInfoLocalization) GetAttributes() AppInfoLocalizationAttributes {
	if o == nil || IsNil(o.Attributes) {
		var ret AppInfoLocalizationAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoLocalization) GetAttributesOk() (*AppInfoLocalizationAttributes, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *AppInfoLocalization) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given AppInfoLocalizationAttributes and assigns it to the Attributes field.
func (o *AppInfoLocalization) SetAttributes(v AppInfoLocalizationAttributes) {
	o.Attributes = &v
}

// GetRelationships returns the Relationships field value if set, zero value otherwise.
func (o *AppInfoLocalization) GetRelationships() AppInfoLocalizationRelationships {
	if o == nil || IsNil(o.Relationships) {
		var ret AppInfoLocalizationRelationships
		return ret
	}
	return *o.Relationships
}

// GetRelationshipsOk returns a tuple with the Relationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfoLocalization) GetRelationshipsOk() (*AppInfoLocalizationRelationships, bool) {
	if o == nil || IsNil(o.Relationships) {
		return nil, false
	}
	return o.Relationships, true
}

// HasRelationships returns a boolean if a field has been set.
func (o *AppInfoLocalization) HasRelationships() bool {
	if o != nil && !IsNil(o.Relationships) {
		return true
	}

	return false
}

// SetRelationships gets a reference to the given AppInfoLocalizationRelationships and assigns it to the Relationships field.
func (o *AppInfoLocalization) SetRelationships(v AppInfoLocalizationRelationships) {
	o.Relationships = &v
}

// GetLinks returns the Links field value
func (o *AppInfoLocalization) GetLinks() ResourceLinks {
	if o == nil {
		var ret ResourceLinks
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *AppInfoLocalization) GetLinksOk() (*ResourceLinks, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *AppInfoLocalization) SetLinks(v ResourceLinks) {
	o.Links = v
}

func (o AppInfoLocalization) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppInfoLocalization) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["id"] = o.Id
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Relationships) {
		toSerialize["relationships"] = o.Relationships
	}
	toSerialize["links"] = o.Links
	return toSerialize, nil
}

type NullableAppInfoLocalization struct {
	value *AppInfoLocalization
	isSet bool
}

func (v NullableAppInfoLocalization) Get() *AppInfoLocalization {
	return v.value
}

func (v *NullableAppInfoLocalization) Set(val *AppInfoLocalization) {
	v.value = val
	v.isSet = true
}

func (v NullableAppInfoLocalization) IsSet() bool {
	return v.isSet
}

func (v *NullableAppInfoLocalization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppInfoLocalization(val *AppInfoLocalization) *NullableAppInfoLocalization {
	return &NullableAppInfoLocalization{value: val, isSet: true}
}

func (v NullableAppInfoLocalization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppInfoLocalization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


