/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"fmt"
)

// AppPricePointsResponseIncludedInner - struct for AppPricePointsResponseIncludedInner
type AppPricePointsResponseIncludedInner struct {
	AppPriceTier *AppPriceTier
	Territory *Territory
}

// AppPriceTierAsAppPricePointsResponseIncludedInner is a convenience function that returns AppPriceTier wrapped in AppPricePointsResponseIncludedInner
func AppPriceTierAsAppPricePointsResponseIncludedInner(v *AppPriceTier) AppPricePointsResponseIncludedInner {
	return AppPricePointsResponseIncludedInner{
		AppPriceTier: v,
	}
}

// TerritoryAsAppPricePointsResponseIncludedInner is a convenience function that returns Territory wrapped in AppPricePointsResponseIncludedInner
func TerritoryAsAppPricePointsResponseIncludedInner(v *Territory) AppPricePointsResponseIncludedInner {
	return AppPricePointsResponseIncludedInner{
		Territory: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AppPricePointsResponseIncludedInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AppPriceTier
	err = newStrictDecoder(data).Decode(&dst.AppPriceTier)
	if err == nil {
		jsonAppPriceTier, _ := json.Marshal(dst.AppPriceTier)
		if string(jsonAppPriceTier) == "{}" { // empty struct
			dst.AppPriceTier = nil
		} else {
			match++
		}
	} else {
		dst.AppPriceTier = nil
	}

	// try to unmarshal data into Territory
	err = newStrictDecoder(data).Decode(&dst.Territory)
	if err == nil {
		jsonTerritory, _ := json.Marshal(dst.Territory)
		if string(jsonTerritory) == "{}" { // empty struct
			dst.Territory = nil
		} else {
			match++
		}
	} else {
		dst.Territory = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AppPriceTier = nil
		dst.Territory = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AppPricePointsResponseIncludedInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AppPricePointsResponseIncludedInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AppPricePointsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	if src.AppPriceTier != nil {
		return json.Marshal(&src.AppPriceTier)
	}

	if src.Territory != nil {
		return json.Marshal(&src.Territory)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AppPricePointsResponseIncludedInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AppPriceTier != nil {
		return obj.AppPriceTier
	}

	if obj.Territory != nil {
		return obj.Territory
	}

	// all schemas are nil
	return nil
}

type NullableAppPricePointsResponseIncludedInner struct {
	value *AppPricePointsResponseIncludedInner
	isSet bool
}

func (v NullableAppPricePointsResponseIncludedInner) Get() *AppPricePointsResponseIncludedInner {
	return v.value
}

func (v *NullableAppPricePointsResponseIncludedInner) Set(val *AppPricePointsResponseIncludedInner) {
	v.value = val
	v.isSet = true
}

func (v NullableAppPricePointsResponseIncludedInner) IsSet() bool {
	return v.isSet
}

func (v *NullableAppPricePointsResponseIncludedInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppPricePointsResponseIncludedInner(val *AppPricePointsResponseIncludedInner) *NullableAppPricePointsResponseIncludedInner {
	return &NullableAppPricePointsResponseIncludedInner{value: val, isSet: true}
}

func (v NullableAppPricePointsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppPricePointsResponseIncludedInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


