/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"fmt"
)

// BetaReviewState the model 'BetaReviewState'
type BetaReviewState string

// List of BetaReviewState
const (
	BETAREVIEWSTATE_WAITING_FOR_REVIEW BetaReviewState = "WAITING_FOR_REVIEW"
	BETAREVIEWSTATE_IN_REVIEW BetaReviewState = "IN_REVIEW"
	BETAREVIEWSTATE_REJECTED BetaReviewState = "REJECTED"
	BETAREVIEWSTATE_APPROVED BetaReviewState = "APPROVED"
)

// All allowed values of BetaReviewState enum
var AllowedBetaReviewStateEnumValues = []BetaReviewState{
	"WAITING_FOR_REVIEW",
	"IN_REVIEW",
	"REJECTED",
	"APPROVED",
}

func (v *BetaReviewState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BetaReviewState(value)
	for _, existing := range AllowedBetaReviewStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BetaReviewState", value)
}

// NewBetaReviewStateFromValue returns a pointer to a valid BetaReviewState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBetaReviewStateFromValue(v string) (*BetaReviewState, error) {
	ev := BetaReviewState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BetaReviewState: valid values are %v", v, AllowedBetaReviewStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BetaReviewState) IsValid() bool {
	for _, existing := range AllowedBetaReviewStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BetaReviewState value
func (v BetaReviewState) Ptr() *BetaReviewState {
	return &v
}

type NullableBetaReviewState struct {
	value *BetaReviewState
	isSet bool
}

func (v NullableBetaReviewState) Get() *BetaReviewState {
	return v.value
}

func (v *NullableBetaReviewState) Set(val *BetaReviewState) {
	v.value = val
	v.isSet = true
}

func (v NullableBetaReviewState) IsSet() bool {
	return v.isSet
}

func (v *NullableBetaReviewState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBetaReviewState(val *BetaReviewState) *NullableBetaReviewState {
	return &NullableBetaReviewState{value: val, isSet: true}
}

func (v NullableBetaReviewState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBetaReviewState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

