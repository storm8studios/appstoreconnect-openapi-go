/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"time"
)

// checks if the BuildAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildAttributes{}

// BuildAttributes struct for BuildAttributes
type BuildAttributes struct {
	Version *string `json:"version,omitempty"`
	UploadedDate *time.Time `json:"uploadedDate,omitempty"`
	ExpirationDate *time.Time `json:"expirationDate,omitempty"`
	Expired *bool `json:"expired,omitempty"`
	MinOsVersion *string `json:"minOsVersion,omitempty"`
	LsMinimumSystemVersion *string `json:"lsMinimumSystemVersion,omitempty"`
	ComputedMinMacOsVersion *string `json:"computedMinMacOsVersion,omitempty"`
	IconAssetToken *ImageAsset `json:"iconAssetToken,omitempty"`
	ProcessingState *string `json:"processingState,omitempty"`
	BuildAudienceType *BuildAudienceType `json:"buildAudienceType,omitempty"`
	UsesNonExemptEncryption *bool `json:"usesNonExemptEncryption,omitempty"`
}

// NewBuildAttributes instantiates a new BuildAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildAttributes() *BuildAttributes {
	this := BuildAttributes{}
	return &this
}

// NewBuildAttributesWithDefaults instantiates a new BuildAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildAttributesWithDefaults() *BuildAttributes {
	this := BuildAttributes{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *BuildAttributes) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildAttributes) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *BuildAttributes) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *BuildAttributes) SetVersion(v string) {
	o.Version = &v
}

// GetUploadedDate returns the UploadedDate field value if set, zero value otherwise.
func (o *BuildAttributes) GetUploadedDate() time.Time {
	if o == nil || IsNil(o.UploadedDate) {
		var ret time.Time
		return ret
	}
	return *o.UploadedDate
}

// GetUploadedDateOk returns a tuple with the UploadedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildAttributes) GetUploadedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UploadedDate) {
		return nil, false
	}
	return o.UploadedDate, true
}

// HasUploadedDate returns a boolean if a field has been set.
func (o *BuildAttributes) HasUploadedDate() bool {
	if o != nil && !IsNil(o.UploadedDate) {
		return true
	}

	return false
}

// SetUploadedDate gets a reference to the given time.Time and assigns it to the UploadedDate field.
func (o *BuildAttributes) SetUploadedDate(v time.Time) {
	o.UploadedDate = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *BuildAttributes) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildAttributes) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *BuildAttributes) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *BuildAttributes) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetExpired returns the Expired field value if set, zero value otherwise.
func (o *BuildAttributes) GetExpired() bool {
	if o == nil || IsNil(o.Expired) {
		var ret bool
		return ret
	}
	return *o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildAttributes) GetExpiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Expired) {
		return nil, false
	}
	return o.Expired, true
}

// HasExpired returns a boolean if a field has been set.
func (o *BuildAttributes) HasExpired() bool {
	if o != nil && !IsNil(o.Expired) {
		return true
	}

	return false
}

// SetExpired gets a reference to the given bool and assigns it to the Expired field.
func (o *BuildAttributes) SetExpired(v bool) {
	o.Expired = &v
}

// GetMinOsVersion returns the MinOsVersion field value if set, zero value otherwise.
func (o *BuildAttributes) GetMinOsVersion() string {
	if o == nil || IsNil(o.MinOsVersion) {
		var ret string
		return ret
	}
	return *o.MinOsVersion
}

// GetMinOsVersionOk returns a tuple with the MinOsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildAttributes) GetMinOsVersionOk() (*string, bool) {
	if o == nil || IsNil(o.MinOsVersion) {
		return nil, false
	}
	return o.MinOsVersion, true
}

// HasMinOsVersion returns a boolean if a field has been set.
func (o *BuildAttributes) HasMinOsVersion() bool {
	if o != nil && !IsNil(o.MinOsVersion) {
		return true
	}

	return false
}

// SetMinOsVersion gets a reference to the given string and assigns it to the MinOsVersion field.
func (o *BuildAttributes) SetMinOsVersion(v string) {
	o.MinOsVersion = &v
}

// GetLsMinimumSystemVersion returns the LsMinimumSystemVersion field value if set, zero value otherwise.
func (o *BuildAttributes) GetLsMinimumSystemVersion() string {
	if o == nil || IsNil(o.LsMinimumSystemVersion) {
		var ret string
		return ret
	}
	return *o.LsMinimumSystemVersion
}

// GetLsMinimumSystemVersionOk returns a tuple with the LsMinimumSystemVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildAttributes) GetLsMinimumSystemVersionOk() (*string, bool) {
	if o == nil || IsNil(o.LsMinimumSystemVersion) {
		return nil, false
	}
	return o.LsMinimumSystemVersion, true
}

// HasLsMinimumSystemVersion returns a boolean if a field has been set.
func (o *BuildAttributes) HasLsMinimumSystemVersion() bool {
	if o != nil && !IsNil(o.LsMinimumSystemVersion) {
		return true
	}

	return false
}

// SetLsMinimumSystemVersion gets a reference to the given string and assigns it to the LsMinimumSystemVersion field.
func (o *BuildAttributes) SetLsMinimumSystemVersion(v string) {
	o.LsMinimumSystemVersion = &v
}

// GetComputedMinMacOsVersion returns the ComputedMinMacOsVersion field value if set, zero value otherwise.
func (o *BuildAttributes) GetComputedMinMacOsVersion() string {
	if o == nil || IsNil(o.ComputedMinMacOsVersion) {
		var ret string
		return ret
	}
	return *o.ComputedMinMacOsVersion
}

// GetComputedMinMacOsVersionOk returns a tuple with the ComputedMinMacOsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildAttributes) GetComputedMinMacOsVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ComputedMinMacOsVersion) {
		return nil, false
	}
	return o.ComputedMinMacOsVersion, true
}

// HasComputedMinMacOsVersion returns a boolean if a field has been set.
func (o *BuildAttributes) HasComputedMinMacOsVersion() bool {
	if o != nil && !IsNil(o.ComputedMinMacOsVersion) {
		return true
	}

	return false
}

// SetComputedMinMacOsVersion gets a reference to the given string and assigns it to the ComputedMinMacOsVersion field.
func (o *BuildAttributes) SetComputedMinMacOsVersion(v string) {
	o.ComputedMinMacOsVersion = &v
}

// GetIconAssetToken returns the IconAssetToken field value if set, zero value otherwise.
func (o *BuildAttributes) GetIconAssetToken() ImageAsset {
	if o == nil || IsNil(o.IconAssetToken) {
		var ret ImageAsset
		return ret
	}
	return *o.IconAssetToken
}

// GetIconAssetTokenOk returns a tuple with the IconAssetToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildAttributes) GetIconAssetTokenOk() (*ImageAsset, bool) {
	if o == nil || IsNil(o.IconAssetToken) {
		return nil, false
	}
	return o.IconAssetToken, true
}

// HasIconAssetToken returns a boolean if a field has been set.
func (o *BuildAttributes) HasIconAssetToken() bool {
	if o != nil && !IsNil(o.IconAssetToken) {
		return true
	}

	return false
}

// SetIconAssetToken gets a reference to the given ImageAsset and assigns it to the IconAssetToken field.
func (o *BuildAttributes) SetIconAssetToken(v ImageAsset) {
	o.IconAssetToken = &v
}

// GetProcessingState returns the ProcessingState field value if set, zero value otherwise.
func (o *BuildAttributes) GetProcessingState() string {
	if o == nil || IsNil(o.ProcessingState) {
		var ret string
		return ret
	}
	return *o.ProcessingState
}

// GetProcessingStateOk returns a tuple with the ProcessingState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildAttributes) GetProcessingStateOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessingState) {
		return nil, false
	}
	return o.ProcessingState, true
}

// HasProcessingState returns a boolean if a field has been set.
func (o *BuildAttributes) HasProcessingState() bool {
	if o != nil && !IsNil(o.ProcessingState) {
		return true
	}

	return false
}

// SetProcessingState gets a reference to the given string and assigns it to the ProcessingState field.
func (o *BuildAttributes) SetProcessingState(v string) {
	o.ProcessingState = &v
}

// GetBuildAudienceType returns the BuildAudienceType field value if set, zero value otherwise.
func (o *BuildAttributes) GetBuildAudienceType() BuildAudienceType {
	if o == nil || IsNil(o.BuildAudienceType) {
		var ret BuildAudienceType
		return ret
	}
	return *o.BuildAudienceType
}

// GetBuildAudienceTypeOk returns a tuple with the BuildAudienceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildAttributes) GetBuildAudienceTypeOk() (*BuildAudienceType, bool) {
	if o == nil || IsNil(o.BuildAudienceType) {
		return nil, false
	}
	return o.BuildAudienceType, true
}

// HasBuildAudienceType returns a boolean if a field has been set.
func (o *BuildAttributes) HasBuildAudienceType() bool {
	if o != nil && !IsNil(o.BuildAudienceType) {
		return true
	}

	return false
}

// SetBuildAudienceType gets a reference to the given BuildAudienceType and assigns it to the BuildAudienceType field.
func (o *BuildAttributes) SetBuildAudienceType(v BuildAudienceType) {
	o.BuildAudienceType = &v
}

// GetUsesNonExemptEncryption returns the UsesNonExemptEncryption field value if set, zero value otherwise.
func (o *BuildAttributes) GetUsesNonExemptEncryption() bool {
	if o == nil || IsNil(o.UsesNonExemptEncryption) {
		var ret bool
		return ret
	}
	return *o.UsesNonExemptEncryption
}

// GetUsesNonExemptEncryptionOk returns a tuple with the UsesNonExemptEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildAttributes) GetUsesNonExemptEncryptionOk() (*bool, bool) {
	if o == nil || IsNil(o.UsesNonExemptEncryption) {
		return nil, false
	}
	return o.UsesNonExemptEncryption, true
}

// HasUsesNonExemptEncryption returns a boolean if a field has been set.
func (o *BuildAttributes) HasUsesNonExemptEncryption() bool {
	if o != nil && !IsNil(o.UsesNonExemptEncryption) {
		return true
	}

	return false
}

// SetUsesNonExemptEncryption gets a reference to the given bool and assigns it to the UsesNonExemptEncryption field.
func (o *BuildAttributes) SetUsesNonExemptEncryption(v bool) {
	o.UsesNonExemptEncryption = &v
}

func (o BuildAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.UploadedDate) {
		toSerialize["uploadedDate"] = o.UploadedDate
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.Expired) {
		toSerialize["expired"] = o.Expired
	}
	if !IsNil(o.MinOsVersion) {
		toSerialize["minOsVersion"] = o.MinOsVersion
	}
	if !IsNil(o.LsMinimumSystemVersion) {
		toSerialize["lsMinimumSystemVersion"] = o.LsMinimumSystemVersion
	}
	if !IsNil(o.ComputedMinMacOsVersion) {
		toSerialize["computedMinMacOsVersion"] = o.ComputedMinMacOsVersion
	}
	if !IsNil(o.IconAssetToken) {
		toSerialize["iconAssetToken"] = o.IconAssetToken
	}
	if !IsNil(o.ProcessingState) {
		toSerialize["processingState"] = o.ProcessingState
	}
	if !IsNil(o.BuildAudienceType) {
		toSerialize["buildAudienceType"] = o.BuildAudienceType
	}
	if !IsNil(o.UsesNonExemptEncryption) {
		toSerialize["usesNonExemptEncryption"] = o.UsesNonExemptEncryption
	}
	return toSerialize, nil
}

type NullableBuildAttributes struct {
	value *BuildAttributes
	isSet bool
}

func (v NullableBuildAttributes) Get() *BuildAttributes {
	return v.value
}

func (v *NullableBuildAttributes) Set(val *BuildAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildAttributes(val *BuildAttributes) *NullableBuildAttributes {
	return &NullableBuildAttributes{value: val, isSet: true}
}

func (v NullableBuildAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


