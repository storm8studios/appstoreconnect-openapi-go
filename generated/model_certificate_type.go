/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"fmt"
)

// CertificateType the model 'CertificateType'
type CertificateType string

// List of CertificateType
const (
	CERTIFICATETYPE_IOS_DEVELOPMENT CertificateType = "IOS_DEVELOPMENT"
	CERTIFICATETYPE_IOS_DISTRIBUTION CertificateType = "IOS_DISTRIBUTION"
	CERTIFICATETYPE_MAC_APP_DISTRIBUTION CertificateType = "MAC_APP_DISTRIBUTION"
	CERTIFICATETYPE_MAC_INSTALLER_DISTRIBUTION CertificateType = "MAC_INSTALLER_DISTRIBUTION"
	CERTIFICATETYPE_MAC_APP_DEVELOPMENT CertificateType = "MAC_APP_DEVELOPMENT"
	CERTIFICATETYPE_DEVELOPER_ID_KEXT CertificateType = "DEVELOPER_ID_KEXT"
	CERTIFICATETYPE_DEVELOPER_ID_APPLICATION CertificateType = "DEVELOPER_ID_APPLICATION"
	CERTIFICATETYPE_DEVELOPMENT CertificateType = "DEVELOPMENT"
	CERTIFICATETYPE_DISTRIBUTION CertificateType = "DISTRIBUTION"
	CERTIFICATETYPE_PASS_TYPE_ID CertificateType = "PASS_TYPE_ID"
	CERTIFICATETYPE_PASS_TYPE_ID_WITH_NFC CertificateType = "PASS_TYPE_ID_WITH_NFC"
)

// All allowed values of CertificateType enum
var AllowedCertificateTypeEnumValues = []CertificateType{
	"IOS_DEVELOPMENT",
	"IOS_DISTRIBUTION",
	"MAC_APP_DISTRIBUTION",
	"MAC_INSTALLER_DISTRIBUTION",
	"MAC_APP_DEVELOPMENT",
	"DEVELOPER_ID_KEXT",
	"DEVELOPER_ID_APPLICATION",
	"DEVELOPMENT",
	"DISTRIBUTION",
	"PASS_TYPE_ID",
	"PASS_TYPE_ID_WITH_NFC",
}

func (v *CertificateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CertificateType(value)
	for _, existing := range AllowedCertificateTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CertificateType", value)
}

// NewCertificateTypeFromValue returns a pointer to a valid CertificateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCertificateTypeFromValue(v string) (*CertificateType, error) {
	ev := CertificateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CertificateType: valid values are %v", v, AllowedCertificateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CertificateType) IsValid() bool {
	for _, existing := range AllowedCertificateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CertificateType value
func (v CertificateType) Ptr() *CertificateType {
	return &v
}

type NullableCertificateType struct {
	value *CertificateType
	isSet bool
}

func (v NullableCertificateType) Get() *CertificateType {
	return v.value
}

func (v *NullableCertificateType) Set(val *CertificateType) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateType) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateType(val *CertificateType) *NullableCertificateType {
	return &NullableCertificateType{value: val, isSet: true}
}

func (v NullableCertificateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

