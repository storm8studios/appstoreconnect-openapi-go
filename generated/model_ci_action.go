/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
)

// checks if the CiAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CiAction{}

// CiAction struct for CiAction
type CiAction struct {
	Name *string `json:"name,omitempty"`
	ActionType *CiActionType `json:"actionType,omitempty"`
	Destination *string `json:"destination,omitempty"`
	BuildDistributionAudience *BuildAudienceType `json:"buildDistributionAudience,omitempty"`
	TestConfiguration *CiActionTestConfiguration `json:"testConfiguration,omitempty"`
	Scheme *string `json:"scheme,omitempty"`
	Platform *string `json:"platform,omitempty"`
	IsRequiredToPass *bool `json:"isRequiredToPass,omitempty"`
}

// NewCiAction instantiates a new CiAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCiAction() *CiAction {
	this := CiAction{}
	return &this
}

// NewCiActionWithDefaults instantiates a new CiAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCiActionWithDefaults() *CiAction {
	this := CiAction{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CiAction) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiAction) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CiAction) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CiAction) SetName(v string) {
	o.Name = &v
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *CiAction) GetActionType() CiActionType {
	if o == nil || IsNil(o.ActionType) {
		var ret CiActionType
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiAction) GetActionTypeOk() (*CiActionType, bool) {
	if o == nil || IsNil(o.ActionType) {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *CiAction) HasActionType() bool {
	if o != nil && !IsNil(o.ActionType) {
		return true
	}

	return false
}

// SetActionType gets a reference to the given CiActionType and assigns it to the ActionType field.
func (o *CiAction) SetActionType(v CiActionType) {
	o.ActionType = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *CiAction) GetDestination() string {
	if o == nil || IsNil(o.Destination) {
		var ret string
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiAction) GetDestinationOk() (*string, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *CiAction) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given string and assigns it to the Destination field.
func (o *CiAction) SetDestination(v string) {
	o.Destination = &v
}

// GetBuildDistributionAudience returns the BuildDistributionAudience field value if set, zero value otherwise.
func (o *CiAction) GetBuildDistributionAudience() BuildAudienceType {
	if o == nil || IsNil(o.BuildDistributionAudience) {
		var ret BuildAudienceType
		return ret
	}
	return *o.BuildDistributionAudience
}

// GetBuildDistributionAudienceOk returns a tuple with the BuildDistributionAudience field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiAction) GetBuildDistributionAudienceOk() (*BuildAudienceType, bool) {
	if o == nil || IsNil(o.BuildDistributionAudience) {
		return nil, false
	}
	return o.BuildDistributionAudience, true
}

// HasBuildDistributionAudience returns a boolean if a field has been set.
func (o *CiAction) HasBuildDistributionAudience() bool {
	if o != nil && !IsNil(o.BuildDistributionAudience) {
		return true
	}

	return false
}

// SetBuildDistributionAudience gets a reference to the given BuildAudienceType and assigns it to the BuildDistributionAudience field.
func (o *CiAction) SetBuildDistributionAudience(v BuildAudienceType) {
	o.BuildDistributionAudience = &v
}

// GetTestConfiguration returns the TestConfiguration field value if set, zero value otherwise.
func (o *CiAction) GetTestConfiguration() CiActionTestConfiguration {
	if o == nil || IsNil(o.TestConfiguration) {
		var ret CiActionTestConfiguration
		return ret
	}
	return *o.TestConfiguration
}

// GetTestConfigurationOk returns a tuple with the TestConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiAction) GetTestConfigurationOk() (*CiActionTestConfiguration, bool) {
	if o == nil || IsNil(o.TestConfiguration) {
		return nil, false
	}
	return o.TestConfiguration, true
}

// HasTestConfiguration returns a boolean if a field has been set.
func (o *CiAction) HasTestConfiguration() bool {
	if o != nil && !IsNil(o.TestConfiguration) {
		return true
	}

	return false
}

// SetTestConfiguration gets a reference to the given CiActionTestConfiguration and assigns it to the TestConfiguration field.
func (o *CiAction) SetTestConfiguration(v CiActionTestConfiguration) {
	o.TestConfiguration = &v
}

// GetScheme returns the Scheme field value if set, zero value otherwise.
func (o *CiAction) GetScheme() string {
	if o == nil || IsNil(o.Scheme) {
		var ret string
		return ret
	}
	return *o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiAction) GetSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.Scheme) {
		return nil, false
	}
	return o.Scheme, true
}

// HasScheme returns a boolean if a field has been set.
func (o *CiAction) HasScheme() bool {
	if o != nil && !IsNil(o.Scheme) {
		return true
	}

	return false
}

// SetScheme gets a reference to the given string and assigns it to the Scheme field.
func (o *CiAction) SetScheme(v string) {
	o.Scheme = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *CiAction) GetPlatform() string {
	if o == nil || IsNil(o.Platform) {
		var ret string
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiAction) GetPlatformOk() (*string, bool) {
	if o == nil || IsNil(o.Platform) {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *CiAction) HasPlatform() bool {
	if o != nil && !IsNil(o.Platform) {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given string and assigns it to the Platform field.
func (o *CiAction) SetPlatform(v string) {
	o.Platform = &v
}

// GetIsRequiredToPass returns the IsRequiredToPass field value if set, zero value otherwise.
func (o *CiAction) GetIsRequiredToPass() bool {
	if o == nil || IsNil(o.IsRequiredToPass) {
		var ret bool
		return ret
	}
	return *o.IsRequiredToPass
}

// GetIsRequiredToPassOk returns a tuple with the IsRequiredToPass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiAction) GetIsRequiredToPassOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRequiredToPass) {
		return nil, false
	}
	return o.IsRequiredToPass, true
}

// HasIsRequiredToPass returns a boolean if a field has been set.
func (o *CiAction) HasIsRequiredToPass() bool {
	if o != nil && !IsNil(o.IsRequiredToPass) {
		return true
	}

	return false
}

// SetIsRequiredToPass gets a reference to the given bool and assigns it to the IsRequiredToPass field.
func (o *CiAction) SetIsRequiredToPass(v bool) {
	o.IsRequiredToPass = &v
}

func (o CiAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CiAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ActionType) {
		toSerialize["actionType"] = o.ActionType
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.BuildDistributionAudience) {
		toSerialize["buildDistributionAudience"] = o.BuildDistributionAudience
	}
	if !IsNil(o.TestConfiguration) {
		toSerialize["testConfiguration"] = o.TestConfiguration
	}
	if !IsNil(o.Scheme) {
		toSerialize["scheme"] = o.Scheme
	}
	if !IsNil(o.Platform) {
		toSerialize["platform"] = o.Platform
	}
	if !IsNil(o.IsRequiredToPass) {
		toSerialize["isRequiredToPass"] = o.IsRequiredToPass
	}
	return toSerialize, nil
}

type NullableCiAction struct {
	value *CiAction
	isSet bool
}

func (v NullableCiAction) Get() *CiAction {
	return v.value
}

func (v *NullableCiAction) Set(val *CiAction) {
	v.value = val
	v.isSet = true
}

func (v NullableCiAction) IsSet() bool {
	return v.isSet
}

func (v *NullableCiAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiAction(val *CiAction) *NullableCiAction {
	return &NullableCiAction{value: val, isSet: true}
}

func (v NullableCiAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


