/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"time"
)

// checks if the CiBuildRunAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CiBuildRunAttributes{}

// CiBuildRunAttributes struct for CiBuildRunAttributes
type CiBuildRunAttributes struct {
	Number *int32 `json:"number,omitempty"`
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	StartedDate *time.Time `json:"startedDate,omitempty"`
	FinishedDate *time.Time `json:"finishedDate,omitempty"`
	SourceCommit *CiBuildRunAttributesSourceCommit `json:"sourceCommit,omitempty"`
	DestinationCommit *CiBuildRunAttributesSourceCommit `json:"destinationCommit,omitempty"`
	IsPullRequestBuild *bool `json:"isPullRequestBuild,omitempty"`
	IssueCounts *CiIssueCounts `json:"issueCounts,omitempty"`
	ExecutionProgress *CiExecutionProgress `json:"executionProgress,omitempty"`
	CompletionStatus *CiCompletionStatus `json:"completionStatus,omitempty"`
	StartReason *string `json:"startReason,omitempty"`
	CancelReason *string `json:"cancelReason,omitempty"`
}

// NewCiBuildRunAttributes instantiates a new CiBuildRunAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCiBuildRunAttributes() *CiBuildRunAttributes {
	this := CiBuildRunAttributes{}
	return &this
}

// NewCiBuildRunAttributesWithDefaults instantiates a new CiBuildRunAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCiBuildRunAttributesWithDefaults() *CiBuildRunAttributes {
	this := CiBuildRunAttributes{}
	return &this
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *CiBuildRunAttributes) GetNumber() int32 {
	if o == nil || IsNil(o.Number) {
		var ret int32
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiBuildRunAttributes) GetNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.Number) {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *CiBuildRunAttributes) HasNumber() bool {
	if o != nil && !IsNil(o.Number) {
		return true
	}

	return false
}

// SetNumber gets a reference to the given int32 and assigns it to the Number field.
func (o *CiBuildRunAttributes) SetNumber(v int32) {
	o.Number = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *CiBuildRunAttributes) GetCreatedDate() time.Time {
	if o == nil || IsNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiBuildRunAttributes) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *CiBuildRunAttributes) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *CiBuildRunAttributes) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetStartedDate returns the StartedDate field value if set, zero value otherwise.
func (o *CiBuildRunAttributes) GetStartedDate() time.Time {
	if o == nil || IsNil(o.StartedDate) {
		var ret time.Time
		return ret
	}
	return *o.StartedDate
}

// GetStartedDateOk returns a tuple with the StartedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiBuildRunAttributes) GetStartedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartedDate) {
		return nil, false
	}
	return o.StartedDate, true
}

// HasStartedDate returns a boolean if a field has been set.
func (o *CiBuildRunAttributes) HasStartedDate() bool {
	if o != nil && !IsNil(o.StartedDate) {
		return true
	}

	return false
}

// SetStartedDate gets a reference to the given time.Time and assigns it to the StartedDate field.
func (o *CiBuildRunAttributes) SetStartedDate(v time.Time) {
	o.StartedDate = &v
}

// GetFinishedDate returns the FinishedDate field value if set, zero value otherwise.
func (o *CiBuildRunAttributes) GetFinishedDate() time.Time {
	if o == nil || IsNil(o.FinishedDate) {
		var ret time.Time
		return ret
	}
	return *o.FinishedDate
}

// GetFinishedDateOk returns a tuple with the FinishedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiBuildRunAttributes) GetFinishedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FinishedDate) {
		return nil, false
	}
	return o.FinishedDate, true
}

// HasFinishedDate returns a boolean if a field has been set.
func (o *CiBuildRunAttributes) HasFinishedDate() bool {
	if o != nil && !IsNil(o.FinishedDate) {
		return true
	}

	return false
}

// SetFinishedDate gets a reference to the given time.Time and assigns it to the FinishedDate field.
func (o *CiBuildRunAttributes) SetFinishedDate(v time.Time) {
	o.FinishedDate = &v
}

// GetSourceCommit returns the SourceCommit field value if set, zero value otherwise.
func (o *CiBuildRunAttributes) GetSourceCommit() CiBuildRunAttributesSourceCommit {
	if o == nil || IsNil(o.SourceCommit) {
		var ret CiBuildRunAttributesSourceCommit
		return ret
	}
	return *o.SourceCommit
}

// GetSourceCommitOk returns a tuple with the SourceCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiBuildRunAttributes) GetSourceCommitOk() (*CiBuildRunAttributesSourceCommit, bool) {
	if o == nil || IsNil(o.SourceCommit) {
		return nil, false
	}
	return o.SourceCommit, true
}

// HasSourceCommit returns a boolean if a field has been set.
func (o *CiBuildRunAttributes) HasSourceCommit() bool {
	if o != nil && !IsNil(o.SourceCommit) {
		return true
	}

	return false
}

// SetSourceCommit gets a reference to the given CiBuildRunAttributesSourceCommit and assigns it to the SourceCommit field.
func (o *CiBuildRunAttributes) SetSourceCommit(v CiBuildRunAttributesSourceCommit) {
	o.SourceCommit = &v
}

// GetDestinationCommit returns the DestinationCommit field value if set, zero value otherwise.
func (o *CiBuildRunAttributes) GetDestinationCommit() CiBuildRunAttributesSourceCommit {
	if o == nil || IsNil(o.DestinationCommit) {
		var ret CiBuildRunAttributesSourceCommit
		return ret
	}
	return *o.DestinationCommit
}

// GetDestinationCommitOk returns a tuple with the DestinationCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiBuildRunAttributes) GetDestinationCommitOk() (*CiBuildRunAttributesSourceCommit, bool) {
	if o == nil || IsNil(o.DestinationCommit) {
		return nil, false
	}
	return o.DestinationCommit, true
}

// HasDestinationCommit returns a boolean if a field has been set.
func (o *CiBuildRunAttributes) HasDestinationCommit() bool {
	if o != nil && !IsNil(o.DestinationCommit) {
		return true
	}

	return false
}

// SetDestinationCommit gets a reference to the given CiBuildRunAttributesSourceCommit and assigns it to the DestinationCommit field.
func (o *CiBuildRunAttributes) SetDestinationCommit(v CiBuildRunAttributesSourceCommit) {
	o.DestinationCommit = &v
}

// GetIsPullRequestBuild returns the IsPullRequestBuild field value if set, zero value otherwise.
func (o *CiBuildRunAttributes) GetIsPullRequestBuild() bool {
	if o == nil || IsNil(o.IsPullRequestBuild) {
		var ret bool
		return ret
	}
	return *o.IsPullRequestBuild
}

// GetIsPullRequestBuildOk returns a tuple with the IsPullRequestBuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiBuildRunAttributes) GetIsPullRequestBuildOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPullRequestBuild) {
		return nil, false
	}
	return o.IsPullRequestBuild, true
}

// HasIsPullRequestBuild returns a boolean if a field has been set.
func (o *CiBuildRunAttributes) HasIsPullRequestBuild() bool {
	if o != nil && !IsNil(o.IsPullRequestBuild) {
		return true
	}

	return false
}

// SetIsPullRequestBuild gets a reference to the given bool and assigns it to the IsPullRequestBuild field.
func (o *CiBuildRunAttributes) SetIsPullRequestBuild(v bool) {
	o.IsPullRequestBuild = &v
}

// GetIssueCounts returns the IssueCounts field value if set, zero value otherwise.
func (o *CiBuildRunAttributes) GetIssueCounts() CiIssueCounts {
	if o == nil || IsNil(o.IssueCounts) {
		var ret CiIssueCounts
		return ret
	}
	return *o.IssueCounts
}

// GetIssueCountsOk returns a tuple with the IssueCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiBuildRunAttributes) GetIssueCountsOk() (*CiIssueCounts, bool) {
	if o == nil || IsNil(o.IssueCounts) {
		return nil, false
	}
	return o.IssueCounts, true
}

// HasIssueCounts returns a boolean if a field has been set.
func (o *CiBuildRunAttributes) HasIssueCounts() bool {
	if o != nil && !IsNil(o.IssueCounts) {
		return true
	}

	return false
}

// SetIssueCounts gets a reference to the given CiIssueCounts and assigns it to the IssueCounts field.
func (o *CiBuildRunAttributes) SetIssueCounts(v CiIssueCounts) {
	o.IssueCounts = &v
}

// GetExecutionProgress returns the ExecutionProgress field value if set, zero value otherwise.
func (o *CiBuildRunAttributes) GetExecutionProgress() CiExecutionProgress {
	if o == nil || IsNil(o.ExecutionProgress) {
		var ret CiExecutionProgress
		return ret
	}
	return *o.ExecutionProgress
}

// GetExecutionProgressOk returns a tuple with the ExecutionProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiBuildRunAttributes) GetExecutionProgressOk() (*CiExecutionProgress, bool) {
	if o == nil || IsNil(o.ExecutionProgress) {
		return nil, false
	}
	return o.ExecutionProgress, true
}

// HasExecutionProgress returns a boolean if a field has been set.
func (o *CiBuildRunAttributes) HasExecutionProgress() bool {
	if o != nil && !IsNil(o.ExecutionProgress) {
		return true
	}

	return false
}

// SetExecutionProgress gets a reference to the given CiExecutionProgress and assigns it to the ExecutionProgress field.
func (o *CiBuildRunAttributes) SetExecutionProgress(v CiExecutionProgress) {
	o.ExecutionProgress = &v
}

// GetCompletionStatus returns the CompletionStatus field value if set, zero value otherwise.
func (o *CiBuildRunAttributes) GetCompletionStatus() CiCompletionStatus {
	if o == nil || IsNil(o.CompletionStatus) {
		var ret CiCompletionStatus
		return ret
	}
	return *o.CompletionStatus
}

// GetCompletionStatusOk returns a tuple with the CompletionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiBuildRunAttributes) GetCompletionStatusOk() (*CiCompletionStatus, bool) {
	if o == nil || IsNil(o.CompletionStatus) {
		return nil, false
	}
	return o.CompletionStatus, true
}

// HasCompletionStatus returns a boolean if a field has been set.
func (o *CiBuildRunAttributes) HasCompletionStatus() bool {
	if o != nil && !IsNil(o.CompletionStatus) {
		return true
	}

	return false
}

// SetCompletionStatus gets a reference to the given CiCompletionStatus and assigns it to the CompletionStatus field.
func (o *CiBuildRunAttributes) SetCompletionStatus(v CiCompletionStatus) {
	o.CompletionStatus = &v
}

// GetStartReason returns the StartReason field value if set, zero value otherwise.
func (o *CiBuildRunAttributes) GetStartReason() string {
	if o == nil || IsNil(o.StartReason) {
		var ret string
		return ret
	}
	return *o.StartReason
}

// GetStartReasonOk returns a tuple with the StartReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiBuildRunAttributes) GetStartReasonOk() (*string, bool) {
	if o == nil || IsNil(o.StartReason) {
		return nil, false
	}
	return o.StartReason, true
}

// HasStartReason returns a boolean if a field has been set.
func (o *CiBuildRunAttributes) HasStartReason() bool {
	if o != nil && !IsNil(o.StartReason) {
		return true
	}

	return false
}

// SetStartReason gets a reference to the given string and assigns it to the StartReason field.
func (o *CiBuildRunAttributes) SetStartReason(v string) {
	o.StartReason = &v
}

// GetCancelReason returns the CancelReason field value if set, zero value otherwise.
func (o *CiBuildRunAttributes) GetCancelReason() string {
	if o == nil || IsNil(o.CancelReason) {
		var ret string
		return ret
	}
	return *o.CancelReason
}

// GetCancelReasonOk returns a tuple with the CancelReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiBuildRunAttributes) GetCancelReasonOk() (*string, bool) {
	if o == nil || IsNil(o.CancelReason) {
		return nil, false
	}
	return o.CancelReason, true
}

// HasCancelReason returns a boolean if a field has been set.
func (o *CiBuildRunAttributes) HasCancelReason() bool {
	if o != nil && !IsNil(o.CancelReason) {
		return true
	}

	return false
}

// SetCancelReason gets a reference to the given string and assigns it to the CancelReason field.
func (o *CiBuildRunAttributes) SetCancelReason(v string) {
	o.CancelReason = &v
}

func (o CiBuildRunAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CiBuildRunAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Number) {
		toSerialize["number"] = o.Number
	}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.StartedDate) {
		toSerialize["startedDate"] = o.StartedDate
	}
	if !IsNil(o.FinishedDate) {
		toSerialize["finishedDate"] = o.FinishedDate
	}
	if !IsNil(o.SourceCommit) {
		toSerialize["sourceCommit"] = o.SourceCommit
	}
	if !IsNil(o.DestinationCommit) {
		toSerialize["destinationCommit"] = o.DestinationCommit
	}
	if !IsNil(o.IsPullRequestBuild) {
		toSerialize["isPullRequestBuild"] = o.IsPullRequestBuild
	}
	if !IsNil(o.IssueCounts) {
		toSerialize["issueCounts"] = o.IssueCounts
	}
	if !IsNil(o.ExecutionProgress) {
		toSerialize["executionProgress"] = o.ExecutionProgress
	}
	if !IsNil(o.CompletionStatus) {
		toSerialize["completionStatus"] = o.CompletionStatus
	}
	if !IsNil(o.StartReason) {
		toSerialize["startReason"] = o.StartReason
	}
	if !IsNil(o.CancelReason) {
		toSerialize["cancelReason"] = o.CancelReason
	}
	return toSerialize, nil
}

type NullableCiBuildRunAttributes struct {
	value *CiBuildRunAttributes
	isSet bool
}

func (v NullableCiBuildRunAttributes) Get() *CiBuildRunAttributes {
	return v.value
}

func (v *NullableCiBuildRunAttributes) Set(val *CiBuildRunAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableCiBuildRunAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableCiBuildRunAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiBuildRunAttributes(val *CiBuildRunAttributes) *NullableCiBuildRunAttributes {
	return &NullableCiBuildRunAttributes{value: val, isSet: true}
}

func (v NullableCiBuildRunAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiBuildRunAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


