/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"fmt"
)

// CiBuildRunsResponseIncludedInner - struct for CiBuildRunsResponseIncludedInner
type CiBuildRunsResponseIncludedInner struct {
	Build *Build
	CiProduct *CiProduct
	CiWorkflow *CiWorkflow
	ScmGitReference *ScmGitReference
	ScmPullRequest *ScmPullRequest
}

// BuildAsCiBuildRunsResponseIncludedInner is a convenience function that returns Build wrapped in CiBuildRunsResponseIncludedInner
func BuildAsCiBuildRunsResponseIncludedInner(v *Build) CiBuildRunsResponseIncludedInner {
	return CiBuildRunsResponseIncludedInner{
		Build: v,
	}
}

// CiProductAsCiBuildRunsResponseIncludedInner is a convenience function that returns CiProduct wrapped in CiBuildRunsResponseIncludedInner
func CiProductAsCiBuildRunsResponseIncludedInner(v *CiProduct) CiBuildRunsResponseIncludedInner {
	return CiBuildRunsResponseIncludedInner{
		CiProduct: v,
	}
}

// CiWorkflowAsCiBuildRunsResponseIncludedInner is a convenience function that returns CiWorkflow wrapped in CiBuildRunsResponseIncludedInner
func CiWorkflowAsCiBuildRunsResponseIncludedInner(v *CiWorkflow) CiBuildRunsResponseIncludedInner {
	return CiBuildRunsResponseIncludedInner{
		CiWorkflow: v,
	}
}

// ScmGitReferenceAsCiBuildRunsResponseIncludedInner is a convenience function that returns ScmGitReference wrapped in CiBuildRunsResponseIncludedInner
func ScmGitReferenceAsCiBuildRunsResponseIncludedInner(v *ScmGitReference) CiBuildRunsResponseIncludedInner {
	return CiBuildRunsResponseIncludedInner{
		ScmGitReference: v,
	}
}

// ScmPullRequestAsCiBuildRunsResponseIncludedInner is a convenience function that returns ScmPullRequest wrapped in CiBuildRunsResponseIncludedInner
func ScmPullRequestAsCiBuildRunsResponseIncludedInner(v *ScmPullRequest) CiBuildRunsResponseIncludedInner {
	return CiBuildRunsResponseIncludedInner{
		ScmPullRequest: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CiBuildRunsResponseIncludedInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Build
	err = newStrictDecoder(data).Decode(&dst.Build)
	if err == nil {
		jsonBuild, _ := json.Marshal(dst.Build)
		if string(jsonBuild) == "{}" { // empty struct
			dst.Build = nil
		} else {
			match++
		}
	} else {
		dst.Build = nil
	}

	// try to unmarshal data into CiProduct
	err = newStrictDecoder(data).Decode(&dst.CiProduct)
	if err == nil {
		jsonCiProduct, _ := json.Marshal(dst.CiProduct)
		if string(jsonCiProduct) == "{}" { // empty struct
			dst.CiProduct = nil
		} else {
			match++
		}
	} else {
		dst.CiProduct = nil
	}

	// try to unmarshal data into CiWorkflow
	err = newStrictDecoder(data).Decode(&dst.CiWorkflow)
	if err == nil {
		jsonCiWorkflow, _ := json.Marshal(dst.CiWorkflow)
		if string(jsonCiWorkflow) == "{}" { // empty struct
			dst.CiWorkflow = nil
		} else {
			match++
		}
	} else {
		dst.CiWorkflow = nil
	}

	// try to unmarshal data into ScmGitReference
	err = newStrictDecoder(data).Decode(&dst.ScmGitReference)
	if err == nil {
		jsonScmGitReference, _ := json.Marshal(dst.ScmGitReference)
		if string(jsonScmGitReference) == "{}" { // empty struct
			dst.ScmGitReference = nil
		} else {
			match++
		}
	} else {
		dst.ScmGitReference = nil
	}

	// try to unmarshal data into ScmPullRequest
	err = newStrictDecoder(data).Decode(&dst.ScmPullRequest)
	if err == nil {
		jsonScmPullRequest, _ := json.Marshal(dst.ScmPullRequest)
		if string(jsonScmPullRequest) == "{}" { // empty struct
			dst.ScmPullRequest = nil
		} else {
			match++
		}
	} else {
		dst.ScmPullRequest = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Build = nil
		dst.CiProduct = nil
		dst.CiWorkflow = nil
		dst.ScmGitReference = nil
		dst.ScmPullRequest = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CiBuildRunsResponseIncludedInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CiBuildRunsResponseIncludedInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CiBuildRunsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	if src.Build != nil {
		return json.Marshal(&src.Build)
	}

	if src.CiProduct != nil {
		return json.Marshal(&src.CiProduct)
	}

	if src.CiWorkflow != nil {
		return json.Marshal(&src.CiWorkflow)
	}

	if src.ScmGitReference != nil {
		return json.Marshal(&src.ScmGitReference)
	}

	if src.ScmPullRequest != nil {
		return json.Marshal(&src.ScmPullRequest)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CiBuildRunsResponseIncludedInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Build != nil {
		return obj.Build
	}

	if obj.CiProduct != nil {
		return obj.CiProduct
	}

	if obj.CiWorkflow != nil {
		return obj.CiWorkflow
	}

	if obj.ScmGitReference != nil {
		return obj.ScmGitReference
	}

	if obj.ScmPullRequest != nil {
		return obj.ScmPullRequest
	}

	// all schemas are nil
	return nil
}

type NullableCiBuildRunsResponseIncludedInner struct {
	value *CiBuildRunsResponseIncludedInner
	isSet bool
}

func (v NullableCiBuildRunsResponseIncludedInner) Get() *CiBuildRunsResponseIncludedInner {
	return v.value
}

func (v *NullableCiBuildRunsResponseIncludedInner) Set(val *CiBuildRunsResponseIncludedInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCiBuildRunsResponseIncludedInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCiBuildRunsResponseIncludedInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiBuildRunsResponseIncludedInner(val *CiBuildRunsResponseIncludedInner) *NullableCiBuildRunsResponseIncludedInner {
	return &NullableCiBuildRunsResponseIncludedInner{value: val, isSet: true}
}

func (v NullableCiBuildRunsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiBuildRunsResponseIncludedInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


