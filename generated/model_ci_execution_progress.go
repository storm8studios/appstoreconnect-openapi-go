/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"fmt"
)

// CiExecutionProgress the model 'CiExecutionProgress'
type CiExecutionProgress string

// List of CiExecutionProgress
const (
	CIEXECUTIONPROGRESS_PENDING CiExecutionProgress = "PENDING"
	CIEXECUTIONPROGRESS_RUNNING CiExecutionProgress = "RUNNING"
	CIEXECUTIONPROGRESS_COMPLETE CiExecutionProgress = "COMPLETE"
)

// All allowed values of CiExecutionProgress enum
var AllowedCiExecutionProgressEnumValues = []CiExecutionProgress{
	"PENDING",
	"RUNNING",
	"COMPLETE",
}

func (v *CiExecutionProgress) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CiExecutionProgress(value)
	for _, existing := range AllowedCiExecutionProgressEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CiExecutionProgress", value)
}

// NewCiExecutionProgressFromValue returns a pointer to a valid CiExecutionProgress
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCiExecutionProgressFromValue(v string) (*CiExecutionProgress, error) {
	ev := CiExecutionProgress(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CiExecutionProgress: valid values are %v", v, AllowedCiExecutionProgressEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CiExecutionProgress) IsValid() bool {
	for _, existing := range AllowedCiExecutionProgressEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CiExecutionProgress value
func (v CiExecutionProgress) Ptr() *CiExecutionProgress {
	return &v
}

type NullableCiExecutionProgress struct {
	value *CiExecutionProgress
	isSet bool
}

func (v NullableCiExecutionProgress) Get() *CiExecutionProgress {
	return v.value
}

func (v *NullableCiExecutionProgress) Set(val *CiExecutionProgress) {
	v.value = val
	v.isSet = true
}

func (v NullableCiExecutionProgress) IsSet() bool {
	return v.isSet
}

func (v *NullableCiExecutionProgress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiExecutionProgress(val *CiExecutionProgress) *NullableCiExecutionProgress {
	return &NullableCiExecutionProgress{value: val, isSet: true}
}

func (v NullableCiExecutionProgress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiExecutionProgress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

