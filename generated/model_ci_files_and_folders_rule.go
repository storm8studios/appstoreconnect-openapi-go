/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
)

// checks if the CiFilesAndFoldersRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CiFilesAndFoldersRule{}

// CiFilesAndFoldersRule struct for CiFilesAndFoldersRule
type CiFilesAndFoldersRule struct {
	Mode *string `json:"mode,omitempty"`
	Matchers []CiStartConditionFileMatcher `json:"matchers,omitempty"`
}

// NewCiFilesAndFoldersRule instantiates a new CiFilesAndFoldersRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCiFilesAndFoldersRule() *CiFilesAndFoldersRule {
	this := CiFilesAndFoldersRule{}
	return &this
}

// NewCiFilesAndFoldersRuleWithDefaults instantiates a new CiFilesAndFoldersRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCiFilesAndFoldersRuleWithDefaults() *CiFilesAndFoldersRule {
	this := CiFilesAndFoldersRule{}
	return &this
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *CiFilesAndFoldersRule) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiFilesAndFoldersRule) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *CiFilesAndFoldersRule) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *CiFilesAndFoldersRule) SetMode(v string) {
	o.Mode = &v
}

// GetMatchers returns the Matchers field value if set, zero value otherwise.
func (o *CiFilesAndFoldersRule) GetMatchers() []CiStartConditionFileMatcher {
	if o == nil || IsNil(o.Matchers) {
		var ret []CiStartConditionFileMatcher
		return ret
	}
	return o.Matchers
}

// GetMatchersOk returns a tuple with the Matchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiFilesAndFoldersRule) GetMatchersOk() ([]CiStartConditionFileMatcher, bool) {
	if o == nil || IsNil(o.Matchers) {
		return nil, false
	}
	return o.Matchers, true
}

// HasMatchers returns a boolean if a field has been set.
func (o *CiFilesAndFoldersRule) HasMatchers() bool {
	if o != nil && !IsNil(o.Matchers) {
		return true
	}

	return false
}

// SetMatchers gets a reference to the given []CiStartConditionFileMatcher and assigns it to the Matchers field.
func (o *CiFilesAndFoldersRule) SetMatchers(v []CiStartConditionFileMatcher) {
	o.Matchers = v
}

func (o CiFilesAndFoldersRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CiFilesAndFoldersRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.Matchers) {
		toSerialize["matchers"] = o.Matchers
	}
	return toSerialize, nil
}

type NullableCiFilesAndFoldersRule struct {
	value *CiFilesAndFoldersRule
	isSet bool
}

func (v NullableCiFilesAndFoldersRule) Get() *CiFilesAndFoldersRule {
	return v.value
}

func (v *NullableCiFilesAndFoldersRule) Set(val *CiFilesAndFoldersRule) {
	v.value = val
	v.isSet = true
}

func (v NullableCiFilesAndFoldersRule) IsSet() bool {
	return v.isSet
}

func (v *NullableCiFilesAndFoldersRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiFilesAndFoldersRule(val *CiFilesAndFoldersRule) *NullableCiFilesAndFoldersRule {
	return &NullableCiFilesAndFoldersRule{value: val, isSet: true}
}

func (v NullableCiFilesAndFoldersRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiFilesAndFoldersRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


