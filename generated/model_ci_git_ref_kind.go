/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"fmt"
)

// CiGitRefKind the model 'CiGitRefKind'
type CiGitRefKind string

// List of CiGitRefKind
const (
	CIGITREFKIND_BRANCH CiGitRefKind = "BRANCH"
	CIGITREFKIND_TAG CiGitRefKind = "TAG"
)

// All allowed values of CiGitRefKind enum
var AllowedCiGitRefKindEnumValues = []CiGitRefKind{
	"BRANCH",
	"TAG",
}

func (v *CiGitRefKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CiGitRefKind(value)
	for _, existing := range AllowedCiGitRefKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CiGitRefKind", value)
}

// NewCiGitRefKindFromValue returns a pointer to a valid CiGitRefKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCiGitRefKindFromValue(v string) (*CiGitRefKind, error) {
	ev := CiGitRefKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CiGitRefKind: valid values are %v", v, AllowedCiGitRefKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CiGitRefKind) IsValid() bool {
	for _, existing := range AllowedCiGitRefKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CiGitRefKind value
func (v CiGitRefKind) Ptr() *CiGitRefKind {
	return &v
}

type NullableCiGitRefKind struct {
	value *CiGitRefKind
	isSet bool
}

func (v NullableCiGitRefKind) Get() *CiGitRefKind {
	return v.value
}

func (v *NullableCiGitRefKind) Set(val *CiGitRefKind) {
	v.value = val
	v.isSet = true
}

func (v NullableCiGitRefKind) IsSet() bool {
	return v.isSet
}

func (v *NullableCiGitRefKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiGitRefKind(val *CiGitRefKind) *NullableCiGitRefKind {
	return &NullableCiGitRefKind{value: val, isSet: true}
}

func (v NullableCiGitRefKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiGitRefKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

