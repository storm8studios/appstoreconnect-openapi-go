/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
)

// checks if the CiGitUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CiGitUser{}

// CiGitUser struct for CiGitUser
type CiGitUser struct {
	DisplayName *string `json:"displayName,omitempty"`
	AvatarUrl *string `json:"avatarUrl,omitempty"`
}

// NewCiGitUser instantiates a new CiGitUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCiGitUser() *CiGitUser {
	this := CiGitUser{}
	return &this
}

// NewCiGitUserWithDefaults instantiates a new CiGitUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCiGitUserWithDefaults() *CiGitUser {
	this := CiGitUser{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *CiGitUser) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiGitUser) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *CiGitUser) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *CiGitUser) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *CiGitUser) GetAvatarUrl() string {
	if o == nil || IsNil(o.AvatarUrl) {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiGitUser) GetAvatarUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AvatarUrl) {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *CiGitUser) HasAvatarUrl() bool {
	if o != nil && !IsNil(o.AvatarUrl) {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *CiGitUser) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

func (o CiGitUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CiGitUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.AvatarUrl) {
		toSerialize["avatarUrl"] = o.AvatarUrl
	}
	return toSerialize, nil
}

type NullableCiGitUser struct {
	value *CiGitUser
	isSet bool
}

func (v NullableCiGitUser) Get() *CiGitUser {
	return v.value
}

func (v *NullableCiGitUser) Set(val *CiGitUser) {
	v.value = val
	v.isSet = true
}

func (v NullableCiGitUser) IsSet() bool {
	return v.isSet
}

func (v *NullableCiGitUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiGitUser(val *CiGitUser) *NullableCiGitUser {
	return &NullableCiGitUser{value: val, isSet: true}
}

func (v NullableCiGitUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiGitUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


