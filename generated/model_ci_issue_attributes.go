/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
)

// checks if the CiIssueAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CiIssueAttributes{}

// CiIssueAttributes struct for CiIssueAttributes
type CiIssueAttributes struct {
	IssueType *string `json:"issueType,omitempty"`
	Message *string `json:"message,omitempty"`
	FileSource *FileLocation `json:"fileSource,omitempty"`
	Category *string `json:"category,omitempty"`
}

// NewCiIssueAttributes instantiates a new CiIssueAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCiIssueAttributes() *CiIssueAttributes {
	this := CiIssueAttributes{}
	return &this
}

// NewCiIssueAttributesWithDefaults instantiates a new CiIssueAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCiIssueAttributesWithDefaults() *CiIssueAttributes {
	this := CiIssueAttributes{}
	return &this
}

// GetIssueType returns the IssueType field value if set, zero value otherwise.
func (o *CiIssueAttributes) GetIssueType() string {
	if o == nil || IsNil(o.IssueType) {
		var ret string
		return ret
	}
	return *o.IssueType
}

// GetIssueTypeOk returns a tuple with the IssueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiIssueAttributes) GetIssueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IssueType) {
		return nil, false
	}
	return o.IssueType, true
}

// HasIssueType returns a boolean if a field has been set.
func (o *CiIssueAttributes) HasIssueType() bool {
	if o != nil && !IsNil(o.IssueType) {
		return true
	}

	return false
}

// SetIssueType gets a reference to the given string and assigns it to the IssueType field.
func (o *CiIssueAttributes) SetIssueType(v string) {
	o.IssueType = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *CiIssueAttributes) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiIssueAttributes) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *CiIssueAttributes) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *CiIssueAttributes) SetMessage(v string) {
	o.Message = &v
}

// GetFileSource returns the FileSource field value if set, zero value otherwise.
func (o *CiIssueAttributes) GetFileSource() FileLocation {
	if o == nil || IsNil(o.FileSource) {
		var ret FileLocation
		return ret
	}
	return *o.FileSource
}

// GetFileSourceOk returns a tuple with the FileSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiIssueAttributes) GetFileSourceOk() (*FileLocation, bool) {
	if o == nil || IsNil(o.FileSource) {
		return nil, false
	}
	return o.FileSource, true
}

// HasFileSource returns a boolean if a field has been set.
func (o *CiIssueAttributes) HasFileSource() bool {
	if o != nil && !IsNil(o.FileSource) {
		return true
	}

	return false
}

// SetFileSource gets a reference to the given FileLocation and assigns it to the FileSource field.
func (o *CiIssueAttributes) SetFileSource(v FileLocation) {
	o.FileSource = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *CiIssueAttributes) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiIssueAttributes) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *CiIssueAttributes) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *CiIssueAttributes) SetCategory(v string) {
	o.Category = &v
}

func (o CiIssueAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CiIssueAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IssueType) {
		toSerialize["issueType"] = o.IssueType
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.FileSource) {
		toSerialize["fileSource"] = o.FileSource
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	return toSerialize, nil
}

type NullableCiIssueAttributes struct {
	value *CiIssueAttributes
	isSet bool
}

func (v NullableCiIssueAttributes) Get() *CiIssueAttributes {
	return v.value
}

func (v *NullableCiIssueAttributes) Set(val *CiIssueAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableCiIssueAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableCiIssueAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiIssueAttributes(val *CiIssueAttributes) *NullableCiIssueAttributes {
	return &NullableCiIssueAttributes{value: val, isSet: true}
}

func (v NullableCiIssueAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiIssueAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


