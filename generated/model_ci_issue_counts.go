/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
)

// checks if the CiIssueCounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CiIssueCounts{}

// CiIssueCounts struct for CiIssueCounts
type CiIssueCounts struct {
	AnalyzerWarnings *int32 `json:"analyzerWarnings,omitempty"`
	Errors *int32 `json:"errors,omitempty"`
	TestFailures *int32 `json:"testFailures,omitempty"`
	Warnings *int32 `json:"warnings,omitempty"`
}

// NewCiIssueCounts instantiates a new CiIssueCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCiIssueCounts() *CiIssueCounts {
	this := CiIssueCounts{}
	return &this
}

// NewCiIssueCountsWithDefaults instantiates a new CiIssueCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCiIssueCountsWithDefaults() *CiIssueCounts {
	this := CiIssueCounts{}
	return &this
}

// GetAnalyzerWarnings returns the AnalyzerWarnings field value if set, zero value otherwise.
func (o *CiIssueCounts) GetAnalyzerWarnings() int32 {
	if o == nil || IsNil(o.AnalyzerWarnings) {
		var ret int32
		return ret
	}
	return *o.AnalyzerWarnings
}

// GetAnalyzerWarningsOk returns a tuple with the AnalyzerWarnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiIssueCounts) GetAnalyzerWarningsOk() (*int32, bool) {
	if o == nil || IsNil(o.AnalyzerWarnings) {
		return nil, false
	}
	return o.AnalyzerWarnings, true
}

// HasAnalyzerWarnings returns a boolean if a field has been set.
func (o *CiIssueCounts) HasAnalyzerWarnings() bool {
	if o != nil && !IsNil(o.AnalyzerWarnings) {
		return true
	}

	return false
}

// SetAnalyzerWarnings gets a reference to the given int32 and assigns it to the AnalyzerWarnings field.
func (o *CiIssueCounts) SetAnalyzerWarnings(v int32) {
	o.AnalyzerWarnings = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *CiIssueCounts) GetErrors() int32 {
	if o == nil || IsNil(o.Errors) {
		var ret int32
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiIssueCounts) GetErrorsOk() (*int32, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *CiIssueCounts) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given int32 and assigns it to the Errors field.
func (o *CiIssueCounts) SetErrors(v int32) {
	o.Errors = &v
}

// GetTestFailures returns the TestFailures field value if set, zero value otherwise.
func (o *CiIssueCounts) GetTestFailures() int32 {
	if o == nil || IsNil(o.TestFailures) {
		var ret int32
		return ret
	}
	return *o.TestFailures
}

// GetTestFailuresOk returns a tuple with the TestFailures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiIssueCounts) GetTestFailuresOk() (*int32, bool) {
	if o == nil || IsNil(o.TestFailures) {
		return nil, false
	}
	return o.TestFailures, true
}

// HasTestFailures returns a boolean if a field has been set.
func (o *CiIssueCounts) HasTestFailures() bool {
	if o != nil && !IsNil(o.TestFailures) {
		return true
	}

	return false
}

// SetTestFailures gets a reference to the given int32 and assigns it to the TestFailures field.
func (o *CiIssueCounts) SetTestFailures(v int32) {
	o.TestFailures = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *CiIssueCounts) GetWarnings() int32 {
	if o == nil || IsNil(o.Warnings) {
		var ret int32
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiIssueCounts) GetWarningsOk() (*int32, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *CiIssueCounts) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given int32 and assigns it to the Warnings field.
func (o *CiIssueCounts) SetWarnings(v int32) {
	o.Warnings = &v
}

func (o CiIssueCounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CiIssueCounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AnalyzerWarnings) {
		toSerialize["analyzerWarnings"] = o.AnalyzerWarnings
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.TestFailures) {
		toSerialize["testFailures"] = o.TestFailures
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableCiIssueCounts struct {
	value *CiIssueCounts
	isSet bool
}

func (v NullableCiIssueCounts) Get() *CiIssueCounts {
	return v.value
}

func (v *NullableCiIssueCounts) Set(val *CiIssueCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableCiIssueCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableCiIssueCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiIssueCounts(val *CiIssueCounts) *NullableCiIssueCounts {
	return &NullableCiIssueCounts{value: val, isSet: true}
}

func (v NullableCiIssueCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiIssueCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


