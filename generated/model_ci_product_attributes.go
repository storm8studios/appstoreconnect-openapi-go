/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"time"
)

// checks if the CiProductAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CiProductAttributes{}

// CiProductAttributes struct for CiProductAttributes
type CiProductAttributes struct {
	Name *string `json:"name,omitempty"`
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	ProductType *string `json:"productType,omitempty"`
}

// NewCiProductAttributes instantiates a new CiProductAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCiProductAttributes() *CiProductAttributes {
	this := CiProductAttributes{}
	return &this
}

// NewCiProductAttributesWithDefaults instantiates a new CiProductAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCiProductAttributesWithDefaults() *CiProductAttributes {
	this := CiProductAttributes{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CiProductAttributes) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiProductAttributes) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CiProductAttributes) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CiProductAttributes) SetName(v string) {
	o.Name = &v
}

// GetCreatedDate returns the CreatedDate field value if set, zero value otherwise.
func (o *CiProductAttributes) GetCreatedDate() time.Time {
	if o == nil || IsNil(o.CreatedDate) {
		var ret time.Time
		return ret
	}
	return *o.CreatedDate
}

// GetCreatedDateOk returns a tuple with the CreatedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiProductAttributes) GetCreatedDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedDate) {
		return nil, false
	}
	return o.CreatedDate, true
}

// HasCreatedDate returns a boolean if a field has been set.
func (o *CiProductAttributes) HasCreatedDate() bool {
	if o != nil && !IsNil(o.CreatedDate) {
		return true
	}

	return false
}

// SetCreatedDate gets a reference to the given time.Time and assigns it to the CreatedDate field.
func (o *CiProductAttributes) SetCreatedDate(v time.Time) {
	o.CreatedDate = &v
}

// GetProductType returns the ProductType field value if set, zero value otherwise.
func (o *CiProductAttributes) GetProductType() string {
	if o == nil || IsNil(o.ProductType) {
		var ret string
		return ret
	}
	return *o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiProductAttributes) GetProductTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductType) {
		return nil, false
	}
	return o.ProductType, true
}

// HasProductType returns a boolean if a field has been set.
func (o *CiProductAttributes) HasProductType() bool {
	if o != nil && !IsNil(o.ProductType) {
		return true
	}

	return false
}

// SetProductType gets a reference to the given string and assigns it to the ProductType field.
func (o *CiProductAttributes) SetProductType(v string) {
	o.ProductType = &v
}

func (o CiProductAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CiProductAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.CreatedDate) {
		toSerialize["createdDate"] = o.CreatedDate
	}
	if !IsNil(o.ProductType) {
		toSerialize["productType"] = o.ProductType
	}
	return toSerialize, nil
}

type NullableCiProductAttributes struct {
	value *CiProductAttributes
	isSet bool
}

func (v NullableCiProductAttributes) Get() *CiProductAttributes {
	return v.value
}

func (v *NullableCiProductAttributes) Set(val *CiProductAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableCiProductAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableCiProductAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiProductAttributes(val *CiProductAttributes) *NullableCiProductAttributes {
	return &NullableCiProductAttributes{value: val, isSet: true}
}

func (v NullableCiProductAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiProductAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


