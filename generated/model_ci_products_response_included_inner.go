/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"fmt"
)

// CiProductsResponseIncludedInner - struct for CiProductsResponseIncludedInner
type CiProductsResponseIncludedInner struct {
	App *App
	BundleId *BundleId
	ScmRepository *ScmRepository
}

// AppAsCiProductsResponseIncludedInner is a convenience function that returns App wrapped in CiProductsResponseIncludedInner
func AppAsCiProductsResponseIncludedInner(v *App) CiProductsResponseIncludedInner {
	return CiProductsResponseIncludedInner{
		App: v,
	}
}

// BundleIdAsCiProductsResponseIncludedInner is a convenience function that returns BundleId wrapped in CiProductsResponseIncludedInner
func BundleIdAsCiProductsResponseIncludedInner(v *BundleId) CiProductsResponseIncludedInner {
	return CiProductsResponseIncludedInner{
		BundleId: v,
	}
}

// ScmRepositoryAsCiProductsResponseIncludedInner is a convenience function that returns ScmRepository wrapped in CiProductsResponseIncludedInner
func ScmRepositoryAsCiProductsResponseIncludedInner(v *ScmRepository) CiProductsResponseIncludedInner {
	return CiProductsResponseIncludedInner{
		ScmRepository: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CiProductsResponseIncludedInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into App
	err = newStrictDecoder(data).Decode(&dst.App)
	if err == nil {
		jsonApp, _ := json.Marshal(dst.App)
		if string(jsonApp) == "{}" { // empty struct
			dst.App = nil
		} else {
			match++
		}
	} else {
		dst.App = nil
	}

	// try to unmarshal data into BundleId
	err = newStrictDecoder(data).Decode(&dst.BundleId)
	if err == nil {
		jsonBundleId, _ := json.Marshal(dst.BundleId)
		if string(jsonBundleId) == "{}" { // empty struct
			dst.BundleId = nil
		} else {
			match++
		}
	} else {
		dst.BundleId = nil
	}

	// try to unmarshal data into ScmRepository
	err = newStrictDecoder(data).Decode(&dst.ScmRepository)
	if err == nil {
		jsonScmRepository, _ := json.Marshal(dst.ScmRepository)
		if string(jsonScmRepository) == "{}" { // empty struct
			dst.ScmRepository = nil
		} else {
			match++
		}
	} else {
		dst.ScmRepository = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.App = nil
		dst.BundleId = nil
		dst.ScmRepository = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CiProductsResponseIncludedInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CiProductsResponseIncludedInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CiProductsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	if src.App != nil {
		return json.Marshal(&src.App)
	}

	if src.BundleId != nil {
		return json.Marshal(&src.BundleId)
	}

	if src.ScmRepository != nil {
		return json.Marshal(&src.ScmRepository)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CiProductsResponseIncludedInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.App != nil {
		return obj.App
	}

	if obj.BundleId != nil {
		return obj.BundleId
	}

	if obj.ScmRepository != nil {
		return obj.ScmRepository
	}

	// all schemas are nil
	return nil
}

type NullableCiProductsResponseIncludedInner struct {
	value *CiProductsResponseIncludedInner
	isSet bool
}

func (v NullableCiProductsResponseIncludedInner) Get() *CiProductsResponseIncludedInner {
	return v.value
}

func (v *NullableCiProductsResponseIncludedInner) Set(val *CiProductsResponseIncludedInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCiProductsResponseIncludedInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCiProductsResponseIncludedInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiProductsResponseIncludedInner(val *CiProductsResponseIncludedInner) *NullableCiProductsResponseIncludedInner {
	return &NullableCiProductsResponseIncludedInner{value: val, isSet: true}
}

func (v NullableCiProductsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiProductsResponseIncludedInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


