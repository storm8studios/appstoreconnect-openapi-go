/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
)

// checks if the CiScheduledStartCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CiScheduledStartCondition{}

// CiScheduledStartCondition struct for CiScheduledStartCondition
type CiScheduledStartCondition struct {
	Source *CiBranchPatterns `json:"source,omitempty"`
	Schedule *CiScheduledStartConditionSchedule `json:"schedule,omitempty"`
}

// NewCiScheduledStartCondition instantiates a new CiScheduledStartCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCiScheduledStartCondition() *CiScheduledStartCondition {
	this := CiScheduledStartCondition{}
	return &this
}

// NewCiScheduledStartConditionWithDefaults instantiates a new CiScheduledStartCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCiScheduledStartConditionWithDefaults() *CiScheduledStartCondition {
	this := CiScheduledStartCondition{}
	return &this
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *CiScheduledStartCondition) GetSource() CiBranchPatterns {
	if o == nil || IsNil(o.Source) {
		var ret CiBranchPatterns
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiScheduledStartCondition) GetSourceOk() (*CiBranchPatterns, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *CiScheduledStartCondition) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given CiBranchPatterns and assigns it to the Source field.
func (o *CiScheduledStartCondition) SetSource(v CiBranchPatterns) {
	o.Source = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *CiScheduledStartCondition) GetSchedule() CiScheduledStartConditionSchedule {
	if o == nil || IsNil(o.Schedule) {
		var ret CiScheduledStartConditionSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiScheduledStartCondition) GetScheduleOk() (*CiScheduledStartConditionSchedule, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *CiScheduledStartCondition) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given CiScheduledStartConditionSchedule and assigns it to the Schedule field.
func (o *CiScheduledStartCondition) SetSchedule(v CiScheduledStartConditionSchedule) {
	o.Schedule = &v
}

func (o CiScheduledStartCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CiScheduledStartCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	return toSerialize, nil
}

type NullableCiScheduledStartCondition struct {
	value *CiScheduledStartCondition
	isSet bool
}

func (v NullableCiScheduledStartCondition) Get() *CiScheduledStartCondition {
	return v.value
}

func (v *NullableCiScheduledStartCondition) Set(val *CiScheduledStartCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableCiScheduledStartCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableCiScheduledStartCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiScheduledStartCondition(val *CiScheduledStartCondition) *NullableCiScheduledStartCondition {
	return &NullableCiScheduledStartCondition{value: val, isSet: true}
}

func (v NullableCiScheduledStartCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiScheduledStartCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


