/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
)

// checks if the CiStartConditionFileMatcher type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CiStartConditionFileMatcher{}

// CiStartConditionFileMatcher struct for CiStartConditionFileMatcher
type CiStartConditionFileMatcher struct {
	Directory *string `json:"directory,omitempty"`
	FileExtension *string `json:"fileExtension,omitempty"`
	FileName *string `json:"fileName,omitempty"`
}

// NewCiStartConditionFileMatcher instantiates a new CiStartConditionFileMatcher object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCiStartConditionFileMatcher() *CiStartConditionFileMatcher {
	this := CiStartConditionFileMatcher{}
	return &this
}

// NewCiStartConditionFileMatcherWithDefaults instantiates a new CiStartConditionFileMatcher object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCiStartConditionFileMatcherWithDefaults() *CiStartConditionFileMatcher {
	this := CiStartConditionFileMatcher{}
	return &this
}

// GetDirectory returns the Directory field value if set, zero value otherwise.
func (o *CiStartConditionFileMatcher) GetDirectory() string {
	if o == nil || IsNil(o.Directory) {
		var ret string
		return ret
	}
	return *o.Directory
}

// GetDirectoryOk returns a tuple with the Directory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiStartConditionFileMatcher) GetDirectoryOk() (*string, bool) {
	if o == nil || IsNil(o.Directory) {
		return nil, false
	}
	return o.Directory, true
}

// HasDirectory returns a boolean if a field has been set.
func (o *CiStartConditionFileMatcher) HasDirectory() bool {
	if o != nil && !IsNil(o.Directory) {
		return true
	}

	return false
}

// SetDirectory gets a reference to the given string and assigns it to the Directory field.
func (o *CiStartConditionFileMatcher) SetDirectory(v string) {
	o.Directory = &v
}

// GetFileExtension returns the FileExtension field value if set, zero value otherwise.
func (o *CiStartConditionFileMatcher) GetFileExtension() string {
	if o == nil || IsNil(o.FileExtension) {
		var ret string
		return ret
	}
	return *o.FileExtension
}

// GetFileExtensionOk returns a tuple with the FileExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiStartConditionFileMatcher) GetFileExtensionOk() (*string, bool) {
	if o == nil || IsNil(o.FileExtension) {
		return nil, false
	}
	return o.FileExtension, true
}

// HasFileExtension returns a boolean if a field has been set.
func (o *CiStartConditionFileMatcher) HasFileExtension() bool {
	if o != nil && !IsNil(o.FileExtension) {
		return true
	}

	return false
}

// SetFileExtension gets a reference to the given string and assigns it to the FileExtension field.
func (o *CiStartConditionFileMatcher) SetFileExtension(v string) {
	o.FileExtension = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *CiStartConditionFileMatcher) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiStartConditionFileMatcher) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *CiStartConditionFileMatcher) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *CiStartConditionFileMatcher) SetFileName(v string) {
	o.FileName = &v
}

func (o CiStartConditionFileMatcher) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CiStartConditionFileMatcher) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Directory) {
		toSerialize["directory"] = o.Directory
	}
	if !IsNil(o.FileExtension) {
		toSerialize["fileExtension"] = o.FileExtension
	}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	return toSerialize, nil
}

type NullableCiStartConditionFileMatcher struct {
	value *CiStartConditionFileMatcher
	isSet bool
}

func (v NullableCiStartConditionFileMatcher) Get() *CiStartConditionFileMatcher {
	return v.value
}

func (v *NullableCiStartConditionFileMatcher) Set(val *CiStartConditionFileMatcher) {
	v.value = val
	v.isSet = true
}

func (v NullableCiStartConditionFileMatcher) IsSet() bool {
	return v.isSet
}

func (v *NullableCiStartConditionFileMatcher) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiStartConditionFileMatcher(val *CiStartConditionFileMatcher) *NullableCiStartConditionFileMatcher {
	return &NullableCiStartConditionFileMatcher{value: val, isSet: true}
}

func (v NullableCiStartConditionFileMatcher) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiStartConditionFileMatcher) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


