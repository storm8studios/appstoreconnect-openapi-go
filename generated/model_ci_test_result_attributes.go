/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
)

// checks if the CiTestResultAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CiTestResultAttributes{}

// CiTestResultAttributes struct for CiTestResultAttributes
type CiTestResultAttributes struct {
	ClassName *string `json:"className,omitempty"`
	Name *string `json:"name,omitempty"`
	Status *CiTestStatus `json:"status,omitempty"`
	FileSource *FileLocation `json:"fileSource,omitempty"`
	Message *string `json:"message,omitempty"`
	DestinationTestResults []CiTestResultAttributesDestinationTestResultsInner `json:"destinationTestResults,omitempty"`
}

// NewCiTestResultAttributes instantiates a new CiTestResultAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCiTestResultAttributes() *CiTestResultAttributes {
	this := CiTestResultAttributes{}
	return &this
}

// NewCiTestResultAttributesWithDefaults instantiates a new CiTestResultAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCiTestResultAttributesWithDefaults() *CiTestResultAttributes {
	this := CiTestResultAttributes{}
	return &this
}

// GetClassName returns the ClassName field value if set, zero value otherwise.
func (o *CiTestResultAttributes) GetClassName() string {
	if o == nil || IsNil(o.ClassName) {
		var ret string
		return ret
	}
	return *o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiTestResultAttributes) GetClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClassName) {
		return nil, false
	}
	return o.ClassName, true
}

// HasClassName returns a boolean if a field has been set.
func (o *CiTestResultAttributes) HasClassName() bool {
	if o != nil && !IsNil(o.ClassName) {
		return true
	}

	return false
}

// SetClassName gets a reference to the given string and assigns it to the ClassName field.
func (o *CiTestResultAttributes) SetClassName(v string) {
	o.ClassName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CiTestResultAttributes) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiTestResultAttributes) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CiTestResultAttributes) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CiTestResultAttributes) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CiTestResultAttributes) GetStatus() CiTestStatus {
	if o == nil || IsNil(o.Status) {
		var ret CiTestStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiTestResultAttributes) GetStatusOk() (*CiTestStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CiTestResultAttributes) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given CiTestStatus and assigns it to the Status field.
func (o *CiTestResultAttributes) SetStatus(v CiTestStatus) {
	o.Status = &v
}

// GetFileSource returns the FileSource field value if set, zero value otherwise.
func (o *CiTestResultAttributes) GetFileSource() FileLocation {
	if o == nil || IsNil(o.FileSource) {
		var ret FileLocation
		return ret
	}
	return *o.FileSource
}

// GetFileSourceOk returns a tuple with the FileSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiTestResultAttributes) GetFileSourceOk() (*FileLocation, bool) {
	if o == nil || IsNil(o.FileSource) {
		return nil, false
	}
	return o.FileSource, true
}

// HasFileSource returns a boolean if a field has been set.
func (o *CiTestResultAttributes) HasFileSource() bool {
	if o != nil && !IsNil(o.FileSource) {
		return true
	}

	return false
}

// SetFileSource gets a reference to the given FileLocation and assigns it to the FileSource field.
func (o *CiTestResultAttributes) SetFileSource(v FileLocation) {
	o.FileSource = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *CiTestResultAttributes) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiTestResultAttributes) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *CiTestResultAttributes) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *CiTestResultAttributes) SetMessage(v string) {
	o.Message = &v
}

// GetDestinationTestResults returns the DestinationTestResults field value if set, zero value otherwise.
func (o *CiTestResultAttributes) GetDestinationTestResults() []CiTestResultAttributesDestinationTestResultsInner {
	if o == nil || IsNil(o.DestinationTestResults) {
		var ret []CiTestResultAttributesDestinationTestResultsInner
		return ret
	}
	return o.DestinationTestResults
}

// GetDestinationTestResultsOk returns a tuple with the DestinationTestResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CiTestResultAttributes) GetDestinationTestResultsOk() ([]CiTestResultAttributesDestinationTestResultsInner, bool) {
	if o == nil || IsNil(o.DestinationTestResults) {
		return nil, false
	}
	return o.DestinationTestResults, true
}

// HasDestinationTestResults returns a boolean if a field has been set.
func (o *CiTestResultAttributes) HasDestinationTestResults() bool {
	if o != nil && !IsNil(o.DestinationTestResults) {
		return true
	}

	return false
}

// SetDestinationTestResults gets a reference to the given []CiTestResultAttributesDestinationTestResultsInner and assigns it to the DestinationTestResults field.
func (o *CiTestResultAttributes) SetDestinationTestResults(v []CiTestResultAttributesDestinationTestResultsInner) {
	o.DestinationTestResults = v
}

func (o CiTestResultAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CiTestResultAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClassName) {
		toSerialize["className"] = o.ClassName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.FileSource) {
		toSerialize["fileSource"] = o.FileSource
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.DestinationTestResults) {
		toSerialize["destinationTestResults"] = o.DestinationTestResults
	}
	return toSerialize, nil
}

type NullableCiTestResultAttributes struct {
	value *CiTestResultAttributes
	isSet bool
}

func (v NullableCiTestResultAttributes) Get() *CiTestResultAttributes {
	return v.value
}

func (v *NullableCiTestResultAttributes) Set(val *CiTestResultAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableCiTestResultAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableCiTestResultAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiTestResultAttributes(val *CiTestResultAttributes) *NullableCiTestResultAttributes {
	return &NullableCiTestResultAttributes{value: val, isSet: true}
}

func (v NullableCiTestResultAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiTestResultAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


