/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"fmt"
)

// CiTestStatus the model 'CiTestStatus'
type CiTestStatus string

// List of CiTestStatus
const (
	CITESTSTATUS_SUCCESS CiTestStatus = "SUCCESS"
	CITESTSTATUS_FAILURE CiTestStatus = "FAILURE"
	CITESTSTATUS_MIXED CiTestStatus = "MIXED"
	CITESTSTATUS_SKIPPED CiTestStatus = "SKIPPED"
	CITESTSTATUS_EXPECTED_FAILURE CiTestStatus = "EXPECTED_FAILURE"
)

// All allowed values of CiTestStatus enum
var AllowedCiTestStatusEnumValues = []CiTestStatus{
	"SUCCESS",
	"FAILURE",
	"MIXED",
	"SKIPPED",
	"EXPECTED_FAILURE",
}

func (v *CiTestStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CiTestStatus(value)
	for _, existing := range AllowedCiTestStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CiTestStatus", value)
}

// NewCiTestStatusFromValue returns a pointer to a valid CiTestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCiTestStatusFromValue(v string) (*CiTestStatus, error) {
	ev := CiTestStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CiTestStatus: valid values are %v", v, AllowedCiTestStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CiTestStatus) IsValid() bool {
	for _, existing := range AllowedCiTestStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CiTestStatus value
func (v CiTestStatus) Ptr() *CiTestStatus {
	return &v
}

type NullableCiTestStatus struct {
	value *CiTestStatus
	isSet bool
}

func (v NullableCiTestStatus) Get() *CiTestStatus {
	return v.value
}

func (v *NullableCiTestStatus) Set(val *CiTestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCiTestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCiTestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCiTestStatus(val *CiTestStatus) *NullableCiTestStatus {
	return &NullableCiTestStatus{value: val, isSet: true}
}

func (v NullableCiTestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCiTestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

