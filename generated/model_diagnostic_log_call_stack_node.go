/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
)

// checks if the DiagnosticLogCallStackNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiagnosticLogCallStackNode{}

// DiagnosticLogCallStackNode struct for DiagnosticLogCallStackNode
type DiagnosticLogCallStackNode struct {
	SampleCount *int32 `json:"sampleCount,omitempty"`
	IsBlameFrame *bool `json:"isBlameFrame,omitempty"`
	SymbolName *string `json:"symbolName,omitempty"`
	InsightsCategory *string `json:"insightsCategory,omitempty"`
	OffsetIntoSymbol *string `json:"offsetIntoSymbol,omitempty"`
	BinaryName *string `json:"binaryName,omitempty"`
	FileName *string `json:"fileName,omitempty"`
	BinaryUUID *string `json:"binaryUUID,omitempty"`
	LineNumber *string `json:"lineNumber,omitempty"`
	Address *string `json:"address,omitempty"`
	OffsetIntoBinaryTextSegment *string `json:"offsetIntoBinaryTextSegment,omitempty"`
	RawFrame *string `json:"rawFrame,omitempty"`
	SubFrames []DiagnosticLogCallStackNode `json:"subFrames,omitempty"`
}

// NewDiagnosticLogCallStackNode instantiates a new DiagnosticLogCallStackNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiagnosticLogCallStackNode() *DiagnosticLogCallStackNode {
	this := DiagnosticLogCallStackNode{}
	return &this
}

// NewDiagnosticLogCallStackNodeWithDefaults instantiates a new DiagnosticLogCallStackNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiagnosticLogCallStackNodeWithDefaults() *DiagnosticLogCallStackNode {
	this := DiagnosticLogCallStackNode{}
	return &this
}

// GetSampleCount returns the SampleCount field value if set, zero value otherwise.
func (o *DiagnosticLogCallStackNode) GetSampleCount() int32 {
	if o == nil || IsNil(o.SampleCount) {
		var ret int32
		return ret
	}
	return *o.SampleCount
}

// GetSampleCountOk returns a tuple with the SampleCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticLogCallStackNode) GetSampleCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SampleCount) {
		return nil, false
	}
	return o.SampleCount, true
}

// HasSampleCount returns a boolean if a field has been set.
func (o *DiagnosticLogCallStackNode) HasSampleCount() bool {
	if o != nil && !IsNil(o.SampleCount) {
		return true
	}

	return false
}

// SetSampleCount gets a reference to the given int32 and assigns it to the SampleCount field.
func (o *DiagnosticLogCallStackNode) SetSampleCount(v int32) {
	o.SampleCount = &v
}

// GetIsBlameFrame returns the IsBlameFrame field value if set, zero value otherwise.
func (o *DiagnosticLogCallStackNode) GetIsBlameFrame() bool {
	if o == nil || IsNil(o.IsBlameFrame) {
		var ret bool
		return ret
	}
	return *o.IsBlameFrame
}

// GetIsBlameFrameOk returns a tuple with the IsBlameFrame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticLogCallStackNode) GetIsBlameFrameOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBlameFrame) {
		return nil, false
	}
	return o.IsBlameFrame, true
}

// HasIsBlameFrame returns a boolean if a field has been set.
func (o *DiagnosticLogCallStackNode) HasIsBlameFrame() bool {
	if o != nil && !IsNil(o.IsBlameFrame) {
		return true
	}

	return false
}

// SetIsBlameFrame gets a reference to the given bool and assigns it to the IsBlameFrame field.
func (o *DiagnosticLogCallStackNode) SetIsBlameFrame(v bool) {
	o.IsBlameFrame = &v
}

// GetSymbolName returns the SymbolName field value if set, zero value otherwise.
func (o *DiagnosticLogCallStackNode) GetSymbolName() string {
	if o == nil || IsNil(o.SymbolName) {
		var ret string
		return ret
	}
	return *o.SymbolName
}

// GetSymbolNameOk returns a tuple with the SymbolName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticLogCallStackNode) GetSymbolNameOk() (*string, bool) {
	if o == nil || IsNil(o.SymbolName) {
		return nil, false
	}
	return o.SymbolName, true
}

// HasSymbolName returns a boolean if a field has been set.
func (o *DiagnosticLogCallStackNode) HasSymbolName() bool {
	if o != nil && !IsNil(o.SymbolName) {
		return true
	}

	return false
}

// SetSymbolName gets a reference to the given string and assigns it to the SymbolName field.
func (o *DiagnosticLogCallStackNode) SetSymbolName(v string) {
	o.SymbolName = &v
}

// GetInsightsCategory returns the InsightsCategory field value if set, zero value otherwise.
func (o *DiagnosticLogCallStackNode) GetInsightsCategory() string {
	if o == nil || IsNil(o.InsightsCategory) {
		var ret string
		return ret
	}
	return *o.InsightsCategory
}

// GetInsightsCategoryOk returns a tuple with the InsightsCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticLogCallStackNode) GetInsightsCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.InsightsCategory) {
		return nil, false
	}
	return o.InsightsCategory, true
}

// HasInsightsCategory returns a boolean if a field has been set.
func (o *DiagnosticLogCallStackNode) HasInsightsCategory() bool {
	if o != nil && !IsNil(o.InsightsCategory) {
		return true
	}

	return false
}

// SetInsightsCategory gets a reference to the given string and assigns it to the InsightsCategory field.
func (o *DiagnosticLogCallStackNode) SetInsightsCategory(v string) {
	o.InsightsCategory = &v
}

// GetOffsetIntoSymbol returns the OffsetIntoSymbol field value if set, zero value otherwise.
func (o *DiagnosticLogCallStackNode) GetOffsetIntoSymbol() string {
	if o == nil || IsNil(o.OffsetIntoSymbol) {
		var ret string
		return ret
	}
	return *o.OffsetIntoSymbol
}

// GetOffsetIntoSymbolOk returns a tuple with the OffsetIntoSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticLogCallStackNode) GetOffsetIntoSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.OffsetIntoSymbol) {
		return nil, false
	}
	return o.OffsetIntoSymbol, true
}

// HasOffsetIntoSymbol returns a boolean if a field has been set.
func (o *DiagnosticLogCallStackNode) HasOffsetIntoSymbol() bool {
	if o != nil && !IsNil(o.OffsetIntoSymbol) {
		return true
	}

	return false
}

// SetOffsetIntoSymbol gets a reference to the given string and assigns it to the OffsetIntoSymbol field.
func (o *DiagnosticLogCallStackNode) SetOffsetIntoSymbol(v string) {
	o.OffsetIntoSymbol = &v
}

// GetBinaryName returns the BinaryName field value if set, zero value otherwise.
func (o *DiagnosticLogCallStackNode) GetBinaryName() string {
	if o == nil || IsNil(o.BinaryName) {
		var ret string
		return ret
	}
	return *o.BinaryName
}

// GetBinaryNameOk returns a tuple with the BinaryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticLogCallStackNode) GetBinaryNameOk() (*string, bool) {
	if o == nil || IsNil(o.BinaryName) {
		return nil, false
	}
	return o.BinaryName, true
}

// HasBinaryName returns a boolean if a field has been set.
func (o *DiagnosticLogCallStackNode) HasBinaryName() bool {
	if o != nil && !IsNil(o.BinaryName) {
		return true
	}

	return false
}

// SetBinaryName gets a reference to the given string and assigns it to the BinaryName field.
func (o *DiagnosticLogCallStackNode) SetBinaryName(v string) {
	o.BinaryName = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *DiagnosticLogCallStackNode) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticLogCallStackNode) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *DiagnosticLogCallStackNode) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *DiagnosticLogCallStackNode) SetFileName(v string) {
	o.FileName = &v
}

// GetBinaryUUID returns the BinaryUUID field value if set, zero value otherwise.
func (o *DiagnosticLogCallStackNode) GetBinaryUUID() string {
	if o == nil || IsNil(o.BinaryUUID) {
		var ret string
		return ret
	}
	return *o.BinaryUUID
}

// GetBinaryUUIDOk returns a tuple with the BinaryUUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticLogCallStackNode) GetBinaryUUIDOk() (*string, bool) {
	if o == nil || IsNil(o.BinaryUUID) {
		return nil, false
	}
	return o.BinaryUUID, true
}

// HasBinaryUUID returns a boolean if a field has been set.
func (o *DiagnosticLogCallStackNode) HasBinaryUUID() bool {
	if o != nil && !IsNil(o.BinaryUUID) {
		return true
	}

	return false
}

// SetBinaryUUID gets a reference to the given string and assigns it to the BinaryUUID field.
func (o *DiagnosticLogCallStackNode) SetBinaryUUID(v string) {
	o.BinaryUUID = &v
}

// GetLineNumber returns the LineNumber field value if set, zero value otherwise.
func (o *DiagnosticLogCallStackNode) GetLineNumber() string {
	if o == nil || IsNil(o.LineNumber) {
		var ret string
		return ret
	}
	return *o.LineNumber
}

// GetLineNumberOk returns a tuple with the LineNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticLogCallStackNode) GetLineNumberOk() (*string, bool) {
	if o == nil || IsNil(o.LineNumber) {
		return nil, false
	}
	return o.LineNumber, true
}

// HasLineNumber returns a boolean if a field has been set.
func (o *DiagnosticLogCallStackNode) HasLineNumber() bool {
	if o != nil && !IsNil(o.LineNumber) {
		return true
	}

	return false
}

// SetLineNumber gets a reference to the given string and assigns it to the LineNumber field.
func (o *DiagnosticLogCallStackNode) SetLineNumber(v string) {
	o.LineNumber = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *DiagnosticLogCallStackNode) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticLogCallStackNode) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *DiagnosticLogCallStackNode) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *DiagnosticLogCallStackNode) SetAddress(v string) {
	o.Address = &v
}

// GetOffsetIntoBinaryTextSegment returns the OffsetIntoBinaryTextSegment field value if set, zero value otherwise.
func (o *DiagnosticLogCallStackNode) GetOffsetIntoBinaryTextSegment() string {
	if o == nil || IsNil(o.OffsetIntoBinaryTextSegment) {
		var ret string
		return ret
	}
	return *o.OffsetIntoBinaryTextSegment
}

// GetOffsetIntoBinaryTextSegmentOk returns a tuple with the OffsetIntoBinaryTextSegment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticLogCallStackNode) GetOffsetIntoBinaryTextSegmentOk() (*string, bool) {
	if o == nil || IsNil(o.OffsetIntoBinaryTextSegment) {
		return nil, false
	}
	return o.OffsetIntoBinaryTextSegment, true
}

// HasOffsetIntoBinaryTextSegment returns a boolean if a field has been set.
func (o *DiagnosticLogCallStackNode) HasOffsetIntoBinaryTextSegment() bool {
	if o != nil && !IsNil(o.OffsetIntoBinaryTextSegment) {
		return true
	}

	return false
}

// SetOffsetIntoBinaryTextSegment gets a reference to the given string and assigns it to the OffsetIntoBinaryTextSegment field.
func (o *DiagnosticLogCallStackNode) SetOffsetIntoBinaryTextSegment(v string) {
	o.OffsetIntoBinaryTextSegment = &v
}

// GetRawFrame returns the RawFrame field value if set, zero value otherwise.
func (o *DiagnosticLogCallStackNode) GetRawFrame() string {
	if o == nil || IsNil(o.RawFrame) {
		var ret string
		return ret
	}
	return *o.RawFrame
}

// GetRawFrameOk returns a tuple with the RawFrame field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticLogCallStackNode) GetRawFrameOk() (*string, bool) {
	if o == nil || IsNil(o.RawFrame) {
		return nil, false
	}
	return o.RawFrame, true
}

// HasRawFrame returns a boolean if a field has been set.
func (o *DiagnosticLogCallStackNode) HasRawFrame() bool {
	if o != nil && !IsNil(o.RawFrame) {
		return true
	}

	return false
}

// SetRawFrame gets a reference to the given string and assigns it to the RawFrame field.
func (o *DiagnosticLogCallStackNode) SetRawFrame(v string) {
	o.RawFrame = &v
}

// GetSubFrames returns the SubFrames field value if set, zero value otherwise.
func (o *DiagnosticLogCallStackNode) GetSubFrames() []DiagnosticLogCallStackNode {
	if o == nil || IsNil(o.SubFrames) {
		var ret []DiagnosticLogCallStackNode
		return ret
	}
	return o.SubFrames
}

// GetSubFramesOk returns a tuple with the SubFrames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiagnosticLogCallStackNode) GetSubFramesOk() ([]DiagnosticLogCallStackNode, bool) {
	if o == nil || IsNil(o.SubFrames) {
		return nil, false
	}
	return o.SubFrames, true
}

// HasSubFrames returns a boolean if a field has been set.
func (o *DiagnosticLogCallStackNode) HasSubFrames() bool {
	if o != nil && !IsNil(o.SubFrames) {
		return true
	}

	return false
}

// SetSubFrames gets a reference to the given []DiagnosticLogCallStackNode and assigns it to the SubFrames field.
func (o *DiagnosticLogCallStackNode) SetSubFrames(v []DiagnosticLogCallStackNode) {
	o.SubFrames = v
}

func (o DiagnosticLogCallStackNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiagnosticLogCallStackNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SampleCount) {
		toSerialize["sampleCount"] = o.SampleCount
	}
	if !IsNil(o.IsBlameFrame) {
		toSerialize["isBlameFrame"] = o.IsBlameFrame
	}
	if !IsNil(o.SymbolName) {
		toSerialize["symbolName"] = o.SymbolName
	}
	if !IsNil(o.InsightsCategory) {
		toSerialize["insightsCategory"] = o.InsightsCategory
	}
	if !IsNil(o.OffsetIntoSymbol) {
		toSerialize["offsetIntoSymbol"] = o.OffsetIntoSymbol
	}
	if !IsNil(o.BinaryName) {
		toSerialize["binaryName"] = o.BinaryName
	}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.BinaryUUID) {
		toSerialize["binaryUUID"] = o.BinaryUUID
	}
	if !IsNil(o.LineNumber) {
		toSerialize["lineNumber"] = o.LineNumber
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.OffsetIntoBinaryTextSegment) {
		toSerialize["offsetIntoBinaryTextSegment"] = o.OffsetIntoBinaryTextSegment
	}
	if !IsNil(o.RawFrame) {
		toSerialize["rawFrame"] = o.RawFrame
	}
	if !IsNil(o.SubFrames) {
		toSerialize["subFrames"] = o.SubFrames
	}
	return toSerialize, nil
}

type NullableDiagnosticLogCallStackNode struct {
	value *DiagnosticLogCallStackNode
	isSet bool
}

func (v NullableDiagnosticLogCallStackNode) Get() *DiagnosticLogCallStackNode {
	return v.value
}

func (v *NullableDiagnosticLogCallStackNode) Set(val *DiagnosticLogCallStackNode) {
	v.value = val
	v.isSet = true
}

func (v NullableDiagnosticLogCallStackNode) IsSet() bool {
	return v.isSet
}

func (v *NullableDiagnosticLogCallStackNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiagnosticLogCallStackNode(val *DiagnosticLogCallStackNode) *NullableDiagnosticLogCallStackNode {
	return &NullableDiagnosticLogCallStackNode{value: val, isSet: true}
}

func (v NullableDiagnosticLogCallStackNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiagnosticLogCallStackNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


