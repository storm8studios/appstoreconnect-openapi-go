/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"fmt"
)

// ErrorResponseErrorsInnerSource - struct for ErrorResponseErrorsInnerSource
type ErrorResponseErrorsInnerSource struct {
	ErrorSourceParameter *ErrorSourceParameter
	ErrorSourcePointer *ErrorSourcePointer
}

// ErrorSourceParameterAsErrorResponseErrorsInnerSource is a convenience function that returns ErrorSourceParameter wrapped in ErrorResponseErrorsInnerSource
func ErrorSourceParameterAsErrorResponseErrorsInnerSource(v *ErrorSourceParameter) ErrorResponseErrorsInnerSource {
	return ErrorResponseErrorsInnerSource{
		ErrorSourceParameter: v,
	}
}

// ErrorSourcePointerAsErrorResponseErrorsInnerSource is a convenience function that returns ErrorSourcePointer wrapped in ErrorResponseErrorsInnerSource
func ErrorSourcePointerAsErrorResponseErrorsInnerSource(v *ErrorSourcePointer) ErrorResponseErrorsInnerSource {
	return ErrorResponseErrorsInnerSource{
		ErrorSourcePointer: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ErrorResponseErrorsInnerSource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ErrorSourceParameter
	err = newStrictDecoder(data).Decode(&dst.ErrorSourceParameter)
	if err == nil {
		jsonErrorSourceParameter, _ := json.Marshal(dst.ErrorSourceParameter)
		if string(jsonErrorSourceParameter) == "{}" { // empty struct
			dst.ErrorSourceParameter = nil
		} else {
			match++
		}
	} else {
		dst.ErrorSourceParameter = nil
	}

	// try to unmarshal data into ErrorSourcePointer
	err = newStrictDecoder(data).Decode(&dst.ErrorSourcePointer)
	if err == nil {
		jsonErrorSourcePointer, _ := json.Marshal(dst.ErrorSourcePointer)
		if string(jsonErrorSourcePointer) == "{}" { // empty struct
			dst.ErrorSourcePointer = nil
		} else {
			match++
		}
	} else {
		dst.ErrorSourcePointer = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ErrorSourceParameter = nil
		dst.ErrorSourcePointer = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ErrorResponseErrorsInnerSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ErrorResponseErrorsInnerSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ErrorResponseErrorsInnerSource) MarshalJSON() ([]byte, error) {
	if src.ErrorSourceParameter != nil {
		return json.Marshal(&src.ErrorSourceParameter)
	}

	if src.ErrorSourcePointer != nil {
		return json.Marshal(&src.ErrorSourcePointer)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ErrorResponseErrorsInnerSource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ErrorSourceParameter != nil {
		return obj.ErrorSourceParameter
	}

	if obj.ErrorSourcePointer != nil {
		return obj.ErrorSourcePointer
	}

	// all schemas are nil
	return nil
}

type NullableErrorResponseErrorsInnerSource struct {
	value *ErrorResponseErrorsInnerSource
	isSet bool
}

func (v NullableErrorResponseErrorsInnerSource) Get() *ErrorResponseErrorsInnerSource {
	return v.value
}

func (v *NullableErrorResponseErrorsInnerSource) Set(val *ErrorResponseErrorsInnerSource) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponseErrorsInnerSource) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponseErrorsInnerSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponseErrorsInnerSource(val *ErrorResponseErrorsInnerSource) *NullableErrorResponseErrorsInnerSource {
	return &NullableErrorResponseErrorsInnerSource{value: val, isSet: true}
}

func (v NullableErrorResponseErrorsInnerSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponseErrorsInnerSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


