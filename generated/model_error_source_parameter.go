/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
)

// checks if the ErrorSourceParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorSourceParameter{}

// ErrorSourceParameter struct for ErrorSourceParameter
type ErrorSourceParameter struct {
	Parameter *string `json:"parameter,omitempty"`
}

// NewErrorSourceParameter instantiates a new ErrorSourceParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorSourceParameter() *ErrorSourceParameter {
	this := ErrorSourceParameter{}
	return &this
}

// NewErrorSourceParameterWithDefaults instantiates a new ErrorSourceParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorSourceParameterWithDefaults() *ErrorSourceParameter {
	this := ErrorSourceParameter{}
	return &this
}

// GetParameter returns the Parameter field value if set, zero value otherwise.
func (o *ErrorSourceParameter) GetParameter() string {
	if o == nil || IsNil(o.Parameter) {
		var ret string
		return ret
	}
	return *o.Parameter
}

// GetParameterOk returns a tuple with the Parameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorSourceParameter) GetParameterOk() (*string, bool) {
	if o == nil || IsNil(o.Parameter) {
		return nil, false
	}
	return o.Parameter, true
}

// HasParameter returns a boolean if a field has been set.
func (o *ErrorSourceParameter) HasParameter() bool {
	if o != nil && !IsNil(o.Parameter) {
		return true
	}

	return false
}

// SetParameter gets a reference to the given string and assigns it to the Parameter field.
func (o *ErrorSourceParameter) SetParameter(v string) {
	o.Parameter = &v
}

func (o ErrorSourceParameter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorSourceParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Parameter) {
		toSerialize["parameter"] = o.Parameter
	}
	return toSerialize, nil
}

type NullableErrorSourceParameter struct {
	value *ErrorSourceParameter
	isSet bool
}

func (v NullableErrorSourceParameter) Get() *ErrorSourceParameter {
	return v.value
}

func (v *NullableErrorSourceParameter) Set(val *ErrorSourceParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorSourceParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorSourceParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorSourceParameter(val *ErrorSourceParameter) *NullableErrorSourceParameter {
	return &NullableErrorSourceParameter{value: val, isSet: true}
}

func (v NullableErrorSourceParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorSourceParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


