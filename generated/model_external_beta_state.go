/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"fmt"
)

// ExternalBetaState the model 'ExternalBetaState'
type ExternalBetaState string

// List of ExternalBetaState
const (
	EXTERNALBETASTATE_PROCESSING ExternalBetaState = "PROCESSING"
	EXTERNALBETASTATE_PROCESSING_EXCEPTION ExternalBetaState = "PROCESSING_EXCEPTION"
	EXTERNALBETASTATE_MISSING_EXPORT_COMPLIANCE ExternalBetaState = "MISSING_EXPORT_COMPLIANCE"
	EXTERNALBETASTATE_READY_FOR_BETA_TESTING ExternalBetaState = "READY_FOR_BETA_TESTING"
	EXTERNALBETASTATE_IN_BETA_TESTING ExternalBetaState = "IN_BETA_TESTING"
	EXTERNALBETASTATE_EXPIRED ExternalBetaState = "EXPIRED"
	EXTERNALBETASTATE_READY_FOR_BETA_SUBMISSION ExternalBetaState = "READY_FOR_BETA_SUBMISSION"
	EXTERNALBETASTATE_IN_EXPORT_COMPLIANCE_REVIEW ExternalBetaState = "IN_EXPORT_COMPLIANCE_REVIEW"
	EXTERNALBETASTATE_WAITING_FOR_BETA_REVIEW ExternalBetaState = "WAITING_FOR_BETA_REVIEW"
	EXTERNALBETASTATE_IN_BETA_REVIEW ExternalBetaState = "IN_BETA_REVIEW"
	EXTERNALBETASTATE_BETA_REJECTED ExternalBetaState = "BETA_REJECTED"
	EXTERNALBETASTATE_BETA_APPROVED ExternalBetaState = "BETA_APPROVED"
)

// All allowed values of ExternalBetaState enum
var AllowedExternalBetaStateEnumValues = []ExternalBetaState{
	"PROCESSING",
	"PROCESSING_EXCEPTION",
	"MISSING_EXPORT_COMPLIANCE",
	"READY_FOR_BETA_TESTING",
	"IN_BETA_TESTING",
	"EXPIRED",
	"READY_FOR_BETA_SUBMISSION",
	"IN_EXPORT_COMPLIANCE_REVIEW",
	"WAITING_FOR_BETA_REVIEW",
	"IN_BETA_REVIEW",
	"BETA_REJECTED",
	"BETA_APPROVED",
}

func (v *ExternalBetaState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExternalBetaState(value)
	for _, existing := range AllowedExternalBetaStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExternalBetaState", value)
}

// NewExternalBetaStateFromValue returns a pointer to a valid ExternalBetaState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExternalBetaStateFromValue(v string) (*ExternalBetaState, error) {
	ev := ExternalBetaState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExternalBetaState: valid values are %v", v, AllowedExternalBetaStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExternalBetaState) IsValid() bool {
	for _, existing := range AllowedExternalBetaStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExternalBetaState value
func (v ExternalBetaState) Ptr() *ExternalBetaState {
	return &v
}

type NullableExternalBetaState struct {
	value *ExternalBetaState
	isSet bool
}

func (v NullableExternalBetaState) Get() *ExternalBetaState {
	return v.value
}

func (v *NullableExternalBetaState) Set(val *ExternalBetaState) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalBetaState) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalBetaState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalBetaState(val *ExternalBetaState) *NullableExternalBetaState {
	return &NullableExternalBetaState{value: val, isSet: true}
}

func (v NullableExternalBetaState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalBetaState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

