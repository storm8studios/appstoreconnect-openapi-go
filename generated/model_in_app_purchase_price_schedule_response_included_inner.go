/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"fmt"
)

// InAppPurchasePriceScheduleResponseIncludedInner - struct for InAppPurchasePriceScheduleResponseIncludedInner
type InAppPurchasePriceScheduleResponseIncludedInner struct {
	InAppPurchasePrice *InAppPurchasePrice
	InAppPurchaseV2 *InAppPurchaseV2
	Territory *Territory
}

// InAppPurchasePriceAsInAppPurchasePriceScheduleResponseIncludedInner is a convenience function that returns InAppPurchasePrice wrapped in InAppPurchasePriceScheduleResponseIncludedInner
func InAppPurchasePriceAsInAppPurchasePriceScheduleResponseIncludedInner(v *InAppPurchasePrice) InAppPurchasePriceScheduleResponseIncludedInner {
	return InAppPurchasePriceScheduleResponseIncludedInner{
		InAppPurchasePrice: v,
	}
}

// InAppPurchaseV2AsInAppPurchasePriceScheduleResponseIncludedInner is a convenience function that returns InAppPurchaseV2 wrapped in InAppPurchasePriceScheduleResponseIncludedInner
func InAppPurchaseV2AsInAppPurchasePriceScheduleResponseIncludedInner(v *InAppPurchaseV2) InAppPurchasePriceScheduleResponseIncludedInner {
	return InAppPurchasePriceScheduleResponseIncludedInner{
		InAppPurchaseV2: v,
	}
}

// TerritoryAsInAppPurchasePriceScheduleResponseIncludedInner is a convenience function that returns Territory wrapped in InAppPurchasePriceScheduleResponseIncludedInner
func TerritoryAsInAppPurchasePriceScheduleResponseIncludedInner(v *Territory) InAppPurchasePriceScheduleResponseIncludedInner {
	return InAppPurchasePriceScheduleResponseIncludedInner{
		Territory: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *InAppPurchasePriceScheduleResponseIncludedInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into InAppPurchasePrice
	err = newStrictDecoder(data).Decode(&dst.InAppPurchasePrice)
	if err == nil {
		jsonInAppPurchasePrice, _ := json.Marshal(dst.InAppPurchasePrice)
		if string(jsonInAppPurchasePrice) == "{}" { // empty struct
			dst.InAppPurchasePrice = nil
		} else {
			match++
		}
	} else {
		dst.InAppPurchasePrice = nil
	}

	// try to unmarshal data into InAppPurchaseV2
	err = newStrictDecoder(data).Decode(&dst.InAppPurchaseV2)
	if err == nil {
		jsonInAppPurchaseV2, _ := json.Marshal(dst.InAppPurchaseV2)
		if string(jsonInAppPurchaseV2) == "{}" { // empty struct
			dst.InAppPurchaseV2 = nil
		} else {
			match++
		}
	} else {
		dst.InAppPurchaseV2 = nil
	}

	// try to unmarshal data into Territory
	err = newStrictDecoder(data).Decode(&dst.Territory)
	if err == nil {
		jsonTerritory, _ := json.Marshal(dst.Territory)
		if string(jsonTerritory) == "{}" { // empty struct
			dst.Territory = nil
		} else {
			match++
		}
	} else {
		dst.Territory = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.InAppPurchasePrice = nil
		dst.InAppPurchaseV2 = nil
		dst.Territory = nil

		return fmt.Errorf("data matches more than one schema in oneOf(InAppPurchasePriceScheduleResponseIncludedInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(InAppPurchasePriceScheduleResponseIncludedInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src InAppPurchasePriceScheduleResponseIncludedInner) MarshalJSON() ([]byte, error) {
	if src.InAppPurchasePrice != nil {
		return json.Marshal(&src.InAppPurchasePrice)
	}

	if src.InAppPurchaseV2 != nil {
		return json.Marshal(&src.InAppPurchaseV2)
	}

	if src.Territory != nil {
		return json.Marshal(&src.Territory)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *InAppPurchasePriceScheduleResponseIncludedInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.InAppPurchasePrice != nil {
		return obj.InAppPurchasePrice
	}

	if obj.InAppPurchaseV2 != nil {
		return obj.InAppPurchaseV2
	}

	if obj.Territory != nil {
		return obj.Territory
	}

	// all schemas are nil
	return nil
}

type NullableInAppPurchasePriceScheduleResponseIncludedInner struct {
	value *InAppPurchasePriceScheduleResponseIncludedInner
	isSet bool
}

func (v NullableInAppPurchasePriceScheduleResponseIncludedInner) Get() *InAppPurchasePriceScheduleResponseIncludedInner {
	return v.value
}

func (v *NullableInAppPurchasePriceScheduleResponseIncludedInner) Set(val *InAppPurchasePriceScheduleResponseIncludedInner) {
	v.value = val
	v.isSet = true
}

func (v NullableInAppPurchasePriceScheduleResponseIncludedInner) IsSet() bool {
	return v.isSet
}

func (v *NullableInAppPurchasePriceScheduleResponseIncludedInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInAppPurchasePriceScheduleResponseIncludedInner(val *InAppPurchasePriceScheduleResponseIncludedInner) *NullableInAppPurchasePriceScheduleResponseIncludedInner {
	return &NullableInAppPurchasePriceScheduleResponseIncludedInner{value: val, isSet: true}
}

func (v NullableInAppPurchasePriceScheduleResponseIncludedInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInAppPurchasePriceScheduleResponseIncludedInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


