/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"fmt"
)

// InAppPurchaseType the model 'InAppPurchaseType'
type InAppPurchaseType string

// List of InAppPurchaseType
const (
	INAPPPURCHASETYPE_CONSUMABLE InAppPurchaseType = "CONSUMABLE"
	INAPPPURCHASETYPE_NON_CONSUMABLE InAppPurchaseType = "NON_CONSUMABLE"
	INAPPPURCHASETYPE_NON_RENEWING_SUBSCRIPTION InAppPurchaseType = "NON_RENEWING_SUBSCRIPTION"
)

// All allowed values of InAppPurchaseType enum
var AllowedInAppPurchaseTypeEnumValues = []InAppPurchaseType{
	"CONSUMABLE",
	"NON_CONSUMABLE",
	"NON_RENEWING_SUBSCRIPTION",
}

func (v *InAppPurchaseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InAppPurchaseType(value)
	for _, existing := range AllowedInAppPurchaseTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InAppPurchaseType", value)
}

// NewInAppPurchaseTypeFromValue returns a pointer to a valid InAppPurchaseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInAppPurchaseTypeFromValue(v string) (*InAppPurchaseType, error) {
	ev := InAppPurchaseType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InAppPurchaseType: valid values are %v", v, AllowedInAppPurchaseTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InAppPurchaseType) IsValid() bool {
	for _, existing := range AllowedInAppPurchaseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InAppPurchaseType value
func (v InAppPurchaseType) Ptr() *InAppPurchaseType {
	return &v
}

type NullableInAppPurchaseType struct {
	value *InAppPurchaseType
	isSet bool
}

func (v NullableInAppPurchaseType) Get() *InAppPurchaseType {
	return v.value
}

func (v *NullableInAppPurchaseType) Set(val *InAppPurchaseType) {
	v.value = val
	v.isSet = true
}

func (v NullableInAppPurchaseType) IsSet() bool {
	return v.isSet
}

func (v *NullableInAppPurchaseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInAppPurchaseType(val *InAppPurchaseType) *NullableInAppPurchaseType {
	return &NullableInAppPurchaseType{value: val, isSet: true}
}

func (v NullableInAppPurchaseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInAppPurchaseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

