/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"fmt"
)

// InternalBetaState the model 'InternalBetaState'
type InternalBetaState string

// List of InternalBetaState
const (
	INTERNALBETASTATE_PROCESSING InternalBetaState = "PROCESSING"
	INTERNALBETASTATE_PROCESSING_EXCEPTION InternalBetaState = "PROCESSING_EXCEPTION"
	INTERNALBETASTATE_MISSING_EXPORT_COMPLIANCE InternalBetaState = "MISSING_EXPORT_COMPLIANCE"
	INTERNALBETASTATE_READY_FOR_BETA_TESTING InternalBetaState = "READY_FOR_BETA_TESTING"
	INTERNALBETASTATE_IN_BETA_TESTING InternalBetaState = "IN_BETA_TESTING"
	INTERNALBETASTATE_EXPIRED InternalBetaState = "EXPIRED"
	INTERNALBETASTATE_IN_EXPORT_COMPLIANCE_REVIEW InternalBetaState = "IN_EXPORT_COMPLIANCE_REVIEW"
)

// All allowed values of InternalBetaState enum
var AllowedInternalBetaStateEnumValues = []InternalBetaState{
	"PROCESSING",
	"PROCESSING_EXCEPTION",
	"MISSING_EXPORT_COMPLIANCE",
	"READY_FOR_BETA_TESTING",
	"IN_BETA_TESTING",
	"EXPIRED",
	"IN_EXPORT_COMPLIANCE_REVIEW",
}

func (v *InternalBetaState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InternalBetaState(value)
	for _, existing := range AllowedInternalBetaStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InternalBetaState", value)
}

// NewInternalBetaStateFromValue returns a pointer to a valid InternalBetaState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInternalBetaStateFromValue(v string) (*InternalBetaState, error) {
	ev := InternalBetaState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InternalBetaState: valid values are %v", v, AllowedInternalBetaStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InternalBetaState) IsValid() bool {
	for _, existing := range AllowedInternalBetaStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InternalBetaState value
func (v InternalBetaState) Ptr() *InternalBetaState {
	return &v
}

type NullableInternalBetaState struct {
	value *InternalBetaState
	isSet bool
}

func (v NullableInternalBetaState) Get() *InternalBetaState {
	return v.value
}

func (v *NullableInternalBetaState) Set(val *InternalBetaState) {
	v.value = val
	v.isSet = true
}

func (v NullableInternalBetaState) IsSet() bool {
	return v.isSet
}

func (v *NullableInternalBetaState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternalBetaState(val *InternalBetaState) *NullableInternalBetaState {
	return &NullableInternalBetaState{value: val, isSet: true}
}

func (v NullableInternalBetaState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternalBetaState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

