/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"fmt"
)

// KidsAgeBand the model 'KidsAgeBand'
type KidsAgeBand string

// List of KidsAgeBand
const (
	KIDSAGEBAND_FIVE_AND_UNDER KidsAgeBand = "FIVE_AND_UNDER"
	KIDSAGEBAND_SIX_TO_EIGHT KidsAgeBand = "SIX_TO_EIGHT"
	KIDSAGEBAND_NINE_TO_ELEVEN KidsAgeBand = "NINE_TO_ELEVEN"
)

// All allowed values of KidsAgeBand enum
var AllowedKidsAgeBandEnumValues = []KidsAgeBand{
	"FIVE_AND_UNDER",
	"SIX_TO_EIGHT",
	"NINE_TO_ELEVEN",
}

func (v *KidsAgeBand) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KidsAgeBand(value)
	for _, existing := range AllowedKidsAgeBandEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KidsAgeBand", value)
}

// NewKidsAgeBandFromValue returns a pointer to a valid KidsAgeBand
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKidsAgeBandFromValue(v string) (*KidsAgeBand, error) {
	ev := KidsAgeBand(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KidsAgeBand: valid values are %v", v, AllowedKidsAgeBandEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KidsAgeBand) IsValid() bool {
	for _, existing := range AllowedKidsAgeBandEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KidsAgeBand value
func (v KidsAgeBand) Ptr() *KidsAgeBand {
	return &v
}

type NullableKidsAgeBand struct {
	value *KidsAgeBand
	isSet bool
}

func (v NullableKidsAgeBand) Get() *KidsAgeBand {
	return v.value
}

func (v *NullableKidsAgeBand) Set(val *KidsAgeBand) {
	v.value = val
	v.isSet = true
}

func (v NullableKidsAgeBand) IsSet() bool {
	return v.isSet
}

func (v *NullableKidsAgeBand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKidsAgeBand(val *KidsAgeBand) *NullableKidsAgeBand {
	return &NullableKidsAgeBand{value: val, isSet: true}
}

func (v NullableKidsAgeBand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKidsAgeBand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

