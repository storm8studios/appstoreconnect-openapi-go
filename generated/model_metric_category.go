/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"fmt"
)

// MetricCategory the model 'MetricCategory'
type MetricCategory string

// List of MetricCategory
const (
	METRICCATEGORY_HANG MetricCategory = "HANG"
	METRICCATEGORY_LAUNCH MetricCategory = "LAUNCH"
	METRICCATEGORY_MEMORY MetricCategory = "MEMORY"
	METRICCATEGORY_DISK MetricCategory = "DISK"
	METRICCATEGORY_BATTERY MetricCategory = "BATTERY"
	METRICCATEGORY_TERMINATION MetricCategory = "TERMINATION"
	METRICCATEGORY_ANIMATION MetricCategory = "ANIMATION"
)

// All allowed values of MetricCategory enum
var AllowedMetricCategoryEnumValues = []MetricCategory{
	"HANG",
	"LAUNCH",
	"MEMORY",
	"DISK",
	"BATTERY",
	"TERMINATION",
	"ANIMATION",
}

func (v *MetricCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetricCategory(value)
	for _, existing := range AllowedMetricCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetricCategory", value)
}

// NewMetricCategoryFromValue returns a pointer to a valid MetricCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricCategoryFromValue(v string) (*MetricCategory, error) {
	ev := MetricCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetricCategory: valid values are %v", v, AllowedMetricCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricCategory) IsValid() bool {
	for _, existing := range AllowedMetricCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetricCategory value
func (v MetricCategory) Ptr() *MetricCategory {
	return &v
}

type NullableMetricCategory struct {
	value *MetricCategory
	isSet bool
}

func (v NullableMetricCategory) Get() *MetricCategory {
	return v.value
}

func (v *NullableMetricCategory) Set(val *MetricCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricCategory(val *MetricCategory) *NullableMetricCategory {
	return &NullableMetricCategory{value: val, isSet: true}
}

func (v NullableMetricCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

