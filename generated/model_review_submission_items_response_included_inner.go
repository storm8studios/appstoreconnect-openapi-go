/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"fmt"
)

// ReviewSubmissionItemsResponseIncludedInner - struct for ReviewSubmissionItemsResponseIncludedInner
type ReviewSubmissionItemsResponseIncludedInner struct {
	AppCustomProductPageVersion *AppCustomProductPageVersion
	AppEvent *AppEvent
	AppStoreVersion *AppStoreVersion
	AppStoreVersionExperiment *AppStoreVersionExperiment
}

// AppCustomProductPageVersionAsReviewSubmissionItemsResponseIncludedInner is a convenience function that returns AppCustomProductPageVersion wrapped in ReviewSubmissionItemsResponseIncludedInner
func AppCustomProductPageVersionAsReviewSubmissionItemsResponseIncludedInner(v *AppCustomProductPageVersion) ReviewSubmissionItemsResponseIncludedInner {
	return ReviewSubmissionItemsResponseIncludedInner{
		AppCustomProductPageVersion: v,
	}
}

// AppEventAsReviewSubmissionItemsResponseIncludedInner is a convenience function that returns AppEvent wrapped in ReviewSubmissionItemsResponseIncludedInner
func AppEventAsReviewSubmissionItemsResponseIncludedInner(v *AppEvent) ReviewSubmissionItemsResponseIncludedInner {
	return ReviewSubmissionItemsResponseIncludedInner{
		AppEvent: v,
	}
}

// AppStoreVersionAsReviewSubmissionItemsResponseIncludedInner is a convenience function that returns AppStoreVersion wrapped in ReviewSubmissionItemsResponseIncludedInner
func AppStoreVersionAsReviewSubmissionItemsResponseIncludedInner(v *AppStoreVersion) ReviewSubmissionItemsResponseIncludedInner {
	return ReviewSubmissionItemsResponseIncludedInner{
		AppStoreVersion: v,
	}
}

// AppStoreVersionExperimentAsReviewSubmissionItemsResponseIncludedInner is a convenience function that returns AppStoreVersionExperiment wrapped in ReviewSubmissionItemsResponseIncludedInner
func AppStoreVersionExperimentAsReviewSubmissionItemsResponseIncludedInner(v *AppStoreVersionExperiment) ReviewSubmissionItemsResponseIncludedInner {
	return ReviewSubmissionItemsResponseIncludedInner{
		AppStoreVersionExperiment: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ReviewSubmissionItemsResponseIncludedInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AppCustomProductPageVersion
	err = newStrictDecoder(data).Decode(&dst.AppCustomProductPageVersion)
	if err == nil {
		jsonAppCustomProductPageVersion, _ := json.Marshal(dst.AppCustomProductPageVersion)
		if string(jsonAppCustomProductPageVersion) == "{}" { // empty struct
			dst.AppCustomProductPageVersion = nil
		} else {
			match++
		}
	} else {
		dst.AppCustomProductPageVersion = nil
	}

	// try to unmarshal data into AppEvent
	err = newStrictDecoder(data).Decode(&dst.AppEvent)
	if err == nil {
		jsonAppEvent, _ := json.Marshal(dst.AppEvent)
		if string(jsonAppEvent) == "{}" { // empty struct
			dst.AppEvent = nil
		} else {
			match++
		}
	} else {
		dst.AppEvent = nil
	}

	// try to unmarshal data into AppStoreVersion
	err = newStrictDecoder(data).Decode(&dst.AppStoreVersion)
	if err == nil {
		jsonAppStoreVersion, _ := json.Marshal(dst.AppStoreVersion)
		if string(jsonAppStoreVersion) == "{}" { // empty struct
			dst.AppStoreVersion = nil
		} else {
			match++
		}
	} else {
		dst.AppStoreVersion = nil
	}

	// try to unmarshal data into AppStoreVersionExperiment
	err = newStrictDecoder(data).Decode(&dst.AppStoreVersionExperiment)
	if err == nil {
		jsonAppStoreVersionExperiment, _ := json.Marshal(dst.AppStoreVersionExperiment)
		if string(jsonAppStoreVersionExperiment) == "{}" { // empty struct
			dst.AppStoreVersionExperiment = nil
		} else {
			match++
		}
	} else {
		dst.AppStoreVersionExperiment = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AppCustomProductPageVersion = nil
		dst.AppEvent = nil
		dst.AppStoreVersion = nil
		dst.AppStoreVersionExperiment = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ReviewSubmissionItemsResponseIncludedInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ReviewSubmissionItemsResponseIncludedInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ReviewSubmissionItemsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	if src.AppCustomProductPageVersion != nil {
		return json.Marshal(&src.AppCustomProductPageVersion)
	}

	if src.AppEvent != nil {
		return json.Marshal(&src.AppEvent)
	}

	if src.AppStoreVersion != nil {
		return json.Marshal(&src.AppStoreVersion)
	}

	if src.AppStoreVersionExperiment != nil {
		return json.Marshal(&src.AppStoreVersionExperiment)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ReviewSubmissionItemsResponseIncludedInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AppCustomProductPageVersion != nil {
		return obj.AppCustomProductPageVersion
	}

	if obj.AppEvent != nil {
		return obj.AppEvent
	}

	if obj.AppStoreVersion != nil {
		return obj.AppStoreVersion
	}

	if obj.AppStoreVersionExperiment != nil {
		return obj.AppStoreVersionExperiment
	}

	// all schemas are nil
	return nil
}

type NullableReviewSubmissionItemsResponseIncludedInner struct {
	value *ReviewSubmissionItemsResponseIncludedInner
	isSet bool
}

func (v NullableReviewSubmissionItemsResponseIncludedInner) Get() *ReviewSubmissionItemsResponseIncludedInner {
	return v.value
}

func (v *NullableReviewSubmissionItemsResponseIncludedInner) Set(val *ReviewSubmissionItemsResponseIncludedInner) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewSubmissionItemsResponseIncludedInner) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewSubmissionItemsResponseIncludedInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewSubmissionItemsResponseIncludedInner(val *ReviewSubmissionItemsResponseIncludedInner) *NullableReviewSubmissionItemsResponseIncludedInner {
	return &NullableReviewSubmissionItemsResponseIncludedInner{value: val, isSet: true}
}

func (v NullableReviewSubmissionItemsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewSubmissionItemsResponseIncludedInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


