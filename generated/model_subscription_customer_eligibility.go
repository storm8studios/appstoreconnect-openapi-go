/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"fmt"
)

// SubscriptionCustomerEligibility the model 'SubscriptionCustomerEligibility'
type SubscriptionCustomerEligibility string

// List of SubscriptionCustomerEligibility
const (
	SUBSCRIPTIONCUSTOMERELIGIBILITY_NEW SubscriptionCustomerEligibility = "NEW"
	SUBSCRIPTIONCUSTOMERELIGIBILITY_EXISTING SubscriptionCustomerEligibility = "EXISTING"
	SUBSCRIPTIONCUSTOMERELIGIBILITY_EXPIRED SubscriptionCustomerEligibility = "EXPIRED"
)

// All allowed values of SubscriptionCustomerEligibility enum
var AllowedSubscriptionCustomerEligibilityEnumValues = []SubscriptionCustomerEligibility{
	"NEW",
	"EXISTING",
	"EXPIRED",
}

func (v *SubscriptionCustomerEligibility) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubscriptionCustomerEligibility(value)
	for _, existing := range AllowedSubscriptionCustomerEligibilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionCustomerEligibility", value)
}

// NewSubscriptionCustomerEligibilityFromValue returns a pointer to a valid SubscriptionCustomerEligibility
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionCustomerEligibilityFromValue(v string) (*SubscriptionCustomerEligibility, error) {
	ev := SubscriptionCustomerEligibility(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionCustomerEligibility: valid values are %v", v, AllowedSubscriptionCustomerEligibilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionCustomerEligibility) IsValid() bool {
	for _, existing := range AllowedSubscriptionCustomerEligibilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubscriptionCustomerEligibility value
func (v SubscriptionCustomerEligibility) Ptr() *SubscriptionCustomerEligibility {
	return &v
}

type NullableSubscriptionCustomerEligibility struct {
	value *SubscriptionCustomerEligibility
	isSet bool
}

func (v NullableSubscriptionCustomerEligibility) Get() *SubscriptionCustomerEligibility {
	return v.value
}

func (v *NullableSubscriptionCustomerEligibility) Set(val *SubscriptionCustomerEligibility) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionCustomerEligibility) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionCustomerEligibility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionCustomerEligibility(val *SubscriptionCustomerEligibility) *NullableSubscriptionCustomerEligibility {
	return &NullableSubscriptionCustomerEligibility{value: val, isSet: true}
}

func (v NullableSubscriptionCustomerEligibility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionCustomerEligibility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

