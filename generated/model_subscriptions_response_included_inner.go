/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
	"fmt"
)

// SubscriptionsResponseIncludedInner - struct for SubscriptionsResponseIncludedInner
type SubscriptionsResponseIncludedInner struct {
	PromotedPurchase *PromotedPurchase
	SubscriptionAppStoreReviewScreenshot *SubscriptionAppStoreReviewScreenshot
	SubscriptionGroup *SubscriptionGroup
	SubscriptionIntroductoryOffer *SubscriptionIntroductoryOffer
	SubscriptionLocalization *SubscriptionLocalization
	SubscriptionOfferCode *SubscriptionOfferCode
	SubscriptionPrice *SubscriptionPrice
	SubscriptionPromotionalOffer *SubscriptionPromotionalOffer
}

// PromotedPurchaseAsSubscriptionsResponseIncludedInner is a convenience function that returns PromotedPurchase wrapped in SubscriptionsResponseIncludedInner
func PromotedPurchaseAsSubscriptionsResponseIncludedInner(v *PromotedPurchase) SubscriptionsResponseIncludedInner {
	return SubscriptionsResponseIncludedInner{
		PromotedPurchase: v,
	}
}

// SubscriptionAppStoreReviewScreenshotAsSubscriptionsResponseIncludedInner is a convenience function that returns SubscriptionAppStoreReviewScreenshot wrapped in SubscriptionsResponseIncludedInner
func SubscriptionAppStoreReviewScreenshotAsSubscriptionsResponseIncludedInner(v *SubscriptionAppStoreReviewScreenshot) SubscriptionsResponseIncludedInner {
	return SubscriptionsResponseIncludedInner{
		SubscriptionAppStoreReviewScreenshot: v,
	}
}

// SubscriptionGroupAsSubscriptionsResponseIncludedInner is a convenience function that returns SubscriptionGroup wrapped in SubscriptionsResponseIncludedInner
func SubscriptionGroupAsSubscriptionsResponseIncludedInner(v *SubscriptionGroup) SubscriptionsResponseIncludedInner {
	return SubscriptionsResponseIncludedInner{
		SubscriptionGroup: v,
	}
}

// SubscriptionIntroductoryOfferAsSubscriptionsResponseIncludedInner is a convenience function that returns SubscriptionIntroductoryOffer wrapped in SubscriptionsResponseIncludedInner
func SubscriptionIntroductoryOfferAsSubscriptionsResponseIncludedInner(v *SubscriptionIntroductoryOffer) SubscriptionsResponseIncludedInner {
	return SubscriptionsResponseIncludedInner{
		SubscriptionIntroductoryOffer: v,
	}
}

// SubscriptionLocalizationAsSubscriptionsResponseIncludedInner is a convenience function that returns SubscriptionLocalization wrapped in SubscriptionsResponseIncludedInner
func SubscriptionLocalizationAsSubscriptionsResponseIncludedInner(v *SubscriptionLocalization) SubscriptionsResponseIncludedInner {
	return SubscriptionsResponseIncludedInner{
		SubscriptionLocalization: v,
	}
}

// SubscriptionOfferCodeAsSubscriptionsResponseIncludedInner is a convenience function that returns SubscriptionOfferCode wrapped in SubscriptionsResponseIncludedInner
func SubscriptionOfferCodeAsSubscriptionsResponseIncludedInner(v *SubscriptionOfferCode) SubscriptionsResponseIncludedInner {
	return SubscriptionsResponseIncludedInner{
		SubscriptionOfferCode: v,
	}
}

// SubscriptionPriceAsSubscriptionsResponseIncludedInner is a convenience function that returns SubscriptionPrice wrapped in SubscriptionsResponseIncludedInner
func SubscriptionPriceAsSubscriptionsResponseIncludedInner(v *SubscriptionPrice) SubscriptionsResponseIncludedInner {
	return SubscriptionsResponseIncludedInner{
		SubscriptionPrice: v,
	}
}

// SubscriptionPromotionalOfferAsSubscriptionsResponseIncludedInner is a convenience function that returns SubscriptionPromotionalOffer wrapped in SubscriptionsResponseIncludedInner
func SubscriptionPromotionalOfferAsSubscriptionsResponseIncludedInner(v *SubscriptionPromotionalOffer) SubscriptionsResponseIncludedInner {
	return SubscriptionsResponseIncludedInner{
		SubscriptionPromotionalOffer: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SubscriptionsResponseIncludedInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PromotedPurchase
	err = newStrictDecoder(data).Decode(&dst.PromotedPurchase)
	if err == nil {
		jsonPromotedPurchase, _ := json.Marshal(dst.PromotedPurchase)
		if string(jsonPromotedPurchase) == "{}" { // empty struct
			dst.PromotedPurchase = nil
		} else {
			match++
		}
	} else {
		dst.PromotedPurchase = nil
	}

	// try to unmarshal data into SubscriptionAppStoreReviewScreenshot
	err = newStrictDecoder(data).Decode(&dst.SubscriptionAppStoreReviewScreenshot)
	if err == nil {
		jsonSubscriptionAppStoreReviewScreenshot, _ := json.Marshal(dst.SubscriptionAppStoreReviewScreenshot)
		if string(jsonSubscriptionAppStoreReviewScreenshot) == "{}" { // empty struct
			dst.SubscriptionAppStoreReviewScreenshot = nil
		} else {
			match++
		}
	} else {
		dst.SubscriptionAppStoreReviewScreenshot = nil
	}

	// try to unmarshal data into SubscriptionGroup
	err = newStrictDecoder(data).Decode(&dst.SubscriptionGroup)
	if err == nil {
		jsonSubscriptionGroup, _ := json.Marshal(dst.SubscriptionGroup)
		if string(jsonSubscriptionGroup) == "{}" { // empty struct
			dst.SubscriptionGroup = nil
		} else {
			match++
		}
	} else {
		dst.SubscriptionGroup = nil
	}

	// try to unmarshal data into SubscriptionIntroductoryOffer
	err = newStrictDecoder(data).Decode(&dst.SubscriptionIntroductoryOffer)
	if err == nil {
		jsonSubscriptionIntroductoryOffer, _ := json.Marshal(dst.SubscriptionIntroductoryOffer)
		if string(jsonSubscriptionIntroductoryOffer) == "{}" { // empty struct
			dst.SubscriptionIntroductoryOffer = nil
		} else {
			match++
		}
	} else {
		dst.SubscriptionIntroductoryOffer = nil
	}

	// try to unmarshal data into SubscriptionLocalization
	err = newStrictDecoder(data).Decode(&dst.SubscriptionLocalization)
	if err == nil {
		jsonSubscriptionLocalization, _ := json.Marshal(dst.SubscriptionLocalization)
		if string(jsonSubscriptionLocalization) == "{}" { // empty struct
			dst.SubscriptionLocalization = nil
		} else {
			match++
		}
	} else {
		dst.SubscriptionLocalization = nil
	}

	// try to unmarshal data into SubscriptionOfferCode
	err = newStrictDecoder(data).Decode(&dst.SubscriptionOfferCode)
	if err == nil {
		jsonSubscriptionOfferCode, _ := json.Marshal(dst.SubscriptionOfferCode)
		if string(jsonSubscriptionOfferCode) == "{}" { // empty struct
			dst.SubscriptionOfferCode = nil
		} else {
			match++
		}
	} else {
		dst.SubscriptionOfferCode = nil
	}

	// try to unmarshal data into SubscriptionPrice
	err = newStrictDecoder(data).Decode(&dst.SubscriptionPrice)
	if err == nil {
		jsonSubscriptionPrice, _ := json.Marshal(dst.SubscriptionPrice)
		if string(jsonSubscriptionPrice) == "{}" { // empty struct
			dst.SubscriptionPrice = nil
		} else {
			match++
		}
	} else {
		dst.SubscriptionPrice = nil
	}

	// try to unmarshal data into SubscriptionPromotionalOffer
	err = newStrictDecoder(data).Decode(&dst.SubscriptionPromotionalOffer)
	if err == nil {
		jsonSubscriptionPromotionalOffer, _ := json.Marshal(dst.SubscriptionPromotionalOffer)
		if string(jsonSubscriptionPromotionalOffer) == "{}" { // empty struct
			dst.SubscriptionPromotionalOffer = nil
		} else {
			match++
		}
	} else {
		dst.SubscriptionPromotionalOffer = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PromotedPurchase = nil
		dst.SubscriptionAppStoreReviewScreenshot = nil
		dst.SubscriptionGroup = nil
		dst.SubscriptionIntroductoryOffer = nil
		dst.SubscriptionLocalization = nil
		dst.SubscriptionOfferCode = nil
		dst.SubscriptionPrice = nil
		dst.SubscriptionPromotionalOffer = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SubscriptionsResponseIncludedInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SubscriptionsResponseIncludedInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SubscriptionsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	if src.PromotedPurchase != nil {
		return json.Marshal(&src.PromotedPurchase)
	}

	if src.SubscriptionAppStoreReviewScreenshot != nil {
		return json.Marshal(&src.SubscriptionAppStoreReviewScreenshot)
	}

	if src.SubscriptionGroup != nil {
		return json.Marshal(&src.SubscriptionGroup)
	}

	if src.SubscriptionIntroductoryOffer != nil {
		return json.Marshal(&src.SubscriptionIntroductoryOffer)
	}

	if src.SubscriptionLocalization != nil {
		return json.Marshal(&src.SubscriptionLocalization)
	}

	if src.SubscriptionOfferCode != nil {
		return json.Marshal(&src.SubscriptionOfferCode)
	}

	if src.SubscriptionPrice != nil {
		return json.Marshal(&src.SubscriptionPrice)
	}

	if src.SubscriptionPromotionalOffer != nil {
		return json.Marshal(&src.SubscriptionPromotionalOffer)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SubscriptionsResponseIncludedInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PromotedPurchase != nil {
		return obj.PromotedPurchase
	}

	if obj.SubscriptionAppStoreReviewScreenshot != nil {
		return obj.SubscriptionAppStoreReviewScreenshot
	}

	if obj.SubscriptionGroup != nil {
		return obj.SubscriptionGroup
	}

	if obj.SubscriptionIntroductoryOffer != nil {
		return obj.SubscriptionIntroductoryOffer
	}

	if obj.SubscriptionLocalization != nil {
		return obj.SubscriptionLocalization
	}

	if obj.SubscriptionOfferCode != nil {
		return obj.SubscriptionOfferCode
	}

	if obj.SubscriptionPrice != nil {
		return obj.SubscriptionPrice
	}

	if obj.SubscriptionPromotionalOffer != nil {
		return obj.SubscriptionPromotionalOffer
	}

	// all schemas are nil
	return nil
}

type NullableSubscriptionsResponseIncludedInner struct {
	value *SubscriptionsResponseIncludedInner
	isSet bool
}

func (v NullableSubscriptionsResponseIncludedInner) Get() *SubscriptionsResponseIncludedInner {
	return v.value
}

func (v *NullableSubscriptionsResponseIncludedInner) Set(val *SubscriptionsResponseIncludedInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionsResponseIncludedInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionsResponseIncludedInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionsResponseIncludedInner(val *SubscriptionsResponseIncludedInner) *NullableSubscriptionsResponseIncludedInner {
	return &NullableSubscriptionsResponseIncludedInner{value: val, isSet: true}
}

func (v NullableSubscriptionsResponseIncludedInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionsResponseIncludedInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


