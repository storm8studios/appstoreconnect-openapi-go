/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreopenapi

import (
	"encoding/json"
)

// checks if the XcodeMetrics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &XcodeMetrics{}

// XcodeMetrics struct for XcodeMetrics
type XcodeMetrics struct {
	Version *string `json:"version,omitempty"`
	Insights *XcodeMetricsInsights `json:"insights,omitempty"`
	ProductData []XcodeMetricsProductDataInner `json:"productData,omitempty"`
}

// NewXcodeMetrics instantiates a new XcodeMetrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewXcodeMetrics() *XcodeMetrics {
	this := XcodeMetrics{}
	return &this
}

// NewXcodeMetricsWithDefaults instantiates a new XcodeMetrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewXcodeMetricsWithDefaults() *XcodeMetrics {
	this := XcodeMetrics{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *XcodeMetrics) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *XcodeMetrics) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *XcodeMetrics) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *XcodeMetrics) SetVersion(v string) {
	o.Version = &v
}

// GetInsights returns the Insights field value if set, zero value otherwise.
func (o *XcodeMetrics) GetInsights() XcodeMetricsInsights {
	if o == nil || IsNil(o.Insights) {
		var ret XcodeMetricsInsights
		return ret
	}
	return *o.Insights
}

// GetInsightsOk returns a tuple with the Insights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *XcodeMetrics) GetInsightsOk() (*XcodeMetricsInsights, bool) {
	if o == nil || IsNil(o.Insights) {
		return nil, false
	}
	return o.Insights, true
}

// HasInsights returns a boolean if a field has been set.
func (o *XcodeMetrics) HasInsights() bool {
	if o != nil && !IsNil(o.Insights) {
		return true
	}

	return false
}

// SetInsights gets a reference to the given XcodeMetricsInsights and assigns it to the Insights field.
func (o *XcodeMetrics) SetInsights(v XcodeMetricsInsights) {
	o.Insights = &v
}

// GetProductData returns the ProductData field value if set, zero value otherwise.
func (o *XcodeMetrics) GetProductData() []XcodeMetricsProductDataInner {
	if o == nil || IsNil(o.ProductData) {
		var ret []XcodeMetricsProductDataInner
		return ret
	}
	return o.ProductData
}

// GetProductDataOk returns a tuple with the ProductData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *XcodeMetrics) GetProductDataOk() ([]XcodeMetricsProductDataInner, bool) {
	if o == nil || IsNil(o.ProductData) {
		return nil, false
	}
	return o.ProductData, true
}

// HasProductData returns a boolean if a field has been set.
func (o *XcodeMetrics) HasProductData() bool {
	if o != nil && !IsNil(o.ProductData) {
		return true
	}

	return false
}

// SetProductData gets a reference to the given []XcodeMetricsProductDataInner and assigns it to the ProductData field.
func (o *XcodeMetrics) SetProductData(v []XcodeMetricsProductDataInner) {
	o.ProductData = v
}

func (o XcodeMetrics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o XcodeMetrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Insights) {
		toSerialize["insights"] = o.Insights
	}
	if !IsNil(o.ProductData) {
		toSerialize["productData"] = o.ProductData
	}
	return toSerialize, nil
}

type NullableXcodeMetrics struct {
	value *XcodeMetrics
	isSet bool
}

func (v NullableXcodeMetrics) Get() *XcodeMetrics {
	return v.value
}

func (v *NullableXcodeMetrics) Set(val *XcodeMetrics) {
	v.value = val
	v.isSet = true
}

func (v NullableXcodeMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableXcodeMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableXcodeMetrics(val *XcodeMetrics) *NullableXcodeMetrics {
	return &NullableXcodeMetrics{value: val, isSet: true}
}

func (v NullableXcodeMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableXcodeMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


